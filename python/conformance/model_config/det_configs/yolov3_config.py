from ...config import Genfunc
from ...dtype import Dtype

yolov3_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 3, 320, 288), (8, 32, 320, 288), (8, 64, 160, 144), (8, 32, 160, 144), (8, 64, 160, 144), (8, 128, 80, 72), (8, 64, 80, 72), (8, 128, 80, 72), (8, 256, 40, 36), (8, 128, 40, 36), (8, 256, 40, 36), (8, 512, 20, 18), (8, 256, 20, 18), (8, 512, 20, 18), (8, 1024, 10, 9), (8, 512, 10, 9), (8, 512, 10, 9), (8, 768, 20, 18), (8, 256, 20, 18), (8, 384, 40, 36), (1, 3, 224, 320), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 64, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 128, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 256, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 512, 7, 10), (1, 768, 14, 20), (1, 256, 14, 20), (1, 384, 28, 40), (1, 3, 256, 320), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 64, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 128, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 512, 8, 10), (1, 768, 16, 20), (1, 256, 16, 20), (1, 384, 32, 40), (1, 3, 320, 224), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 64, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 128, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 256, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 512, 10, 7), (1, 768, 20, 14), (1, 256, 20, 14), (1, 384, 40, 28), (1, 3, 320, 256), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 64, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 128, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 256, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 512, 10, 8), (1, 768, 20, 16), (1, 256, 20, 16), (1, 384, 40, 32), (1, 3, 288, 320), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 64, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 128, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 256, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 512, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 512, 9, 10), (1, 768, 18, 20), (1, 256, 18, 20), (1, 384, 36, 40), (1, 3, 320, 320), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 64, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 128, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 512, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 512, 10, 10), (1, 768, 20, 20), (1, 256, 20, 20), (1, 384, 40, 40), (1, 3, 192, 320), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 64, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 128, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 256, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 512, 6, 10), (1, 768, 12, 20), (1, 256, 12, 20), (1, 384, 24, 40), (1, 3, 160, 320), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 64, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 128, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 256, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 512, 5, 10), (1, 768, 10, 20), (1, 256, 10, 20), (1, 384, 20, 40), (1, 3, 320, 288), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 64, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 128, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 256, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 512, 10, 9), (1, 768, 20, 18), (1, 256, 20, 18), (1, 384, 40, 36), (1, 3, 320, 192), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 64, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 128, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 256, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 512, 10, 6), (1, 768, 20, 12), (1, 256, 20, 12), (1, 384, 40, 24), (1, 3, 320, 160), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 64, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 128, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 256, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 512, 10, 5), (1, 768, 20, 10), (1, 256, 20, 10), (1, 384, 40, 20), (1, 3, 96, 320), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 64, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 128, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 256, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 512, 3, 10), (1, 768, 6, 20), (1, 256, 6, 20), (1, 384, 12, 40), (1, 3, 128, 320), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 64, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 128, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 256, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 512, 4, 10), (1, 768, 8, 20), (1, 256, 8, 20), (1, 384, 16, 40), (1, 3, 320, 128), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 64, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 128, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 256, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 512, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 512, 10, 4), (1, 768, 20, 8), (1, 256, 20, 8), (1, 384, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 32, 320, 288), (8, 64, 160, 144), (8, 32, 160, 144), (8, 128, 80, 72), (8, 64, 80, 72), (8, 256, 40, 36), (8, 128, 40, 36), (8, 512, 20, 18), (8, 256, 20, 18), (8, 1024, 10, 9), (8, 512, 10, 9), (8, 512, 10, 9), (8, 1024, 10, 9), (8, 256, 10, 9), (8, 256, 20, 18), (8, 512, 20, 18), (8, 128, 20, 18), (8, 128, 40, 36), (8, 256, 40, 36), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'leaky_relu': dict(
        name=["leaky_relu"],
        para=dict(
            inplace=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 32, 320, 288), (8, 64, 160, 144), (8, 32, 160, 144), (8, 128, 80, 72), (8, 64, 80, 72), (8, 256, 40, 36), (8, 128, 40, 36), (8, 512, 20, 18), (8, 256, 20, 18), (8, 1024, 10, 9), (8, 512, 10, 9), (8, 256, 10, 9), (8, 128, 20, 18), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 64, 160, 144), (8, 128, 80, 72), (8, 256, 40, 36), (8, 512, 20, 18), (8, 1024, 10, 9), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2,), (1,), (11,), (6,), (4,), (15,), (2, 1), (1, 1), (11, 1), (6, 1), (7,), (4, 1), (15, 1), (19,), (8, 270), (8, 1080), (8, 4320), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4410, 2), (4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (5040, 2), (5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (5670, 2), (5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (6300, 2), (6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3780, 2), (3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3150, 2), (3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1890, 2), (1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2520, 2), (2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(8, 64, 160, 144), (8, 128, 80, 72), (8, 256, 40, 36), (8, 512, 20, 18), (8, 1024, 10, 9), (90, 1, 4), (360, 1, 4), (1440, 1, 4), (2,), (1,), (11,), (6,), (4,), (15,), (1, 5670), (1, 5670), (1, 5670), (1, 5670), (7,), (1, 5670), (1, 5670), (19,), (8, 270), (8, 1080), (8, 4320), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (70, 1, 4), (280, 1, 4), (1120, 1, 4), (4410, 2), (1, 4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (80, 1, 4), (320, 1, 4), (1280, 1, 4), (5040, 2), (1, 5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (5670, 2), (1, 5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (100, 1, 4), (400, 1, 4), (1600, 1, 4), (6300, 2), (1, 6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (60, 1, 4), (240, 1, 4), (960, 1, 4), (3780, 2), (1, 3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (50, 1, 4), (200, 1, 4), (800, 1, 4), (3150, 2), (1, 3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (30, 1, 4), (120, 1, 4), (480, 1, 4), (1890, 2), (1, 1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (40, 1, 4), (160, 1, 4), (640, 1, 4), (2520, 2), (1, 2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (2,), (1,), (15,), (4,), (6,), (13,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            scale_factor=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 256, 10, 9), (8, 128, 20, 18), (1, 256, 7, 10), (1, 128, 14, 20), (1, 256, 8, 10), (1, 128, 16, 20), (1, 256, 10, 7), (1, 128, 20, 14), (1, 256, 10, 8), (1, 128, 20, 16), (1, 256, 9, 10), (1, 128, 18, 20), (1, 256, 10, 10), (1, 128, 20, 20), (1, 256, 6, 10), (1, 128, 12, 20), (1, 256, 5, 10), (1, 128, 10, 20), (1, 256, 10, 9), (1, 128, 20, 18), (1, 256, 10, 6), (1, 128, 20, 12), (1, 256, 10, 5), (1, 128, 20, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 256, 4, 10), (1, 128, 8, 20), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((8, 256, 20, 18), (8, 512, 20, 18)), ((8, 128, 40, 36), (8, 256, 40, 36)), ((1, 256, 14, 20), (1, 512, 14, 20)), ((1, 128, 28, 40), (1, 256, 28, 40)), ((0, 4), (0, 1)), ((1, 256, 16, 20), (1, 512, 16, 20)), ((1, 128, 32, 40), (1, 256, 32, 40)), ((1, 256, 20, 14), (1, 512, 20, 14)), ((1, 128, 40, 28), (1, 256, 40, 28)), ((1, 256, 20, 16), (1, 512, 20, 16)), ((1, 128, 40, 32), (1, 256, 40, 32)), ((1, 256, 18, 20), (1, 512, 18, 20)), ((1, 128, 36, 40), (1, 256, 36, 40)), ((1, 256, 20, 20), (1, 512, 20, 20)), ((1, 128, 40, 40), (1, 256, 40, 40)), ((1, 256, 12, 20), (1, 512, 12, 20)), ((1, 128, 24, 40), (1, 256, 24, 40)), ((1, 256, 10, 20), (1, 512, 10, 20)), ((1, 128, 20, 40), (1, 256, 20, 40)), ((1, 256, 20, 18), (1, 512, 20, 18)), ((1, 128, 40, 36), (1, 256, 40, 36)), ((1, 256, 20, 12), (1, 512, 20, 12)), ((1, 128, 40, 24), (1, 256, 40, 24)), ((1, 256, 20, 10), (1, 512, 20, 10)), ((1, 128, 40, 20), (1, 256, 40, 20)), ((1, 256, 6, 20), (1, 512, 6, 20)), ((1, 128, 12, 40), (1, 256, 12, 40)), ((1, 256, 8, 20), (1, 512, 8, 20)), ((1, 128, 16, 40), (1, 256, 16, 40)), ((1, 256, 20, 8), (1, 512, 20, 8)), ((1, 128, 40, 16), (1, 256, 40, 16))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 1024, 10, 9), (8, 512, 20, 18), (8, 256, 40, 36), (1, 1024, 7, 10), (1, 512, 14, 20), (1, 256, 28, 40), (1, 1024, 8, 10), (1, 512, 16, 20), (1, 256, 32, 40), (1, 1024, 10, 7), (1, 512, 20, 14), (1, 256, 40, 28), (1, 1024, 10, 8), (1, 512, 20, 16), (1, 256, 40, 32), (1, 1024, 9, 10), (1, 512, 18, 20), (1, 256, 36, 40), (1, 1024, 10, 10), (1, 512, 20, 20), (1, 256, 40, 40), (1, 1024, 6, 10), (1, 512, 12, 20), (1, 256, 24, 40), (1, 1024, 5, 10), (1, 512, 10, 20), (1, 256, 20, 40), (1, 1024, 10, 9), (1, 512, 20, 18), (1, 256, 40, 36), (1, 1024, 10, 6), (1, 512, 20, 12), (1, 256, 40, 24), (1, 1024, 10, 5), (1, 512, 20, 10), (1, 256, 40, 20), (1, 1024, 3, 10), (1, 512, 6, 20), (1, 256, 12, 40), (1, 1024, 4, 10), (1, 512, 8, 20), (1, 256, 16, 40), (1, 1024, 10, 4), (1, 512, 20, 8), (1, 256, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            end=[9, 10, 18, 20, 36, 40, 7, 14, 28, 8, 16, 32, 6, 12, 24, 5, 3, 4],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 32, 16, 16, 8, 8, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 35.0, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 0.5, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(9,), (10,), (18,), (20,), (36,), (40,), (2,), (1,), (11,), (6,), (4,), (15,), (7,), (19,), (), (7,), (14,), (28,), (4410, 2), (8,), (16,), (32,), (5040, 2), (5670, 2), (6300, 2), (6,), (12,), (24,), (3780, 2), (5,), (10,), (20,), (3150, 2), (3,), (6,), (12,), (1890, 2), (4,), (8,), (16,), (2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((90,), (90,), (90,), (90,)), ((360,), (360,), (360,), (360,)), ((1440,), (1440,), (1440,), (1440,)), ((2,), (2,), (2,), (2,)), ((1,), (1,), (1,), (1,)), ((15,), (15,), (15,), (15,)), ((7,), (7,), (7,), (7,)), ((19,), (19,), (19,), (19,)), ((4,), (4,), (4,), (4,)), ((70,), (70,), (70,), (70,)), ((280,), (280,), (280,), (280,)), ((1120,), (1120,), (1120,), (1120,)), ((1, 4410), (1, 4410), (1, 4410), (1, 4410)), ((80,), (80,), (80,), (80,)), ((320,), (320,), (320,), (320,)), ((1280,), (1280,), (1280,), (1280,)), ((1, 5040), (1, 5040), (1, 5040), (1, 5040)), ((1, 5670), (1, 5670), (1, 5670), (1, 5670)), ((100,), (100,), (100,), (100,)), ((400,), (400,), (400,), (400,)), ((1600,), (1600,), (1600,), (1600,)), ((1, 6300), (1, 6300), (1, 6300), (1, 6300)), ((60,), (60,), (60,), (60,)), ((240,), (240,), (240,), (240,)), ((960,), (960,), (960,), (960,)), ((1, 3780), (1, 3780), (1, 3780), (1, 3780)), ((50,), (50,), (50,), (50,)), ((200,), (200,), (200,), (200,)), ((800,), (800,), (800,), (800,)), ((1, 3150), (1, 3150), (1, 3150), (1, 3150)), ((30,), (30,), (30,), (30,)), ((120,), (120,), (120,), (120,)), ((480,), (480,), (480,), (480,)), ((1, 1890), (1, 1890), (1, 1890), (1, 1890)), ((40,), (40,), (40,), (40,)), ((160,), (160,), (160,), (160,)), ((640,), (640,), (640,), (640,)), ((1, 2520), (1, 2520), (1, 2520), (1, 2520))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 16, 8, 32, 16, 8, 32, 16, 8, 32, 16, 8, 32, 16, 8, 32, 16, 8],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (2,), (2,), (1,), (1,), (1,), (11,), (11,), (11,), (6,), (6,), (6,), (4,), (4,), (4,), (15,), (15,), (15,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'floor': dict(
        name=["floor"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (11,), (6,), (4,), (15,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[9, 18, 36, 9, 18, 36, 9, 18, 36, 9, 18, 36, 9, 18, 36, 9, 18, 36],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (2,), (2,), (1,), (1,), (1,), (11,), (11,), (11,), (6,), (6,), (6,), (4,), (4,), (4,), (15,), (15,), (15,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (11,), (6,), (4,), (15,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (1,), (11,), (6,), (4,), (15,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(90, 3), (360, 3), (1440, 3)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(90, 1), (360, 1), (1440, 1)],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((270, 4), (1080, 4), (4320, 4)), ((210, 4), (840, 4), (3360, 4)), ((210,), (840,), (3360,)), ((240, 4), (960, 4), (3840, 4)), ((240,), (960,), (3840,)), ((270,), (1080,), (4320,)), ((300, 4), (1200, 4), (4800, 4)), ((300,), (1200,), (4800,)), ((180, 4), (720, 4), (2880, 4)), ((180,), (720,), (2880,)), ((150, 4), (600, 4), (2400, 4)), ((150,), (600,), (2400,)), ((90, 4), (360, 4), (1440, 4)), ((90,), (360,), (1440,)), ((120, 4), (480, 4), (1920, 4)), ((120,), (480,), (1920,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((270,), (1080,), (4320,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((270,), (1080,), (4320,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (5670,), (2, 5670, 2), (2, 5670), (1,), (1, 5670, 2), (1, 5670), (11,), (11, 5670, 2), (11, 5670), (15,), (6,), (6, 5670, 2), (6, 5670), (7,), (4,), (4, 5670, 2), (4, 5670), (15, 5670, 2), (15, 5670), (19,), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (6300, 2), (1, 6300), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (5670,), (2, 5670, 2), (2, 5670), (1,), (1, 5670, 2), (1, 5670), (11,), (11, 5670, 2), (11, 5670), (15,), (6,), (6, 5670, 2), (6, 5670), (7,), (4,), (4, 5670, 2), (4, 5670), (15, 5670, 2), (15, 5670), (19,), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (6300, 2), (1, 6300), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (5670,), (2, 5670), (1,), (1, 5670), (11,), (11, 5670), (6,), (6, 5670), (4,), (4, 5670), (15,), (15, 5670), (8, 270, 1), (8, 270, 80), (8, 270), (8, 270, 1), (8, 270, 2), (8, 270, 2), (8, 1080, 1), (8, 1080, 80), (8, 1080), (8, 1080, 1), (8, 1080, 2), (8, 1080, 2), (8, 4320, 1), (8, 4320, 80), (8, 4320), (8, 4320, 1), (8, 4320, 2), (8, 4320, 2), (1, 4410, 2), (4410, 2), (56320,), (60880,), (54320,), (1, 5040, 2), (5040, 2), (65200,), (52160,), (65120,), (58720,), (60480,), (56000,), (60640,), (51360,), (64160,), (1, 5670, 2), (5670, 2), (74000,), (64320,), (64800,), (71520,), (58480,), (74880,), (58960,), (70160,), (67360,), (66800,), (55840,), (62080,), (53040,), (60080,), (1, 6300, 2), (6300, 2), (76560,), (54800,), (56560,), (84240,), (67760,), (63200,), (56640,), (61680,), (66400,), (72400,), (53200,), (1, 3780, 2), (3780, 2), (45920,), (63360,), (75440,), (57040,), (60320,), (65440,), (70000,), (51600,), (85600,), (69120,), (54640,), (45360,), (78720,), (66000,), (61280,), (55520,), (58640,), (53440,), (60400,), (71680,), (64480,), (57440,), (69920,), (62400,), (61040,), (56800,), (65280,), (47520,), (57280,), (53600,), (58560,), (55280,), (64560,), (54480,), (57760,), (54160,), (56720,), (57520,), (65840,), (54240,), (54400,), (65360,), (63280,), (60560,), (50960,), (59200,), (54960,), (58800,), (56960,), (1, 3150, 2), (3150, 2), (39680,), (61920,), (59280,), (59920,), (62480,), (61440,), (50400,), (69440,), (69280,), (62880,), (66320,), (52480,), (45200,), (67680,), (53920,), (52560,), (62640,), (56080,), (56480,), (55200,), (67200,), (56160,), (63760,), (58000,), (62960,), (62160,), (95680,), (67040,), (84160,), (58160,), (54720,), (69200,), (69680,), (72640,), (59360,), (50320,), (65760,), (46240,), (82000,), (92640,), (53760,), (63600,), (66240,), (64240,), (60240,), (81840,), (55360,), (62560,), (52080,), (82080,), (66880,), (52960,), (63520,), (61600,), (63040,), (82400,), (67920,), (60000,), (69600,), (56400,), (55680,), (74160,), (50560,), (66720,), (50800,), (57840,), (54000,), (68240,), (60800,), (70720,), (79680,), (48160,), (46080,), (48720,), (62320,), (60960,), (53520,), (55600,), (64080,), (53280,), (63120,), (48320,), (77200,), (79760,), (53360,), (75040,), (70800,), (87360,), (63840,), (61760,), (77760,), (63680,), (85120,), (71760,), (68080,), (65040,), (62720,), (64880,), (52400,), (64640,), (58880,), (69360,), (60720,), (63440,), (57120,), (59760,), (68640,), (70400,), (77600,), (61200,), (66560,), (68960,), (52640,), (55760,), (61360,), (73200,), (71600,), (75680,), (56880,), (61120,), (52720,), (81040,), (72000,), (77040,), (61840,), (80240,), (79280,), (81360,), (57360,), (39760,), (62240,), (49040,), (58080,), (84560,), (71440,), (54880,), (67280,), (59040,), (51520,), (64400,), (58400,), (56240,), (87680,), (48000,), (66960,), (55920,), (51280,), (62000,), (43120,), (51200,), (59520,), (53680,), (59120,), (64960,), (55040,), (52880,), (51760,), (74800,), (71040,), (72160,), (68480,), (84000,), (69520,), (64000,), (44720,), (65920,), (52000,), (53840,), (68320,), (50640,), (67520,), (68880,), (62800,), (72960,), (59440,), (66080,), (66640,), (55120,), (80880,), (40560,), (64720,), (72320,), (80560,), (70640,), (71120,), (60160,), (76080,), (79920,), (59680,), (51120,), (67840,), (92960,), (65520,), (72880,), (72720,), (75200,), (54080,), (45760,), (53120,), (77280,), (76720,), (52800,), (67600,), (49120,), (65600,), (51920,), (65680,), (44560,), (54560,), (50880,), (38080,), (67440,), (59840,), (52240,), (72480,), (72080,), (49440,), (73360,), (69840,), (55440,), (75120,), (61520,), (71360,), (52320,), (76000,), (51680,), (59600,), (90640,), (44960,), (77520,), (89120,), (48240,), (85360,), (70480,), (51440,), (48400,), (44000,), (63920,), (70240,), (50480,), (47360,), (78160,), (47920,), (42480,), (79120,), (74640,), (57600,), (45680,), (66160,), (68800,), (83120,), (57920,), (85920,), (82240,), (48480,), (84320,), (78640,), (41440,), (75520,), (45520,), (46480,), (81440,), (57200,), (73040,), (81680,), (85520,), (75600,), (68160,), (58240,), (81520,), (68720,), (74560,), (88400,), (80320,), (48560,), (49360,), (71200,), (73920,), (79600,), (89440,), (76320,), (40160,), (74480,), (50240,), (57680,), (86640,), (68400,), (50080,), (44880,), (78960,), (51040,), (71920,), (1, 1890, 2), (1890, 2), (27760,), (87920,), (50160,), (77680,), (79040,), (77840,), (47120,), (78000,), (46000,), (73600,), (73680,), (25440,), (83920,), (73840,), (77920,), (58320,), (1, 2520, 2), (2520, 2), (33360,), (47840,), (66480,), (48800,), (84640,), (39360,), (73520,), (42000,), (44160,), (80720,), (50000,), (77120,), (88240,), (84400,), (76240,), (84800,), (67120,), (86960,), (47760,), (49680,), (77360,), (47600,), (70560,), (78560,), (76160,), (44800,), (51840,), (79360,), (41600,), (87760,), (76480,), (49280,), (45600,), (68000,), (46720,), (83280,), (68560,), (47440,), (69040,), (75360,), (82560,), (86160,), (80160,), (85440,), (72800,), (40640,), (83040,), (70880,), (78880,), (80080,), (49760,), (28560,), (48880,), (74960,), (41280,), (81120,), (40320,), (78240,), (80640,), (81280,), (35360,), (47200,), (74720,), (47040,), (26320,), (47280,), (42320,), (71840,), (76800,), (46800,), (74080,), (78480,), (82320,), (75760,), (69760,), (38400,), (49520,), (81600,), (92400,), (46960,), (76640,), (40480,), (49200,), (75920,), (48080,), (80960,), (46400,), (42640,), (76880,), (46320,), (40720,), (70320,), (78320,), (34000,), (70960,), (75280,), (82720,), (88720,), (43680,), (29760,), (82880,), (44480,), (89280,), (49600,), (84720,), (81760,), (40000,), (45840,), (49840,), (80400,), (74400,), (42560,), (91440,), (82160,), (46560,), (71280,), (50720,), (47680,), (83440,), (76960,), (34560,), (78800,), (26000,), (33040,), (34800,), (88960,), (83360,), (40800,), (44080,), (88160,), (49920,), (87040,), (72560,), (46880,), (39520,), (88880,), (39040,), (90720,), (34160,), (44320,), (74320,), (89600,), (45040,), (91120,), (70080,), (44400,), (79840,), (77440,), (73760,), (39200,), (75840,), (31920,), (83520,), (83200,), (73440,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (5670,), (2, 5670), (1,), (1, 5670), (11,), (11, 5670), (6,), (6, 5670), (4,), (4, 5670), (15,), (15, 5670), (8, 270, 80), (8, 270, 80), (8, 270), (8, 270, 2), (8, 270, 2), (8, 270, 1), (8, 1080, 80), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 1080, 2), (8, 1080, 1), (8, 4320, 80), (8, 4320, 80), (8, 4320), (8, 4320, 2), (8, 4320, 2), (8, 4320, 1), (4410, 1), (1, 4410, 2), (56320,), (60880,), (54320,), (5040, 1), (1, 5040, 2), (65200,), (52160,), (65120,), (58720,), (60480,), (56000,), (60640,), (51360,), (64160,), (5670, 1), (1, 5670, 2), (74000,), (64320,), (64800,), (71520,), (58480,), (74880,), (58960,), (70160,), (67360,), (66800,), (55840,), (62080,), (53040,), (60080,), (6300, 1), (1, 6300, 2), (76560,), (54800,), (56560,), (84240,), (67760,), (63200,), (56640,), (61680,), (66400,), (72400,), (53200,), (3780, 1), (1, 3780, 2), (45920,), (63360,), (75440,), (57040,), (60320,), (65440,), (70000,), (51600,), (85600,), (69120,), (54640,), (45360,), (78720,), (66000,), (61280,), (55520,), (58640,), (53440,), (60400,), (71680,), (64480,), (57440,), (69920,), (62400,), (61040,), (56800,), (65280,), (47520,), (57280,), (53600,), (58560,), (55280,), (64560,), (54480,), (57760,), (54160,), (56720,), (57520,), (65840,), (54240,), (54400,), (65360,), (63280,), (60560,), (50960,), (59200,), (54960,), (58800,), (56960,), (3150, 1), (1, 3150, 2), (39680,), (61920,), (59280,), (59920,), (62480,), (61440,), (50400,), (69440,), (69280,), (62880,), (66320,), (52480,), (45200,), (67680,), (53920,), (52560,), (62640,), (56080,), (56480,), (55200,), (67200,), (56160,), (63760,), (58000,), (62960,), (62160,), (95680,), (67040,), (84160,), (58160,), (54720,), (69200,), (69680,), (72640,), (59360,), (50320,), (65760,), (46240,), (82000,), (92640,), (53760,), (63600,), (66240,), (64240,), (60240,), (81840,), (55360,), (62560,), (52080,), (82080,), (66880,), (52960,), (63520,), (61600,), (63040,), (82400,), (67920,), (60000,), (69600,), (56400,), (55680,), (74160,), (50560,), (66720,), (50800,), (57840,), (54000,), (68240,), (60800,), (70720,), (79680,), (48160,), (46080,), (48720,), (62320,), (60960,), (53520,), (55600,), (64080,), (53280,), (63120,), (48320,), (77200,), (79760,), (53360,), (75040,), (70800,), (87360,), (63840,), (61760,), (77760,), (63680,), (85120,), (71760,), (68080,), (65040,), (62720,), (64880,), (52400,), (64640,), (58880,), (69360,), (60720,), (63440,), (57120,), (59760,), (68640,), (70400,), (77600,), (61200,), (66560,), (68960,), (52640,), (55760,), (61360,), (73200,), (71600,), (75680,), (56880,), (61120,), (52720,), (81040,), (72000,), (77040,), (61840,), (80240,), (79280,), (81360,), (57360,), (39760,), (62240,), (49040,), (58080,), (84560,), (71440,), (54880,), (67280,), (59040,), (51520,), (64400,), (58400,), (56240,), (87680,), (48000,), (66960,), (55920,), (51280,), (62000,), (43120,), (51200,), (59520,), (53680,), (59120,), (64960,), (55040,), (52880,), (51760,), (74800,), (71040,), (72160,), (68480,), (84000,), (69520,), (64000,), (44720,), (65920,), (52000,), (53840,), (68320,), (50640,), (67520,), (68880,), (62800,), (72960,), (59440,), (66080,), (66640,), (55120,), (80880,), (40560,), (64720,), (72320,), (80560,), (70640,), (71120,), (60160,), (76080,), (79920,), (59680,), (51120,), (67840,), (92960,), (65520,), (72880,), (72720,), (75200,), (54080,), (45760,), (53120,), (77280,), (76720,), (52800,), (67600,), (49120,), (65600,), (51920,), (65680,), (44560,), (54560,), (50880,), (38080,), (67440,), (59840,), (52240,), (72480,), (72080,), (49440,), (73360,), (69840,), (55440,), (75120,), (61520,), (71360,), (52320,), (76000,), (51680,), (59600,), (90640,), (44960,), (77520,), (89120,), (48240,), (85360,), (70480,), (51440,), (48400,), (44000,), (63920,), (70240,), (50480,), (47360,), (78160,), (47920,), (42480,), (79120,), (74640,), (57600,), (45680,), (66160,), (68800,), (83120,), (57920,), (85920,), (82240,), (48480,), (84320,), (78640,), (41440,), (75520,), (45520,), (46480,), (81440,), (57200,), (73040,), (81680,), (85520,), (75600,), (68160,), (58240,), (81520,), (68720,), (74560,), (88400,), (80320,), (48560,), (49360,), (71200,), (73920,), (79600,), (89440,), (76320,), (40160,), (74480,), (50240,), (57680,), (86640,), (68400,), (50080,), (44880,), (78960,), (51040,), (71920,), (1890, 1), (1, 1890, 2), (27760,), (87920,), (50160,), (77680,), (79040,), (77840,), (47120,), (78000,), (46000,), (73600,), (73680,), (25440,), (83920,), (73840,), (77920,), (58320,), (2520, 1), (1, 2520, 2), (33360,), (47840,), (66480,), (48800,), (84640,), (39360,), (73520,), (42000,), (44160,), (80720,), (50000,), (77120,), (88240,), (84400,), (76240,), (84800,), (67120,), (86960,), (47760,), (49680,), (77360,), (47600,), (70560,), (78560,), (76160,), (44800,), (51840,), (79360,), (41600,), (87760,), (76480,), (49280,), (45600,), (68000,), (46720,), (83280,), (68560,), (47440,), (69040,), (75360,), (82560,), (86160,), (80160,), (85440,), (72800,), (40640,), (83040,), (70880,), (78880,), (80080,), (49760,), (28560,), (48880,), (74960,), (41280,), (81120,), (40320,), (78240,), (80640,), (81280,), (35360,), (47200,), (74720,), (47040,), (26320,), (47280,), (42320,), (71840,), (76800,), (46800,), (74080,), (78480,), (82320,), (75760,), (69760,), (38400,), (49520,), (81600,), (92400,), (46960,), (76640,), (40480,), (49200,), (75920,), (48080,), (80960,), (46400,), (42640,), (76880,), (46320,), (40720,), (70320,), (78320,), (34000,), (70960,), (75280,), (82720,), (88720,), (43680,), (29760,), (82880,), (44480,), (89280,), (49600,), (84720,), (81760,), (40000,), (45840,), (49840,), (80400,), (74400,), (42560,), (91440,), (82160,), (46560,), (71280,), (50720,), (47680,), (83440,), (76960,), (34560,), (78800,), (26000,), (33040,), (34800,), (88960,), (83360,), (40800,), (44080,), (88160,), (49920,), (87040,), (72560,), (46880,), (39520,), (88880,), (39040,), (90720,), (34160,), (44320,), (74320,), (89600,), (45040,), (91120,), (70080,), (44400,), (79840,), (77440,), (73760,), (39200,), (75840,), (31920,), (83520,), (83200,), (73440,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (2, 5670), (1, 1, 2), (1, 5670), (11, 1, 2), (11, 5670), (6, 1, 2), (6, 5670), (4, 1, 2), (4, 5670), (15, 1, 2), (15, 5670)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 5670, 2), (1,), (1, 5670, 2), (1,), (1, 5670, 2), (1,), (1, 5670, 2), (1,), (1, 5670, 2), (1,), (1, 5670, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'minimum': dict(
        name=["minimum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (1, 1, 2), (11, 1, 2), (6, 1, 2), (4, 1, 2), (15, 1, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 5670, 2), (1, 5670, 2), (1, 5670, 2), (1, 5670, 2), (1, 5670, 2), (1, 5670, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 1e-06, 0, 1e-06, 0, 1e-06, 0, 1e-06, 0, 0, 1e-06, 1e-06],
            max=[None, 0.999999, None, 0.999999, None, 0.999999, None, 0.999999, None, None, 0.999999, 0.999999],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 5670, 2), (2,), (1, 5670, 2), (1,), (11, 5670, 2), (15,), (6, 5670, 2), (7,), (4, 5670, 2), (15, 5670, 2), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 5670), (2,), (1, 5670), (1,), (11, 5670), (15,), (6, 5670), (7,), (4, 5670), (15, 5670), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 5670), (2,), (1, 5670), (1,), (11, 5670), (15,), (6, 5670), (7,), (4, 5670), (15, 5670), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 5670), (2, 5670), (1, 5670), (1, 5670), (11, 5670), (11, 5670), (6, 5670), (6, 5670), (4, 5670), (4, 5670), (15, 5670), (15, 5670)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,), (8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2), (4410,), (5040,), (5670,), (6300,), (3780,), (3150,), (1890,), (2520,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'le': dict(
        name=["le"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,), (8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(5670,), (8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'bitwise_not': dict(
        name=["bitwise_not"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,), (), (), (56320,), (60880,), (54320,), (65200,), (52160,), (65120,), (58720,), (60480,), (56000,), (60640,), (51360,), (64160,), (74000,), (64320,), (64800,), (71520,), (58480,), (74880,), (58960,), (70160,), (67360,), (66800,), (55840,), (62080,), (53040,), (60080,), (76560,), (54800,), (56560,), (84240,), (67760,), (63200,), (56640,), (61680,), (66400,), (72400,), (53200,), (45920,), (63360,), (75440,), (57040,), (60320,), (65440,), (70000,), (51600,), (85600,), (69120,), (54640,), (45360,), (78720,), (66000,), (61280,), (55520,), (58640,), (53440,), (60400,), (71680,), (64480,), (57440,), (69920,), (62400,), (61040,), (56800,), (65280,), (47520,), (57280,), (53600,), (58560,), (55280,), (64560,), (54480,), (57760,), (54160,), (56720,), (57520,), (65840,), (54240,), (54400,), (65360,), (63280,), (60560,), (50960,), (59200,), (54960,), (58800,), (56960,), (39680,), (61920,), (59280,), (59920,), (62480,), (61440,), (50400,), (69440,), (69280,), (62880,), (66320,), (52480,), (45200,), (67680,), (53920,), (52560,), (62640,), (56080,), (56480,), (55200,), (67200,), (56160,), (63760,), (58000,), (62960,), (62160,), (95680,), (67040,), (84160,), (58160,), (54720,), (69200,), (69680,), (72640,), (59360,), (50320,), (65760,), (46240,), (82000,), (92640,), (53760,), (63600,), (66240,), (64240,), (60240,), (81840,), (55360,), (62560,), (52080,), (82080,), (66880,), (52960,), (63520,), (61600,), (63040,), (82400,), (67920,), (60000,), (69600,), (56400,), (55680,), (74160,), (50560,), (66720,), (50800,), (57840,), (54000,), (68240,), (60800,), (70720,), (79680,), (48160,), (46080,), (48720,), (62320,), (60960,), (53520,), (55600,), (64080,), (53280,), (63120,), (48320,), (77200,), (79760,), (53360,), (75040,), (70800,), (87360,), (63840,), (61760,), (77760,), (63680,), (85120,), (71760,), (68080,), (65040,), (62720,), (64880,), (52400,), (64640,), (58880,), (69360,), (60720,), (63440,), (57120,), (59760,), (68640,), (70400,), (77600,), (61200,), (66560,), (68960,), (52640,), (55760,), (61360,), (73200,), (71600,), (75680,), (56880,), (61120,), (52720,), (81040,), (72000,), (77040,), (61840,), (80240,), (79280,), (81360,), (57360,), (39760,), (62240,), (49040,), (58080,), (84560,), (71440,), (54880,), (67280,), (59040,), (51520,), (64400,), (58400,), (56240,), (87680,), (48000,), (66960,), (55920,), (51280,), (62000,), (43120,), (51200,), (59520,), (53680,), (59120,), (64960,), (55040,), (52880,), (51760,), (74800,), (71040,), (72160,), (68480,), (84000,), (69520,), (64000,), (44720,), (65920,), (52000,), (53840,), (68320,), (50640,), (67520,), (68880,), (62800,), (72960,), (59440,), (66080,), (66640,), (55120,), (80880,), (40560,), (64720,), (72320,), (80560,), (70640,), (71120,), (60160,), (76080,), (79920,), (59680,), (51120,), (67840,), (92960,), (65520,), (72880,), (72720,), (75200,), (54080,), (45760,), (53120,), (77280,), (76720,), (52800,), (67600,), (49120,), (65600,), (51920,), (65680,), (44560,), (54560,), (50880,), (38080,), (67440,), (59840,), (52240,), (72480,), (72080,), (49440,), (73360,), (69840,), (55440,), (75120,), (61520,), (71360,), (52320,), (76000,), (51680,), (59600,), (90640,), (44960,), (77520,), (89120,), (48240,), (85360,), (70480,), (51440,), (48400,), (44000,), (63920,), (70240,), (50480,), (47360,), (78160,), (47920,), (42480,), (79120,), (74640,), (57600,), (45680,), (66160,), (68800,), (83120,), (57920,), (85920,), (82240,), (48480,), (84320,), (78640,), (41440,), (75520,), (45520,), (46480,), (81440,), (57200,), (73040,), (81680,), (85520,), (75600,), (68160,), (58240,), (81520,), (68720,), (74560,), (88400,), (80320,), (48560,), (49360,), (71200,), (73920,), (79600,), (89440,), (76320,), (40160,), (74480,), (50240,), (57680,), (86640,), (68400,), (50080,), (44880,), (78960,), (51040,), (71920,), (27760,), (87920,), (50160,), (77680,), (79040,), (77840,), (47120,), (78000,), (46000,), (73600,), (73680,), (25440,), (83920,), (73840,), (77920,), (58320,), (33360,), (47840,), (66480,), (48800,), (84640,), (39360,), (73520,), (42000,), (44160,), (80720,), (50000,), (77120,), (88240,), (84400,), (76240,), (84800,), (67120,), (86960,), (47760,), (49680,), (77360,), (47600,), (70560,), (78560,), (76160,), (44800,), (51840,), (79360,), (41600,), (87760,), (76480,), (49280,), (45600,), (68000,), (46720,), (83280,), (68560,), (47440,), (69040,), (75360,), (82560,), (86160,), (80160,), (85440,), (72800,), (40640,), (83040,), (70880,), (78880,), (80080,), (49760,), (28560,), (48880,), (74960,), (41280,), (81120,), (40320,), (78240,), (80640,), (81280,), (35360,), (47200,), (74720,), (47040,), (26320,), (47280,), (42320,), (71840,), (76800,), (46800,), (74080,), (78480,), (82320,), (75760,), (69760,), (38400,), (49520,), (81600,), (92400,), (46960,), (76640,), (40480,), (49200,), (75920,), (48080,), (80960,), (46400,), (42640,), (76880,), (46320,), (40720,), (70320,), (78320,), (34000,), (70960,), (75280,), (82720,), (88720,), (43680,), (29760,), (82880,), (44480,), (89280,), (49600,), (84720,), (81760,), (40000,), (45840,), (49840,), (80400,), (74400,), (42560,), (91440,), (82160,), (46560,), (71280,), (50720,), (47680,), (83440,), (76960,), (34560,), (78800,), (26000,), (33040,), (34800,), (88960,), (83360,), (40800,), (44080,), (88160,), (49920,), (87040,), (72560,), (46880,), (39520,), (88880,), (39040,), (90720,), (34160,), (44320,), (74320,), (89600,), (45040,), (91120,), (70080,), (44400,), (79840,), (77440,), (73760,), (39200,), (75840,), (31920,), (83520,), (83200,), (73440,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,), (56320,), (60880,), (54320,), (65200,), (52160,), (65120,), (58720,), (60480,), (56000,), (60640,), (51360,), (64160,), (74000,), (64320,), (64800,), (71520,), (58480,), (74880,), (58960,), (70160,), (67360,), (66800,), (55840,), (62080,), (53040,), (60080,), (76560,), (54800,), (56560,), (84240,), (67760,), (63200,), (56640,), (61680,), (66400,), (72400,), (53200,), (45920,), (63360,), (75440,), (57040,), (60320,), (65440,), (70000,), (51600,), (85600,), (69120,), (54640,), (45360,), (78720,), (66000,), (61280,), (55520,), (58640,), (53440,), (60400,), (71680,), (64480,), (57440,), (69920,), (62400,), (61040,), (56800,), (65280,), (47520,), (57280,), (53600,), (58560,), (55280,), (64560,), (54480,), (57760,), (54160,), (56720,), (57520,), (65840,), (54240,), (54400,), (65360,), (63280,), (60560,), (50960,), (59200,), (54960,), (58800,), (56960,), (39680,), (61920,), (59280,), (59920,), (62480,), (61440,), (50400,), (69440,), (69280,), (62880,), (66320,), (52480,), (45200,), (67680,), (53920,), (52560,), (62640,), (56080,), (56480,), (55200,), (67200,), (56160,), (63760,), (58000,), (62960,), (62160,), (95680,), (67040,), (84160,), (58160,), (54720,), (69200,), (69680,), (72640,), (59360,), (50320,), (65760,), (46240,), (82000,), (92640,), (53760,), (63600,), (66240,), (64240,), (60240,), (81840,), (55360,), (62560,), (52080,), (82080,), (66880,), (52960,), (63520,), (61600,), (63040,), (82400,), (67920,), (60000,), (69600,), (56400,), (55680,), (74160,), (50560,), (66720,), (50800,), (57840,), (54000,), (68240,), (60800,), (70720,), (79680,), (48160,), (46080,), (48720,), (62320,), (60960,), (53520,), (55600,), (64080,), (53280,), (63120,), (48320,), (77200,), (79760,), (53360,), (75040,), (70800,), (87360,), (63840,), (61760,), (77760,), (63680,), (85120,), (71760,), (68080,), (65040,), (62720,), (64880,), (52400,), (64640,), (58880,), (69360,), (60720,), (63440,), (57120,), (59760,), (68640,), (70400,), (77600,), (61200,), (66560,), (68960,), (52640,), (55760,), (61360,), (73200,), (71600,), (75680,), (56880,), (61120,), (52720,), (81040,), (72000,), (77040,), (61840,), (80240,), (79280,), (81360,), (57360,), (39760,), (62240,), (49040,), (58080,), (84560,), (71440,), (54880,), (67280,), (59040,), (51520,), (64400,), (58400,), (56240,), (87680,), (48000,), (66960,), (55920,), (51280,), (62000,), (43120,), (51200,), (59520,), (53680,), (59120,), (64960,), (55040,), (52880,), (51760,), (74800,), (71040,), (72160,), (68480,), (84000,), (69520,), (64000,), (44720,), (65920,), (52000,), (53840,), (68320,), (50640,), (67520,), (68880,), (62800,), (72960,), (59440,), (66080,), (66640,), (55120,), (80880,), (40560,), (64720,), (72320,), (80560,), (70640,), (71120,), (60160,), (76080,), (79920,), (59680,), (51120,), (67840,), (92960,), (65520,), (72880,), (72720,), (75200,), (54080,), (45760,), (53120,), (77280,), (76720,), (52800,), (67600,), (49120,), (65600,), (51920,), (65680,), (44560,), (54560,), (50880,), (38080,), (67440,), (59840,), (52240,), (72480,), (72080,), (49440,), (73360,), (69840,), (55440,), (75120,), (61520,), (71360,), (52320,), (76000,), (51680,), (59600,), (90640,), (44960,), (77520,), (89120,), (48240,), (85360,), (70480,), (51440,), (48400,), (44000,), (63920,), (70240,), (50480,), (47360,), (78160,), (47920,), (42480,), (79120,), (74640,), (57600,), (45680,), (66160,), (68800,), (83120,), (57920,), (85920,), (82240,), (48480,), (84320,), (78640,), (41440,), (75520,), (45520,), (46480,), (81440,), (57200,), (73040,), (81680,), (85520,), (75600,), (68160,), (58240,), (81520,), (68720,), (74560,), (88400,), (80320,), (48560,), (49360,), (71200,), (73920,), (79600,), (89440,), (76320,), (40160,), (74480,), (50240,), (57680,), (86640,), (68400,), (50080,), (44880,), (78960,), (51040,), (71920,), (27760,), (87920,), (50160,), (77680,), (79040,), (77840,), (47120,), (78000,), (46000,), (73600,), (73680,), (25440,), (83920,), (73840,), (77920,), (58320,), (33360,), (47840,), (66480,), (48800,), (84640,), (39360,), (73520,), (42000,), (44160,), (80720,), (50000,), (77120,), (88240,), (84400,), (76240,), (84800,), (67120,), (86960,), (47760,), (49680,), (77360,), (47600,), (70560,), (78560,), (76160,), (44800,), (51840,), (79360,), (41600,), (87760,), (76480,), (49280,), (45600,), (68000,), (46720,), (83280,), (68560,), (47440,), (69040,), (75360,), (82560,), (86160,), (80160,), (85440,), (72800,), (40640,), (83040,), (70880,), (78880,), (80080,), (49760,), (28560,), (48880,), (74960,), (41280,), (81120,), (40320,), (78240,), (80640,), (81280,), (35360,), (47200,), (74720,), (47040,), (26320,), (47280,), (42320,), (71840,), (76800,), (46800,), (74080,), (78480,), (82320,), (75760,), (69760,), (38400,), (49520,), (81600,), (92400,), (46960,), (76640,), (40480,), (49200,), (75920,), (48080,), (80960,), (46400,), (42640,), (76880,), (46320,), (40720,), (70320,), (78320,), (34000,), (70960,), (75280,), (82720,), (88720,), (43680,), (29760,), (82880,), (44480,), (89280,), (49600,), (84720,), (81760,), (40000,), (45840,), (49840,), (80400,), (74400,), (42560,), (91440,), (82160,), (46560,), (71280,), (50720,), (47680,), (83440,), (76960,), (34560,), (78800,), (26000,), (33040,), (34800,), (88960,), (83360,), (40800,), (44080,), (88160,), (49920,), (87040,), (72560,), (46880,), (39520,), (88880,), (39040,), (90720,), (34160,), (44320,), (74320,), (89600,), (45040,), (91120,), (70080,), (44400,), (79840,), (77440,), (73760,), (39200,), (75840,), (31920,), (83520,), (83200,), (73440,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'unique': dict(
        name=["unique"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (5666,), (1,), (5667,), (5663,), (15,), (5631,), (7,), (5654,), (5658,), (19,), (5640,), (4,), (5661,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5670,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'clamp_1': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[1e-06, 1e-06, 1e-06, 1e-06, 1e-06, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (15,), (7,), (19,), (4,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'one_hot': dict(
        name=["one_hot"],
        para=dict(
            num_classes=[80, 80, 80, 80, 80, 80],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (1,), (11,), (6,), (4,), (15,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((5670, 85), (5670, 85), (5670, 85), (5670, 85), (5670, 85), (5670, 85), (5670, 85), (5670, 85))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'stack_2': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((5670,), (5670,), (5670,), (5670,), (5670,), (5670,), (5670,), (5670,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 255, 10, 9), (8, 255, 20, 18), (8, 255, 40, 36), (1, 255, 7, 10), (1, 255, 14, 20), (1, 255, 28, 40), (1, 255, 8, 10), (1, 255, 16, 20), (1, 255, 32, 40), (1, 255, 10, 7), (1, 255, 20, 14), (1, 255, 40, 28), (1, 255, 10, 8), (1, 255, 20, 16), (1, 255, 40, 32), (1, 255, 9, 10), (1, 255, 18, 20), (1, 255, 36, 40), (1, 255, 10, 10), (1, 255, 20, 20), (1, 255, 40, 40), (1, 255, 6, 10), (1, 255, 12, 20), (1, 255, 24, 40), (1, 255, 5, 10), (1, 255, 10, 20), (1, 255, 20, 40), (1, 255, 10, 9), (1, 255, 20, 18), (1, 255, 40, 36), (1, 255, 10, 6), (1, 255, 20, 12), (1, 255, 40, 24), (1, 255, 10, 5), (1, 255, 20, 10), (1, 255, 40, 20), (1, 255, 3, 10), (1, 255, 6, 20), (1, 255, 12, 40), (1, 255, 4, 10), (1, 255, 8, 20), (1, 255, 16, 40), (1, 255, 10, 4), (1, 255, 20, 8), (1, 255, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_1': dict(
        name=["max"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 270), (8, 1080), (8, 4320)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ne': dict(
        name=["ne"],
        interface=["torch.Tensor"],
        para=dict(
            other=[-100, -100, -100, -100, -100, -100, -100, -100, -100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'binary_cross_entropy_with_logits': dict(
        name=["binary_cross_entropy_with_logits"],
        para=dict(
            reduction=['none', 'none', 'none', 'none', 'none', 'none', 'none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 270, 80), (8, 270), (8, 270, 2), (8, 1080, 80), (8, 1080), (8, 1080, 2), (8, 4320, 80), (8, 4320), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mse_loss': dict(
        name=["mse_loss"],
        para=dict(
            reduction=['none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 270, 2), (8, 1080, 2), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 270, 2), (8, 1080, 2), (8, 4320, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1), (222,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_3': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp_2': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(23)],
            lr=[9.999999999999998e-05 for i in range(23)],
            momentum=[0.9 for i in range(23)],
            weight_decay=[0.0005 for i in range(23)],
            dampening=[0 for i in range(23)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 210, 2), (1, 840, 2), (1, 3360, 2), (1, 240, 2), (1, 960, 2), (1, 3840, 2), (1, 270, 2), (1, 1080, 2), (1, 4320, 2), (1, 300, 2), (1, 1200, 2), (1, 4800, 2), (1, 180, 2), (1, 720, 2), (1, 2880, 2), (1, 150, 2), (1, 600, 2), (1, 2400, 2), (1, 90, 2), (1, 360, 2), (1, 1440, 2), (1, 120, 2), (1, 480, 2), (1, 1920, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'expand_1': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(210,), (840,), (3360,), (240,), (960,), (3840,), (270,), (1080,), (4320,), (300,), (1200,), (4800,), (180,), (720,), (2880,), (150,), (600,), (2400,), (90,), (360,), (1440,), (120,), (480,), (1920,)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_4': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 210, 85), (1, 840, 85), (1, 3360, 85)), ((1, 4410, 80), (1, 4410, 1)), ((1, 240, 85), (1, 960, 85), (1, 3840, 85)), ((1, 5040, 80), (1, 5040, 1)), ((1, 270, 85), (1, 1080, 85), (1, 4320, 85)), ((1, 5670, 80), (1, 5670, 1)), ((1, 300, 85), (1, 1200, 85), (1, 4800, 85)), ((1, 6300, 80), (1, 6300, 1)), ((1, 180, 85), (1, 720, 85), (1, 2880, 85)), ((1, 3780, 80), (1, 3780, 1)), ((1, 150, 85), (1, 600, 85), (1, 2400, 85)), ((1, 3150, 80), (1, 3150, 1)), ((1, 90, 85), (1, 360, 85), (1, 1440, 85)), ((1, 1890, 80), (1, 1890, 1)), ((1, 120, 85), (1, 480, 85), (1, 1920, 85)), ((1, 2520, 80), (1, 2520, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sigmoid_1': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 4410), (1, 4410, 80), (1, 5040), (1, 5040, 80), (1, 5670), (1, 5670, 80), (1, 6300), (1, 6300, 80), (1, 3780), (1, 3780, 80), (1, 3150), (1, 3150, 80), (1, 1890), (1, 1890, 80), (1, 2520), (1, 2520, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 4), (1, 5040, 4), (1, 5670, 4), (1, 6300, 4), (1, 3780, 4), (1, 3150, 4), (1, 1890, 4), (1, 2520, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'expand_2': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(704, 80, 4), (761, 80, 4), (679, 80, 4), (815, 80, 4), (652, 80, 4), (814, 80, 4), (734, 80, 4), (756, 80, 4), (700, 80, 4), (758, 80, 4), (642, 80, 4), (802, 80, 4), (925, 80, 4), (804, 80, 4), (810, 80, 4), (894, 80, 4), (731, 80, 4), (936, 80, 4), (737, 80, 4), (877, 80, 4), (842, 80, 4), (835, 80, 4), (698, 80, 4), (776, 80, 4), (663, 80, 4), (751, 80, 4), (957, 80, 4), (685, 80, 4), (707, 80, 4), (1053, 80, 4), (847, 80, 4), (790, 80, 4), (708, 80, 4), (771, 80, 4), (830, 80, 4), (905, 80, 4), (665, 80, 4), (574, 80, 4), (792, 80, 4), (943, 80, 4), (713, 80, 4), (754, 80, 4), (818, 80, 4), (875, 80, 4), (645, 80, 4), (1070, 80, 4), (864, 80, 4), (683, 80, 4), (567, 80, 4), (984, 80, 4), (825, 80, 4), (766, 80, 4), (694, 80, 4), (733, 80, 4), (668, 80, 4), (755, 80, 4), (896, 80, 4), (806, 80, 4), (718, 80, 4), (874, 80, 4), (780, 80, 4), (763, 80, 4), (710, 80, 4), (816, 80, 4), (594, 80, 4), (716, 80, 4), (670, 80, 4), (732, 80, 4), (691, 80, 4), (807, 80, 4), (681, 80, 4), (722, 80, 4), (677, 80, 4), (709, 80, 4), (719, 80, 4), (823, 80, 4), (678, 80, 4), (680, 80, 4), (817, 80, 4), (791, 80, 4), (757, 80, 4), (637, 80, 4), (740, 80, 4), (687, 80, 4), (735, 80, 4), (712, 80, 4), (496, 80, 4), (774, 80, 4), (741, 80, 4), (749, 80, 4), (781, 80, 4), (768, 80, 4), (630, 80, 4), (868, 80, 4), (866, 80, 4), (786, 80, 4), (829, 80, 4), (656, 80, 4), (565, 80, 4), (846, 80, 4), (674, 80, 4), (657, 80, 4), (783, 80, 4), (701, 80, 4), (706, 80, 4), (690, 80, 4), (840, 80, 4), (702, 80, 4), (797, 80, 4), (725, 80, 4), (787, 80, 4), (777, 80, 4), (1196, 80, 4), (838, 80, 4), (1052, 80, 4), (727, 80, 4), (684, 80, 4), (865, 80, 4), (871, 80, 4), (908, 80, 4), (742, 80, 4), (629, 80, 4), (822, 80, 4), (578, 80, 4), (1025, 80, 4), (1158, 80, 4), (672, 80, 4), (795, 80, 4), (828, 80, 4), (803, 80, 4), (753, 80, 4), (1023, 80, 4), (692, 80, 4), (782, 80, 4), (651, 80, 4), (1026, 80, 4), (836, 80, 4), (662, 80, 4), (794, 80, 4), (770, 80, 4), (788, 80, 4), (1030, 80, 4), (849, 80, 4), (750, 80, 4), (870, 80, 4), (705, 80, 4), (696, 80, 4), (927, 80, 4), (632, 80, 4), (834, 80, 4), (635, 80, 4), (723, 80, 4), (675, 80, 4), (853, 80, 4), (760, 80, 4), (884, 80, 4), (996, 80, 4), (602, 80, 4), (576, 80, 4), (609, 80, 4), (779, 80, 4), (762, 80, 4), (669, 80, 4), (695, 80, 4), (801, 80, 4), (666, 80, 4), (789, 80, 4), (604, 80, 4), (965, 80, 4), (997, 80, 4), (667, 80, 4), (938, 80, 4), (885, 80, 4), (1092, 80, 4), (798, 80, 4), (772, 80, 4), (972, 80, 4), (796, 80, 4), (1064, 80, 4), (897, 80, 4), (851, 80, 4), (813, 80, 4), (784, 80, 4), (811, 80, 4), (655, 80, 4), (808, 80, 4), (736, 80, 4), (867, 80, 4), (759, 80, 4), (793, 80, 4), (714, 80, 4), (747, 80, 4), (858, 80, 4), (880, 80, 4), (970, 80, 4), (765, 80, 4), (832, 80, 4), (862, 80, 4), (658, 80, 4), (697, 80, 4), (767, 80, 4), (915, 80, 4), (895, 80, 4), (946, 80, 4), (711, 80, 4), (764, 80, 4), (659, 80, 4), (1013, 80, 4), (900, 80, 4), (963, 80, 4), (773, 80, 4), (1003, 80, 4), (991, 80, 4), (1017, 80, 4), (717, 80, 4), (497, 80, 4), (778, 80, 4), (613, 80, 4), (726, 80, 4), (1057, 80, 4), (893, 80, 4), (686, 80, 4), (841, 80, 4), (738, 80, 4), (644, 80, 4), (805, 80, 4), (730, 80, 4), (703, 80, 4), (1096, 80, 4), (600, 80, 4), (837, 80, 4), (699, 80, 4), (641, 80, 4), (775, 80, 4), (539, 80, 4), (640, 80, 4), (744, 80, 4), (671, 80, 4), (739, 80, 4), (812, 80, 4), (688, 80, 4), (661, 80, 4), (647, 80, 4), (935, 80, 4), (888, 80, 4), (902, 80, 4), (856, 80, 4), (1050, 80, 4), (869, 80, 4), (800, 80, 4), (559, 80, 4), (824, 80, 4), (650, 80, 4), (673, 80, 4), (854, 80, 4), (633, 80, 4), (844, 80, 4), (861, 80, 4), (785, 80, 4), (912, 80, 4), (743, 80, 4), (826, 80, 4), (833, 80, 4), (689, 80, 4), (1011, 80, 4), (507, 80, 4), (809, 80, 4), (904, 80, 4), (1007, 80, 4), (883, 80, 4), (889, 80, 4), (752, 80, 4), (951, 80, 4), (999, 80, 4), (746, 80, 4), (639, 80, 4), (848, 80, 4), (1162, 80, 4), (819, 80, 4), (911, 80, 4), (909, 80, 4), (940, 80, 4), (676, 80, 4), (572, 80, 4), (664, 80, 4), (966, 80, 4), (959, 80, 4), (660, 80, 4), (845, 80, 4), (614, 80, 4), (820, 80, 4), (649, 80, 4), (821, 80, 4), (557, 80, 4), (682, 80, 4), (636, 80, 4), (476, 80, 4), (843, 80, 4), (748, 80, 4), (653, 80, 4), (906, 80, 4), (901, 80, 4), (618, 80, 4), (917, 80, 4), (873, 80, 4), (693, 80, 4), (939, 80, 4), (769, 80, 4), (892, 80, 4), (654, 80, 4), (950, 80, 4), (646, 80, 4), (745, 80, 4), (1133, 80, 4), (562, 80, 4), (969, 80, 4), (1114, 80, 4), (603, 80, 4), (1067, 80, 4), (881, 80, 4), (643, 80, 4), (605, 80, 4), (550, 80, 4), (799, 80, 4), (878, 80, 4), (631, 80, 4), (592, 80, 4), (977, 80, 4), (599, 80, 4), (531, 80, 4), (989, 80, 4), (933, 80, 4), (720, 80, 4), (571, 80, 4), (827, 80, 4), (860, 80, 4), (1039, 80, 4), (724, 80, 4), (1074, 80, 4), (1028, 80, 4), (606, 80, 4), (1054, 80, 4), (983, 80, 4), (518, 80, 4), (944, 80, 4), (569, 80, 4), (581, 80, 4), (1018, 80, 4), (715, 80, 4), (913, 80, 4), (1021, 80, 4), (1069, 80, 4), (945, 80, 4), (852, 80, 4), (728, 80, 4), (1019, 80, 4), (859, 80, 4), (932, 80, 4), (1105, 80, 4), (1004, 80, 4), (607, 80, 4), (617, 80, 4), (890, 80, 4), (924, 80, 4), (995, 80, 4), (1118, 80, 4), (954, 80, 4), (502, 80, 4), (931, 80, 4), (628, 80, 4), (721, 80, 4), (1083, 80, 4), (855, 80, 4), (626, 80, 4), (561, 80, 4), (987, 80, 4), (638, 80, 4), (899, 80, 4), (347, 80, 4), (1099, 80, 4), (627, 80, 4), (971, 80, 4), (988, 80, 4), (973, 80, 4), (589, 80, 4), (975, 80, 4), (575, 80, 4), (920, 80, 4), (921, 80, 4), (318, 80, 4), (1049, 80, 4), (923, 80, 4), (974, 80, 4), (729, 80, 4), (417, 80, 4), (598, 80, 4), (831, 80, 4), (610, 80, 4), (1058, 80, 4), (492, 80, 4), (919, 80, 4), (525, 80, 4), (552, 80, 4), (1009, 80, 4), (625, 80, 4), (964, 80, 4), (1103, 80, 4), (1055, 80, 4), (953, 80, 4), (1060, 80, 4), (839, 80, 4), (1087, 80, 4), (597, 80, 4), (621, 80, 4), (967, 80, 4), (595, 80, 4), (882, 80, 4), (982, 80, 4), (952, 80, 4), (560, 80, 4), (648, 80, 4), (992, 80, 4), (520, 80, 4), (1097, 80, 4), (956, 80, 4), (616, 80, 4), (570, 80, 4), (850, 80, 4), (584, 80, 4), (1041, 80, 4), (857, 80, 4), (593, 80, 4), (863, 80, 4), (942, 80, 4), (1032, 80, 4), (1077, 80, 4), (1002, 80, 4), (1068, 80, 4), (910, 80, 4), (508, 80, 4), (1038, 80, 4), (886, 80, 4), (986, 80, 4), (1001, 80, 4), (622, 80, 4), (357, 80, 4), (611, 80, 4), (937, 80, 4), (516, 80, 4), (1014, 80, 4), (504, 80, 4), (978, 80, 4), (1008, 80, 4), (1016, 80, 4), (442, 80, 4), (590, 80, 4), (934, 80, 4), (588, 80, 4), (329, 80, 4), (591, 80, 4), (529, 80, 4), (898, 80, 4), (960, 80, 4), (585, 80, 4), (926, 80, 4), (981, 80, 4), (1029, 80, 4), (947, 80, 4), (872, 80, 4), (480, 80, 4), (619, 80, 4), (1020, 80, 4), (1155, 80, 4), (587, 80, 4), (958, 80, 4), (506, 80, 4), (615, 80, 4), (949, 80, 4), (601, 80, 4), (1012, 80, 4), (580, 80, 4), (533, 80, 4), (961, 80, 4), (579, 80, 4), (509, 80, 4), (879, 80, 4), (979, 80, 4), (425, 80, 4), (887, 80, 4), (941, 80, 4), (1034, 80, 4), (1109, 80, 4), (546, 80, 4), (372, 80, 4), (1036, 80, 4), (556, 80, 4), (1116, 80, 4), (620, 80, 4), (1059, 80, 4), (1022, 80, 4), (500, 80, 4), (573, 80, 4), (623, 80, 4), (1005, 80, 4), (930, 80, 4), (532, 80, 4), (1143, 80, 4), (1027, 80, 4), (582, 80, 4), (891, 80, 4), (634, 80, 4), (596, 80, 4), (1043, 80, 4), (962, 80, 4), (432, 80, 4), (985, 80, 4), (325, 80, 4), (413, 80, 4), (435, 80, 4), (1112, 80, 4), (1042, 80, 4), (510, 80, 4), (551, 80, 4), (1102, 80, 4), (624, 80, 4), (1088, 80, 4), (907, 80, 4), (586, 80, 4), (494, 80, 4), (1111, 80, 4), (488, 80, 4), (1134, 80, 4), (427, 80, 4), (554, 80, 4), (929, 80, 4), (1120, 80, 4), (563, 80, 4), (1139, 80, 4), (876, 80, 4), (555, 80, 4), (998, 80, 4), (968, 80, 4), (922, 80, 4), (490, 80, 4), (948, 80, 4), (399, 80, 4), (1044, 80, 4), (1040, 80, 4), (918, 80, 4)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(704, 1, 4), (761, 1, 4), (679, 1, 4), (815, 1, 4), (652, 1, 4), (814, 1, 4), (734, 1, 4), (756, 1, 4), (700, 1, 4), (758, 1, 4), (642, 1, 4), (802, 1, 4), (925, 1, 4), (804, 1, 4), (810, 1, 4), (894, 1, 4), (731, 1, 4), (936, 1, 4), (737, 1, 4), (877, 1, 4), (842, 1, 4), (835, 1, 4), (698, 1, 4), (776, 1, 4), (663, 1, 4), (751, 1, 4), (957, 1, 4), (685, 1, 4), (707, 1, 4), (1053, 1, 4), (847, 1, 4), (790, 1, 4), (708, 1, 4), (771, 1, 4), (830, 1, 4), (905, 1, 4), (665, 1, 4), (574, 1, 4), (792, 1, 4), (943, 1, 4), (713, 1, 4), (754, 1, 4), (818, 1, 4), (875, 1, 4), (645, 1, 4), (1070, 1, 4), (864, 1, 4), (683, 1, 4), (567, 1, 4), (984, 1, 4), (825, 1, 4), (766, 1, 4), (694, 1, 4), (733, 1, 4), (668, 1, 4), (755, 1, 4), (896, 1, 4), (806, 1, 4), (718, 1, 4), (874, 1, 4), (780, 1, 4), (763, 1, 4), (710, 1, 4), (816, 1, 4), (594, 1, 4), (716, 1, 4), (670, 1, 4), (732, 1, 4), (691, 1, 4), (807, 1, 4), (681, 1, 4), (722, 1, 4), (677, 1, 4), (709, 1, 4), (719, 1, 4), (823, 1, 4), (678, 1, 4), (680, 1, 4), (817, 1, 4), (791, 1, 4), (757, 1, 4), (637, 1, 4), (740, 1, 4), (687, 1, 4), (735, 1, 4), (712, 1, 4), (496, 1, 4), (774, 1, 4), (741, 1, 4), (749, 1, 4), (781, 1, 4), (768, 1, 4), (630, 1, 4), (868, 1, 4), (866, 1, 4), (786, 1, 4), (829, 1, 4), (656, 1, 4), (565, 1, 4), (846, 1, 4), (674, 1, 4), (657, 1, 4), (783, 1, 4), (701, 1, 4), (706, 1, 4), (690, 1, 4), (840, 1, 4), (702, 1, 4), (797, 1, 4), (725, 1, 4), (787, 1, 4), (777, 1, 4), (1196, 1, 4), (838, 1, 4), (1052, 1, 4), (727, 1, 4), (684, 1, 4), (865, 1, 4), (871, 1, 4), (908, 1, 4), (742, 1, 4), (629, 1, 4), (822, 1, 4), (578, 1, 4), (1025, 1, 4), (1158, 1, 4), (672, 1, 4), (795, 1, 4), (828, 1, 4), (803, 1, 4), (753, 1, 4), (1023, 1, 4), (692, 1, 4), (782, 1, 4), (651, 1, 4), (1026, 1, 4), (836, 1, 4), (662, 1, 4), (794, 1, 4), (770, 1, 4), (788, 1, 4), (1030, 1, 4), (849, 1, 4), (750, 1, 4), (870, 1, 4), (705, 1, 4), (696, 1, 4), (927, 1, 4), (632, 1, 4), (834, 1, 4), (635, 1, 4), (723, 1, 4), (675, 1, 4), (853, 1, 4), (760, 1, 4), (884, 1, 4), (996, 1, 4), (602, 1, 4), (576, 1, 4), (609, 1, 4), (779, 1, 4), (762, 1, 4), (669, 1, 4), (695, 1, 4), (801, 1, 4), (666, 1, 4), (789, 1, 4), (604, 1, 4), (965, 1, 4), (997, 1, 4), (667, 1, 4), (938, 1, 4), (885, 1, 4), (1092, 1, 4), (798, 1, 4), (772, 1, 4), (972, 1, 4), (796, 1, 4), (1064, 1, 4), (897, 1, 4), (851, 1, 4), (813, 1, 4), (784, 1, 4), (811, 1, 4), (655, 1, 4), (808, 1, 4), (736, 1, 4), (867, 1, 4), (759, 1, 4), (793, 1, 4), (714, 1, 4), (747, 1, 4), (858, 1, 4), (880, 1, 4), (970, 1, 4), (765, 1, 4), (832, 1, 4), (862, 1, 4), (658, 1, 4), (697, 1, 4), (767, 1, 4), (915, 1, 4), (895, 1, 4), (946, 1, 4), (711, 1, 4), (764, 1, 4), (659, 1, 4), (1013, 1, 4), (900, 1, 4), (963, 1, 4), (773, 1, 4), (1003, 1, 4), (991, 1, 4), (1017, 1, 4), (717, 1, 4), (497, 1, 4), (778, 1, 4), (613, 1, 4), (726, 1, 4), (1057, 1, 4), (893, 1, 4), (686, 1, 4), (841, 1, 4), (738, 1, 4), (644, 1, 4), (805, 1, 4), (730, 1, 4), (703, 1, 4), (1096, 1, 4), (600, 1, 4), (837, 1, 4), (699, 1, 4), (641, 1, 4), (775, 1, 4), (539, 1, 4), (640, 1, 4), (744, 1, 4), (671, 1, 4), (739, 1, 4), (812, 1, 4), (688, 1, 4), (661, 1, 4), (647, 1, 4), (935, 1, 4), (888, 1, 4), (902, 1, 4), (856, 1, 4), (1050, 1, 4), (869, 1, 4), (800, 1, 4), (559, 1, 4), (824, 1, 4), (650, 1, 4), (673, 1, 4), (854, 1, 4), (633, 1, 4), (844, 1, 4), (861, 1, 4), (785, 1, 4), (912, 1, 4), (743, 1, 4), (826, 1, 4), (833, 1, 4), (689, 1, 4), (1011, 1, 4), (507, 1, 4), (809, 1, 4), (904, 1, 4), (1007, 1, 4), (883, 1, 4), (889, 1, 4), (752, 1, 4), (951, 1, 4), (999, 1, 4), (746, 1, 4), (639, 1, 4), (848, 1, 4), (1162, 1, 4), (819, 1, 4), (911, 1, 4), (909, 1, 4), (940, 1, 4), (676, 1, 4), (572, 1, 4), (664, 1, 4), (966, 1, 4), (959, 1, 4), (660, 1, 4), (845, 1, 4), (614, 1, 4), (820, 1, 4), (649, 1, 4), (821, 1, 4), (557, 1, 4), (682, 1, 4), (636, 1, 4), (476, 1, 4), (843, 1, 4), (748, 1, 4), (653, 1, 4), (906, 1, 4), (901, 1, 4), (618, 1, 4), (917, 1, 4), (873, 1, 4), (693, 1, 4), (939, 1, 4), (769, 1, 4), (892, 1, 4), (654, 1, 4), (950, 1, 4), (646, 1, 4), (745, 1, 4), (1133, 1, 4), (562, 1, 4), (969, 1, 4), (1114, 1, 4), (603, 1, 4), (1067, 1, 4), (881, 1, 4), (643, 1, 4), (605, 1, 4), (550, 1, 4), (799, 1, 4), (878, 1, 4), (631, 1, 4), (592, 1, 4), (977, 1, 4), (599, 1, 4), (531, 1, 4), (989, 1, 4), (933, 1, 4), (720, 1, 4), (571, 1, 4), (827, 1, 4), (860, 1, 4), (1039, 1, 4), (724, 1, 4), (1074, 1, 4), (1028, 1, 4), (606, 1, 4), (1054, 1, 4), (983, 1, 4), (518, 1, 4), (944, 1, 4), (569, 1, 4), (581, 1, 4), (1018, 1, 4), (715, 1, 4), (913, 1, 4), (1021, 1, 4), (1069, 1, 4), (945, 1, 4), (852, 1, 4), (728, 1, 4), (1019, 1, 4), (859, 1, 4), (932, 1, 4), (1105, 1, 4), (1004, 1, 4), (607, 1, 4), (617, 1, 4), (890, 1, 4), (924, 1, 4), (995, 1, 4), (1118, 1, 4), (954, 1, 4), (502, 1, 4), (931, 1, 4), (628, 1, 4), (721, 1, 4), (1083, 1, 4), (855, 1, 4), (626, 1, 4), (561, 1, 4), (987, 1, 4), (638, 1, 4), (899, 1, 4), (347, 1, 4), (1099, 1, 4), (627, 1, 4), (971, 1, 4), (988, 1, 4), (973, 1, 4), (589, 1, 4), (975, 1, 4), (575, 1, 4), (920, 1, 4), (921, 1, 4), (318, 1, 4), (1049, 1, 4), (923, 1, 4), (974, 1, 4), (729, 1, 4), (417, 1, 4), (598, 1, 4), (831, 1, 4), (610, 1, 4), (1058, 1, 4), (492, 1, 4), (919, 1, 4), (525, 1, 4), (552, 1, 4), (1009, 1, 4), (625, 1, 4), (964, 1, 4), (1103, 1, 4), (1055, 1, 4), (953, 1, 4), (1060, 1, 4), (839, 1, 4), (1087, 1, 4), (597, 1, 4), (621, 1, 4), (967, 1, 4), (595, 1, 4), (882, 1, 4), (982, 1, 4), (952, 1, 4), (560, 1, 4), (648, 1, 4), (992, 1, 4), (520, 1, 4), (1097, 1, 4), (956, 1, 4), (616, 1, 4), (570, 1, 4), (850, 1, 4), (584, 1, 4), (1041, 1, 4), (857, 1, 4), (593, 1, 4), (863, 1, 4), (942, 1, 4), (1032, 1, 4), (1077, 1, 4), (1002, 1, 4), (1068, 1, 4), (910, 1, 4), (508, 1, 4), (1038, 1, 4), (886, 1, 4), (986, 1, 4), (1001, 1, 4), (622, 1, 4), (357, 1, 4), (611, 1, 4), (937, 1, 4), (516, 1, 4), (1014, 1, 4), (504, 1, 4), (978, 1, 4), (1008, 1, 4), (1016, 1, 4), (442, 1, 4), (590, 1, 4), (934, 1, 4), (588, 1, 4), (329, 1, 4), (591, 1, 4), (529, 1, 4), (898, 1, 4), (960, 1, 4), (585, 1, 4), (926, 1, 4), (981, 1, 4), (1029, 1, 4), (947, 1, 4), (872, 1, 4), (480, 1, 4), (619, 1, 4), (1020, 1, 4), (1155, 1, 4), (587, 1, 4), (958, 1, 4), (506, 1, 4), (615, 1, 4), (949, 1, 4), (601, 1, 4), (1012, 1, 4), (580, 1, 4), (533, 1, 4), (961, 1, 4), (579, 1, 4), (509, 1, 4), (879, 1, 4), (979, 1, 4), (425, 1, 4), (887, 1, 4), (941, 1, 4), (1034, 1, 4), (1109, 1, 4), (546, 1, 4), (372, 1, 4), (1036, 1, 4), (556, 1, 4), (1116, 1, 4), (620, 1, 4), (1059, 1, 4), (1022, 1, 4), (500, 1, 4), (573, 1, 4), (623, 1, 4), (1005, 1, 4), (930, 1, 4), (532, 1, 4), (1143, 1, 4), (1027, 1, 4), (582, 1, 4), (891, 1, 4), (634, 1, 4), (596, 1, 4), (1043, 1, 4), (962, 1, 4), (432, 1, 4), (985, 1, 4), (325, 1, 4), (413, 1, 4), (435, 1, 4), (1112, 1, 4), (1042, 1, 4), (510, 1, 4), (551, 1, 4), (1102, 1, 4), (624, 1, 4), (1088, 1, 4), (907, 1, 4), (586, 1, 4), (494, 1, 4), (1111, 1, 4), (488, 1, 4), (1134, 1, 4), (427, 1, 4), (554, 1, 4), (929, 1, 4), (1120, 1, 4), (563, 1, 4), (1139, 1, 4), (876, 1, 4), (555, 1, 4), (998, 1, 4), (968, 1, 4), (922, 1, 4), (490, 1, 4), (948, 1, 4), (399, 1, 4), (1044, 1, 4), (1040, 1, 4), (918, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_1': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[80],
            dtype=['Dtype.int64'],
        ),
    ),

    'expand_3': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(704, 80), (761, 80), (679, 80), (815, 80), (652, 80), (814, 80), (734, 80), (756, 80), (700, 80), (758, 80), (642, 80), (802, 80), (925, 80), (804, 80), (810, 80), (894, 80), (731, 80), (936, 80), (737, 80), (877, 80), (842, 80), (835, 80), (698, 80), (776, 80), (663, 80), (751, 80), (957, 80), (685, 80), (707, 80), (1053, 80), (847, 80), (790, 80), (708, 80), (771, 80), (830, 80), (905, 80), (665, 80), (574, 80), (792, 80), (943, 80), (713, 80), (754, 80), (818, 80), (875, 80), (645, 80), (1070, 80), (864, 80), (683, 80), (567, 80), (984, 80), (825, 80), (766, 80), (694, 80), (733, 80), (668, 80), (755, 80), (896, 80), (806, 80), (718, 80), (874, 80), (780, 80), (763, 80), (710, 80), (816, 80), (594, 80), (716, 80), (670, 80), (732, 80), (691, 80), (807, 80), (681, 80), (722, 80), (677, 80), (709, 80), (719, 80), (823, 80), (678, 80), (680, 80), (817, 80), (791, 80), (757, 80), (637, 80), (740, 80), (687, 80), (735, 80), (712, 80), (496, 80), (774, 80), (741, 80), (749, 80), (781, 80), (768, 80), (630, 80), (868, 80), (866, 80), (786, 80), (829, 80), (656, 80), (565, 80), (846, 80), (674, 80), (657, 80), (783, 80), (701, 80), (706, 80), (690, 80), (840, 80), (702, 80), (797, 80), (725, 80), (787, 80), (777, 80), (1196, 80), (838, 80), (1052, 80), (727, 80), (684, 80), (865, 80), (871, 80), (908, 80), (742, 80), (629, 80), (822, 80), (578, 80), (1025, 80), (1158, 80), (672, 80), (795, 80), (828, 80), (803, 80), (753, 80), (1023, 80), (692, 80), (782, 80), (651, 80), (1026, 80), (836, 80), (662, 80), (794, 80), (770, 80), (788, 80), (1030, 80), (849, 80), (750, 80), (870, 80), (705, 80), (696, 80), (927, 80), (632, 80), (834, 80), (635, 80), (723, 80), (675, 80), (853, 80), (760, 80), (884, 80), (996, 80), (602, 80), (576, 80), (609, 80), (779, 80), (762, 80), (669, 80), (695, 80), (801, 80), (666, 80), (789, 80), (604, 80), (965, 80), (997, 80), (667, 80), (938, 80), (885, 80), (1092, 80), (798, 80), (772, 80), (972, 80), (796, 80), (1064, 80), (897, 80), (851, 80), (813, 80), (784, 80), (811, 80), (655, 80), (808, 80), (736, 80), (867, 80), (759, 80), (793, 80), (714, 80), (747, 80), (858, 80), (880, 80), (970, 80), (765, 80), (832, 80), (862, 80), (658, 80), (697, 80), (767, 80), (915, 80), (895, 80), (946, 80), (711, 80), (764, 80), (659, 80), (1013, 80), (900, 80), (963, 80), (773, 80), (1003, 80), (991, 80), (1017, 80), (717, 80), (497, 80), (778, 80), (613, 80), (726, 80), (1057, 80), (893, 80), (686, 80), (841, 80), (738, 80), (644, 80), (805, 80), (730, 80), (703, 80), (1096, 80), (600, 80), (837, 80), (699, 80), (641, 80), (775, 80), (539, 80), (640, 80), (744, 80), (671, 80), (739, 80), (812, 80), (688, 80), (661, 80), (647, 80), (935, 80), (888, 80), (902, 80), (856, 80), (1050, 80), (869, 80), (800, 80), (559, 80), (824, 80), (650, 80), (673, 80), (854, 80), (633, 80), (844, 80), (861, 80), (785, 80), (912, 80), (743, 80), (826, 80), (833, 80), (689, 80), (1011, 80), (507, 80), (809, 80), (904, 80), (1007, 80), (883, 80), (889, 80), (752, 80), (951, 80), (999, 80), (746, 80), (639, 80), (848, 80), (1162, 80), (819, 80), (911, 80), (909, 80), (940, 80), (676, 80), (572, 80), (664, 80), (966, 80), (959, 80), (660, 80), (845, 80), (614, 80), (820, 80), (649, 80), (821, 80), (557, 80), (682, 80), (636, 80), (476, 80), (843, 80), (748, 80), (653, 80), (906, 80), (901, 80), (618, 80), (917, 80), (873, 80), (693, 80), (939, 80), (769, 80), (892, 80), (654, 80), (950, 80), (646, 80), (745, 80), (1133, 80), (562, 80), (969, 80), (1114, 80), (603, 80), (1067, 80), (881, 80), (643, 80), (605, 80), (550, 80), (799, 80), (878, 80), (631, 80), (592, 80), (977, 80), (599, 80), (531, 80), (989, 80), (933, 80), (720, 80), (571, 80), (827, 80), (860, 80), (1039, 80), (724, 80), (1074, 80), (1028, 80), (606, 80), (1054, 80), (983, 80), (518, 80), (944, 80), (569, 80), (581, 80), (1018, 80), (715, 80), (913, 80), (1021, 80), (1069, 80), (945, 80), (852, 80), (728, 80), (1019, 80), (859, 80), (932, 80), (1105, 80), (1004, 80), (607, 80), (617, 80), (890, 80), (924, 80), (995, 80), (1118, 80), (954, 80), (502, 80), (931, 80), (628, 80), (721, 80), (1083, 80), (855, 80), (626, 80), (561, 80), (987, 80), (638, 80), (899, 80), (347, 80), (1099, 80), (627, 80), (971, 80), (988, 80), (973, 80), (589, 80), (975, 80), (575, 80), (920, 80), (921, 80), (318, 80), (1049, 80), (923, 80), (974, 80), (729, 80), (417, 80), (598, 80), (831, 80), (610, 80), (1058, 80), (492, 80), (919, 80), (525, 80), (552, 80), (1009, 80), (625, 80), (964, 80), (1103, 80), (1055, 80), (953, 80), (1060, 80), (839, 80), (1087, 80), (597, 80), (621, 80), (967, 80), (595, 80), (882, 80), (982, 80), (952, 80), (560, 80), (648, 80), (992, 80), (520, 80), (1097, 80), (956, 80), (616, 80), (570, 80), (850, 80), (584, 80), (1041, 80), (857, 80), (593, 80), (863, 80), (942, 80), (1032, 80), (1077, 80), (1002, 80), (1068, 80), (910, 80), (508, 80), (1038, 80), (886, 80), (986, 80), (1001, 80), (622, 80), (357, 80), (611, 80), (937, 80), (516, 80), (1014, 80), (504, 80), (978, 80), (1008, 80), (1016, 80), (442, 80), (590, 80), (934, 80), (588, 80), (329, 80), (591, 80), (529, 80), (898, 80), (960, 80), (585, 80), (926, 80), (981, 80), (1029, 80), (947, 80), (872, 80), (480, 80), (619, 80), (1020, 80), (1155, 80), (587, 80), (958, 80), (506, 80), (615, 80), (949, 80), (601, 80), (1012, 80), (580, 80), (533, 80), (961, 80), (579, 80), (509, 80), (879, 80), (979, 80), (425, 80), (887, 80), (941, 80), (1034, 80), (1109, 80), (546, 80), (372, 80), (1036, 80), (556, 80), (1116, 80), (620, 80), (1059, 80), (1022, 80), (500, 80), (573, 80), (623, 80), (1005, 80), (930, 80), (532, 80), (1143, 80), (1027, 80), (582, 80), (891, 80), (634, 80), (596, 80), (1043, 80), (962, 80), (432, 80), (985, 80), (325, 80), (413, 80), (435, 80), (1112, 80), (1042, 80), (510, 80), (551, 80), (1102, 80), (624, 80), (1088, 80), (907, 80), (586, 80), (494, 80), (1111, 80), (488, 80), (1134, 80), (427, 80), (554, 80), (929, 80), (1120, 80), (563, 80), (1139, 80), (876, 80), (555, 80), (998, 80), (968, 80), (922, 80), (490, 80), (948, 80), (399, 80), (1044, 80), (1040, 80), (918, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand_4': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(704, 80), (761, 80), (679, 80), (815, 80), (652, 80), (814, 80), (734, 80), (756, 80), (700, 80), (758, 80), (642, 80), (802, 80), (925, 80), (804, 80), (810, 80), (894, 80), (731, 80), (936, 80), (737, 80), (877, 80), (842, 80), (835, 80), (698, 80), (776, 80), (663, 80), (751, 80), (957, 80), (685, 80), (707, 80), (1053, 80), (847, 80), (790, 80), (708, 80), (771, 80), (830, 80), (905, 80), (665, 80), (574, 80), (792, 80), (943, 80), (713, 80), (754, 80), (818, 80), (875, 80), (645, 80), (1070, 80), (864, 80), (683, 80), (567, 80), (984, 80), (825, 80), (766, 80), (694, 80), (733, 80), (668, 80), (755, 80), (896, 80), (806, 80), (718, 80), (874, 80), (780, 80), (763, 80), (710, 80), (816, 80), (594, 80), (716, 80), (670, 80), (732, 80), (691, 80), (807, 80), (681, 80), (722, 80), (677, 80), (709, 80), (719, 80), (823, 80), (678, 80), (680, 80), (817, 80), (791, 80), (757, 80), (637, 80), (740, 80), (687, 80), (735, 80), (712, 80), (496, 80), (774, 80), (741, 80), (749, 80), (781, 80), (768, 80), (630, 80), (868, 80), (866, 80), (786, 80), (829, 80), (656, 80), (565, 80), (846, 80), (674, 80), (657, 80), (783, 80), (701, 80), (706, 80), (690, 80), (840, 80), (702, 80), (797, 80), (725, 80), (787, 80), (777, 80), (1196, 80), (838, 80), (1052, 80), (727, 80), (684, 80), (865, 80), (871, 80), (908, 80), (742, 80), (629, 80), (822, 80), (578, 80), (1025, 80), (1158, 80), (672, 80), (795, 80), (828, 80), (803, 80), (753, 80), (1023, 80), (692, 80), (782, 80), (651, 80), (1026, 80), (836, 80), (662, 80), (794, 80), (770, 80), (788, 80), (1030, 80), (849, 80), (750, 80), (870, 80), (705, 80), (696, 80), (927, 80), (632, 80), (834, 80), (635, 80), (723, 80), (675, 80), (853, 80), (760, 80), (884, 80), (996, 80), (602, 80), (576, 80), (609, 80), (779, 80), (762, 80), (669, 80), (695, 80), (801, 80), (666, 80), (789, 80), (604, 80), (965, 80), (997, 80), (667, 80), (938, 80), (885, 80), (1092, 80), (798, 80), (772, 80), (972, 80), (796, 80), (1064, 80), (897, 80), (851, 80), (813, 80), (784, 80), (811, 80), (655, 80), (808, 80), (736, 80), (867, 80), (759, 80), (793, 80), (714, 80), (747, 80), (858, 80), (880, 80), (970, 80), (765, 80), (832, 80), (862, 80), (658, 80), (697, 80), (767, 80), (915, 80), (895, 80), (946, 80), (711, 80), (764, 80), (659, 80), (1013, 80), (900, 80), (963, 80), (773, 80), (1003, 80), (991, 80), (1017, 80), (717, 80), (497, 80), (778, 80), (613, 80), (726, 80), (1057, 80), (893, 80), (686, 80), (841, 80), (738, 80), (644, 80), (805, 80), (730, 80), (703, 80), (1096, 80), (600, 80), (837, 80), (699, 80), (641, 80), (775, 80), (539, 80), (640, 80), (744, 80), (671, 80), (739, 80), (812, 80), (688, 80), (661, 80), (647, 80), (935, 80), (888, 80), (902, 80), (856, 80), (1050, 80), (869, 80), (800, 80), (559, 80), (824, 80), (650, 80), (673, 80), (854, 80), (633, 80), (844, 80), (861, 80), (785, 80), (912, 80), (743, 80), (826, 80), (833, 80), (689, 80), (1011, 80), (507, 80), (809, 80), (904, 80), (1007, 80), (883, 80), (889, 80), (752, 80), (951, 80), (999, 80), (746, 80), (639, 80), (848, 80), (1162, 80), (819, 80), (911, 80), (909, 80), (940, 80), (676, 80), (572, 80), (664, 80), (966, 80), (959, 80), (660, 80), (845, 80), (614, 80), (820, 80), (649, 80), (821, 80), (557, 80), (682, 80), (636, 80), (476, 80), (843, 80), (748, 80), (653, 80), (906, 80), (901, 80), (618, 80), (917, 80), (873, 80), (693, 80), (939, 80), (769, 80), (892, 80), (654, 80), (950, 80), (646, 80), (745, 80), (1133, 80), (562, 80), (969, 80), (1114, 80), (603, 80), (1067, 80), (881, 80), (643, 80), (605, 80), (550, 80), (799, 80), (878, 80), (631, 80), (592, 80), (977, 80), (599, 80), (531, 80), (989, 80), (933, 80), (720, 80), (571, 80), (827, 80), (860, 80), (1039, 80), (724, 80), (1074, 80), (1028, 80), (606, 80), (1054, 80), (983, 80), (518, 80), (944, 80), (569, 80), (581, 80), (1018, 80), (715, 80), (913, 80), (1021, 80), (1069, 80), (945, 80), (852, 80), (728, 80), (1019, 80), (859, 80), (932, 80), (1105, 80), (1004, 80), (607, 80), (617, 80), (890, 80), (924, 80), (995, 80), (1118, 80), (954, 80), (502, 80), (931, 80), (628, 80), (721, 80), (1083, 80), (855, 80), (626, 80), (561, 80), (987, 80), (638, 80), (899, 80), (347, 80), (1099, 80), (627, 80), (971, 80), (988, 80), (973, 80), (589, 80), (975, 80), (575, 80), (920, 80), (921, 80), (318, 80), (1049, 80), (923, 80), (974, 80), (729, 80), (417, 80), (598, 80), (831, 80), (610, 80), (1058, 80), (492, 80), (919, 80), (525, 80), (552, 80), (1009, 80), (625, 80), (964, 80), (1103, 80), (1055, 80), (953, 80), (1060, 80), (839, 80), (1087, 80), (597, 80), (621, 80), (967, 80), (595, 80), (882, 80), (982, 80), (952, 80), (560, 80), (648, 80), (992, 80), (520, 80), (1097, 80), (956, 80), (616, 80), (570, 80), (850, 80), (584, 80), (1041, 80), (857, 80), (593, 80), (863, 80), (942, 80), (1032, 80), (1077, 80), (1002, 80), (1068, 80), (910, 80), (508, 80), (1038, 80), (886, 80), (986, 80), (1001, 80), (622, 80), (357, 80), (611, 80), (937, 80), (516, 80), (1014, 80), (504, 80), (978, 80), (1008, 80), (1016, 80), (442, 80), (590, 80), (934, 80), (588, 80), (329, 80), (591, 80), (529, 80), (898, 80), (960, 80), (585, 80), (926, 80), (981, 80), (1029, 80), (947, 80), (872, 80), (480, 80), (619, 80), (1020, 80), (1155, 80), (587, 80), (958, 80), (506, 80), (615, 80), (949, 80), (601, 80), (1012, 80), (580, 80), (533, 80), (961, 80), (579, 80), (509, 80), (879, 80), (979, 80), (425, 80), (887, 80), (941, 80), (1034, 80), (1109, 80), (546, 80), (372, 80), (1036, 80), (556, 80), (1116, 80), (620, 80), (1059, 80), (1022, 80), (500, 80), (573, 80), (623, 80), (1005, 80), (930, 80), (532, 80), (1143, 80), (1027, 80), (582, 80), (891, 80), (634, 80), (596, 80), (1043, 80), (962, 80), (432, 80), (985, 80), (325, 80), (413, 80), (435, 80), (1112, 80), (1042, 80), (510, 80), (551, 80), (1102, 80), (624, 80), (1088, 80), (907, 80), (586, 80), (494, 80), (1111, 80), (488, 80), (1134, 80), (427, 80), (554, 80), (929, 80), (1120, 80), (563, 80), (1139, 80), (876, 80), (555, 80), (998, 80), (968, 80), (922, 80), (490, 80), (948, 80), (399, 80), (1044, 80), (1040, 80), (918, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(704, 1), (761, 1), (679, 1), (815, 1), (652, 1), (814, 1), (734, 1), (756, 1), (700, 1), (758, 1), (642, 1), (802, 1), (925, 1), (804, 1), (810, 1), (894, 1), (731, 1), (936, 1), (737, 1), (877, 1), (842, 1), (835, 1), (698, 1), (776, 1), (663, 1), (751, 1), (957, 1), (685, 1), (707, 1), (1053, 1), (847, 1), (790, 1), (708, 1), (771, 1), (830, 1), (905, 1), (665, 1), (574, 1), (792, 1), (943, 1), (713, 1), (754, 1), (818, 1), (875, 1), (645, 1), (1070, 1), (864, 1), (683, 1), (567, 1), (984, 1), (825, 1), (766, 1), (694, 1), (733, 1), (668, 1), (755, 1), (896, 1), (806, 1), (718, 1), (874, 1), (780, 1), (763, 1), (710, 1), (816, 1), (594, 1), (716, 1), (670, 1), (732, 1), (691, 1), (807, 1), (681, 1), (722, 1), (677, 1), (709, 1), (719, 1), (823, 1), (678, 1), (680, 1), (817, 1), (791, 1), (757, 1), (637, 1), (740, 1), (687, 1), (735, 1), (712, 1), (496, 1), (774, 1), (741, 1), (749, 1), (781, 1), (768, 1), (630, 1), (868, 1), (866, 1), (786, 1), (829, 1), (656, 1), (565, 1), (846, 1), (674, 1), (657, 1), (783, 1), (701, 1), (706, 1), (690, 1), (840, 1), (702, 1), (797, 1), (725, 1), (787, 1), (777, 1), (1196, 1), (838, 1), (1052, 1), (727, 1), (684, 1), (865, 1), (871, 1), (908, 1), (742, 1), (629, 1), (822, 1), (578, 1), (1025, 1), (1158, 1), (672, 1), (795, 1), (828, 1), (803, 1), (753, 1), (1023, 1), (692, 1), (782, 1), (651, 1), (1026, 1), (836, 1), (662, 1), (794, 1), (770, 1), (788, 1), (1030, 1), (849, 1), (750, 1), (870, 1), (705, 1), (696, 1), (927, 1), (632, 1), (834, 1), (635, 1), (723, 1), (675, 1), (853, 1), (760, 1), (884, 1), (996, 1), (602, 1), (576, 1), (609, 1), (779, 1), (762, 1), (669, 1), (695, 1), (801, 1), (666, 1), (789, 1), (604, 1), (965, 1), (997, 1), (667, 1), (938, 1), (885, 1), (1092, 1), (798, 1), (772, 1), (972, 1), (796, 1), (1064, 1), (897, 1), (851, 1), (813, 1), (784, 1), (811, 1), (655, 1), (808, 1), (736, 1), (867, 1), (759, 1), (793, 1), (714, 1), (747, 1), (858, 1), (880, 1), (970, 1), (765, 1), (832, 1), (862, 1), (658, 1), (697, 1), (767, 1), (915, 1), (895, 1), (946, 1), (711, 1), (764, 1), (659, 1), (1013, 1), (900, 1), (963, 1), (773, 1), (1003, 1), (991, 1), (1017, 1), (717, 1), (497, 1), (778, 1), (613, 1), (726, 1), (1057, 1), (893, 1), (686, 1), (841, 1), (738, 1), (644, 1), (805, 1), (730, 1), (703, 1), (1096, 1), (600, 1), (837, 1), (699, 1), (641, 1), (775, 1), (539, 1), (640, 1), (744, 1), (671, 1), (739, 1), (812, 1), (688, 1), (661, 1), (647, 1), (935, 1), (888, 1), (902, 1), (856, 1), (1050, 1), (869, 1), (800, 1), (559, 1), (824, 1), (650, 1), (673, 1), (854, 1), (633, 1), (844, 1), (861, 1), (785, 1), (912, 1), (743, 1), (826, 1), (833, 1), (689, 1), (1011, 1), (507, 1), (809, 1), (904, 1), (1007, 1), (883, 1), (889, 1), (752, 1), (951, 1), (999, 1), (746, 1), (639, 1), (848, 1), (1162, 1), (819, 1), (911, 1), (909, 1), (940, 1), (676, 1), (572, 1), (664, 1), (966, 1), (959, 1), (660, 1), (845, 1), (614, 1), (820, 1), (649, 1), (821, 1), (557, 1), (682, 1), (636, 1), (476, 1), (843, 1), (748, 1), (653, 1), (906, 1), (901, 1), (618, 1), (917, 1), (873, 1), (693, 1), (939, 1), (769, 1), (892, 1), (654, 1), (950, 1), (646, 1), (745, 1), (1133, 1), (562, 1), (969, 1), (1114, 1), (603, 1), (1067, 1), (881, 1), (643, 1), (605, 1), (550, 1), (799, 1), (878, 1), (631, 1), (592, 1), (977, 1), (599, 1), (531, 1), (989, 1), (933, 1), (720, 1), (571, 1), (827, 1), (860, 1), (1039, 1), (724, 1), (1074, 1), (1028, 1), (606, 1), (1054, 1), (983, 1), (518, 1), (944, 1), (569, 1), (581, 1), (1018, 1), (715, 1), (913, 1), (1021, 1), (1069, 1), (945, 1), (852, 1), (728, 1), (1019, 1), (859, 1), (932, 1), (1105, 1), (1004, 1), (607, 1), (617, 1), (890, 1), (924, 1), (995, 1), (1118, 1), (954, 1), (502, 1), (931, 1), (628, 1), (721, 1), (1083, 1), (855, 1), (626, 1), (561, 1), (987, 1), (638, 1), (899, 1), (347, 1), (1099, 1), (627, 1), (971, 1), (988, 1), (973, 1), (589, 1), (975, 1), (575, 1), (920, 1), (921, 1), (318, 1), (1049, 1), (923, 1), (974, 1), (729, 1), (417, 1), (598, 1), (831, 1), (610, 1), (1058, 1), (492, 1), (919, 1), (525, 1), (552, 1), (1009, 1), (625, 1), (964, 1), (1103, 1), (1055, 1), (953, 1), (1060, 1), (839, 1), (1087, 1), (597, 1), (621, 1), (967, 1), (595, 1), (882, 1), (982, 1), (952, 1), (560, 1), (648, 1), (992, 1), (520, 1), (1097, 1), (956, 1), (616, 1), (570, 1), (850, 1), (584, 1), (1041, 1), (857, 1), (593, 1), (863, 1), (942, 1), (1032, 1), (1077, 1), (1002, 1), (1068, 1), (910, 1), (508, 1), (1038, 1), (886, 1), (986, 1), (1001, 1), (622, 1), (357, 1), (611, 1), (937, 1), (516, 1), (1014, 1), (504, 1), (978, 1), (1008, 1), (1016, 1), (442, 1), (590, 1), (934, 1), (588, 1), (329, 1), (591, 1), (529, 1), (898, 1), (960, 1), (585, 1), (926, 1), (981, 1), (1029, 1), (947, 1), (872, 1), (480, 1), (619, 1), (1020, 1), (1155, 1), (587, 1), (958, 1), (506, 1), (615, 1), (949, 1), (601, 1), (1012, 1), (580, 1), (533, 1), (961, 1), (579, 1), (509, 1), (879, 1), (979, 1), (425, 1), (887, 1), (941, 1), (1034, 1), (1109, 1), (546, 1), (372, 1), (1036, 1), (556, 1), (1116, 1), (620, 1), (1059, 1), (1022, 1), (500, 1), (573, 1), (623, 1), (1005, 1), (930, 1), (532, 1), (1143, 1), (1027, 1), (582, 1), (891, 1), (634, 1), (596, 1), (1043, 1), (962, 1), (432, 1), (985, 1), (325, 1), (413, 1), (435, 1), (1112, 1), (1042, 1), (510, 1), (551, 1), (1102, 1), (624, 1), (1088, 1), (907, 1), (586, 1), (494, 1), (1111, 1), (488, 1), (1134, 1), (427, 1), (554, 1), (929, 1), (1120, 1), (563, 1), (1139, 1), (876, 1), (555, 1), (998, 1), (968, 1), (922, 1), (490, 1), (948, 1), (399, 1), (1044, 1), (1040, 1), (918, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
