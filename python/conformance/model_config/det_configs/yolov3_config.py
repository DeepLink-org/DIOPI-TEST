from ...config import Genfunc
from ...dtype import Dtype

yolov3_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 3, 320, 320), (8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 64, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 128, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 256, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 512, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 512, 10, 10), (8, 768, 20, 20), (8, 256, 20, 20), (8, 384, 40, 40), (1, 3, 224, 320), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 64, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 128, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 256, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 512, 7, 10), (1, 768, 14, 20), (1, 256, 14, 20), (1, 384, 28, 40), (1, 3, 256, 320), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 64, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 128, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 512, 8, 10), (1, 768, 16, 20), (1, 256, 16, 20), (1, 384, 32, 40), (1, 3, 320, 224), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 64, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 128, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 256, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 512, 10, 7), (1, 768, 20, 14), (1, 256, 20, 14), (1, 384, 40, 28), (1, 3, 320, 256), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 64, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 128, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 256, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 512, 10, 8), (1, 768, 20, 16), (1, 256, 20, 16), (1, 384, 40, 32), (1, 3, 288, 320), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 64, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 128, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 256, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 512, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 512, 9, 10), (1, 768, 18, 20), (1, 256, 18, 20), (1, 384, 36, 40), (1, 3, 320, 320), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 64, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 128, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 512, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 512, 10, 10), (1, 768, 20, 20), (1, 256, 20, 20), (1, 384, 40, 40), (1, 3, 192, 320), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 64, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 128, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 256, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 512, 6, 10), (1, 768, 12, 20), (1, 256, 12, 20), (1, 384, 24, 40), (1, 3, 160, 320), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 64, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 128, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 256, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 512, 5, 10), (1, 768, 10, 20), (1, 256, 10, 20), (1, 384, 20, 40), (1, 3, 320, 288), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 64, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 128, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 256, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 512, 10, 9), (1, 768, 20, 18), (1, 256, 20, 18), (1, 384, 40, 36), (1, 3, 320, 192), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 64, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 128, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 256, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 512, 10, 6), (1, 768, 20, 12), (1, 256, 20, 12), (1, 384, 40, 24), (1, 3, 320, 160), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 64, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 128, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 256, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 512, 10, 5), (1, 768, 20, 10), (1, 256, 20, 10), (1, 384, 40, 20), (1, 3, 96, 320), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 64, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 128, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 256, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 512, 3, 10), (1, 768, 6, 20), (1, 256, 6, 20), (1, 384, 12, 40), (1, 3, 128, 320), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 64, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 128, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 256, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 512, 4, 10), (1, 768, 8, 20), (1, 256, 8, 20), (1, 384, 16, 40), (1, 3, 320, 128), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 64, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 128, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 256, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 512, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 512, 10, 4), (1, 768, 20, 8), (1, 256, 20, 8), (1, 384, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 512, 10, 10), (8, 1024, 10, 10), (8, 256, 10, 10), (8, 256, 20, 20), (8, 512, 20, 20), (8, 128, 20, 20), (8, 128, 40, 40), (8, 256, 40, 40), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'leaky_relu': dict(
        name=["leaky_relu"],
        para=dict(
            inplace=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 256, 10, 10), (8, 128, 20, 20), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 1024, 10, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2,), (7,), (4,), (1,), (5,), (2, 1), (3,), (7, 1), (4, 1), (1, 1), (5, 1), (6,), (8, 300), (8, 1200), (8, 4800), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4410, 2), (4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (5040, 2), (5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (5670, 2), (5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (6300, 2), (6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3780, 2), (3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3150, 2), (3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1890, 2), (1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2520, 2), (2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 1024, 10, 10), (100, 1, 4), (400, 1, 4), (1600, 1, 4), (2,), (7,), (4,), (1,), (5,), (1, 6300), (3,), (1, 6300), (1, 6300), (1, 6300), (1, 6300), (6,), (8, 300), (8, 1200), (8, 4800), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (70, 1, 4), (280, 1, 4), (1120, 1, 4), (4410, 2), (1, 4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (80, 1, 4), (320, 1, 4), (1280, 1, 4), (5040, 2), (1, 5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (90, 1, 4), (360, 1, 4), (1440, 1, 4), (5670, 2), (1, 5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (6300, 2), (1, 6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (60, 1, 4), (240, 1, 4), (960, 1, 4), (3780, 2), (1, 3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (50, 1, 4), (200, 1, 4), (800, 1, 4), (3150, 2), (1, 3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (30, 1, 4), (120, 1, 4), (480, 1, 4), (1890, 2), (1, 1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (40, 1, 4), (160, 1, 4), (640, 1, 4), (2520, 2), (1, 2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (3,), (2,), (4,), (1,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            scale_factor=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 256, 10, 10), (8, 128, 20, 20), (1, 256, 7, 10), (1, 128, 14, 20), (1, 256, 8, 10), (1, 128, 16, 20), (1, 256, 10, 7), (1, 128, 20, 14), (1, 256, 10, 8), (1, 128, 20, 16), (1, 256, 9, 10), (1, 128, 18, 20), (1, 256, 10, 10), (1, 128, 20, 20), (1, 256, 6, 10), (1, 128, 12, 20), (1, 256, 5, 10), (1, 128, 10, 20), (1, 256, 10, 9), (1, 128, 20, 18), (1, 256, 10, 6), (1, 128, 20, 12), (1, 256, 10, 5), (1, 128, 20, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 256, 4, 10), (1, 128, 8, 20), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((8, 256, 20, 20), (8, 512, 20, 20)), ((8, 128, 40, 40), (8, 256, 40, 40)), ((1, 256, 14, 20), (1, 512, 14, 20)), ((1, 128, 28, 40), (1, 256, 28, 40)), ((0, 4), (0, 1)), ((1, 256, 16, 20), (1, 512, 16, 20)), ((1, 128, 32, 40), (1, 256, 32, 40)), ((1, 256, 20, 14), (1, 512, 20, 14)), ((1, 128, 40, 28), (1, 256, 40, 28)), ((1, 256, 20, 16), (1, 512, 20, 16)), ((1, 128, 40, 32), (1, 256, 40, 32)), ((1, 256, 18, 20), (1, 512, 18, 20)), ((1, 128, 36, 40), (1, 256, 36, 40)), ((1, 256, 20, 20), (1, 512, 20, 20)), ((1, 128, 40, 40), (1, 256, 40, 40)), ((1, 256, 12, 20), (1, 512, 12, 20)), ((1, 128, 24, 40), (1, 256, 24, 40)), ((1, 256, 10, 20), (1, 512, 10, 20)), ((1, 128, 20, 40), (1, 256, 20, 40)), ((1, 256, 20, 18), (1, 512, 20, 18)), ((1, 128, 40, 36), (1, 256, 40, 36)), ((1, 256, 20, 12), (1, 512, 20, 12)), ((1, 128, 40, 24), (1, 256, 40, 24)), ((1, 256, 20, 10), (1, 512, 20, 10)), ((1, 128, 40, 20), (1, 256, 40, 20)), ((1, 256, 6, 20), (1, 512, 6, 20)), ((1, 128, 12, 40), (1, 256, 12, 40)), ((1, 256, 8, 20), (1, 512, 8, 20)), ((1, 128, 16, 40), (1, 256, 16, 40)), ((1, 256, 20, 8), (1, 512, 20, 8)), ((1, 128, 40, 16), (1, 256, 40, 16))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 1024, 10, 10), (8, 512, 20, 20), (8, 256, 40, 40), (1, 1024, 7, 10), (1, 512, 14, 20), (1, 256, 28, 40), (1, 1024, 8, 10), (1, 512, 16, 20), (1, 256, 32, 40), (1, 1024, 10, 7), (1, 512, 20, 14), (1, 256, 40, 28), (1, 1024, 10, 8), (1, 512, 20, 16), (1, 256, 40, 32), (1, 1024, 9, 10), (1, 512, 18, 20), (1, 256, 36, 40), (1, 1024, 10, 10), (1, 512, 20, 20), (1, 256, 40, 40), (1, 1024, 6, 10), (1, 512, 12, 20), (1, 256, 24, 40), (1, 1024, 5, 10), (1, 512, 10, 20), (1, 256, 20, 40), (1, 1024, 10, 9), (1, 512, 20, 18), (1, 256, 40, 36), (1, 1024, 10, 6), (1, 512, 20, 12), (1, 256, 40, 24), (1, 1024, 10, 5), (1, 512, 20, 10), (1, 256, 40, 20), (1, 1024, 3, 10), (1, 512, 6, 20), (1, 256, 12, 40), (1, 1024, 4, 10), (1, 512, 8, 20), (1, 256, 16, 40), (1, 1024, 10, 4), (1, 512, 20, 8), (1, 256, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            end=[10, 20, 40, 7, 14, 28, 8, 16, 32, 9, 18, 36, 6, 12, 24, 5, 3, 4],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 16, 8, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 35.0, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(10,), (20,), (40,), (2,), (7,), (4,), (1,), (5,), (3,), (6,), (), (7,), (14,), (28,), (4410, 2), (8,), (16,), (32,), (5040, 2), (9,), (18,), (36,), (5670, 2), (6300, 2), (6,), (12,), (24,), (3780, 2), (5,), (10,), (20,), (3150, 2), (3,), (6,), (12,), (1890, 2), (4,), (8,), (16,), (2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((100,), (100,), (100,), (100,)), ((400,), (400,), (400,), (400,)), ((1600,), (1600,), (1600,), (1600,)), ((3,), (3,), (3,), (3,)), ((4,), (4,), (4,), (4,)), ((7,), (7,), (7,), (7,)), ((2,), (2,), (2,), (2,)), ((1,), (1,), (1,), (1,)), ((6,), (6,), (6,), (6,)), ((70,), (70,), (70,), (70,)), ((280,), (280,), (280,), (280,)), ((1120,), (1120,), (1120,), (1120,)), ((1, 4410), (1, 4410), (1, 4410), (1, 4410)), ((80,), (80,), (80,), (80,)), ((320,), (320,), (320,), (320,)), ((1280,), (1280,), (1280,), (1280,)), ((1, 5040), (1, 5040), (1, 5040), (1, 5040)), ((90,), (90,), (90,), (90,)), ((360,), (360,), (360,), (360,)), ((1440,), (1440,), (1440,), (1440,)), ((1, 5670), (1, 5670), (1, 5670), (1, 5670)), ((1, 6300), (1, 6300), (1, 6300), (1, 6300)), ((60,), (60,), (60,), (60,)), ((240,), (240,), (240,), (240,)), ((960,), (960,), (960,), (960,)), ((1, 3780), (1, 3780), (1, 3780), (1, 3780)), ((50,), (50,), (50,), (50,)), ((200,), (200,), (200,), (200,)), ((800,), (800,), (800,), (800,)), ((1, 3150), (1, 3150), (1, 3150), (1, 3150)), ((30,), (30,), (30,), (30,)), ((120,), (120,), (120,), (120,)), ((480,), (480,), (480,), (480,)), ((1, 1890), (1, 1890), (1, 1890), (1, 1890)), ((40,), (40,), (40,), (40,)), ((160,), (160,), (160,), (160,)), ((640,), (640,), (640,), (640,)), ((1, 2520), (1, 2520), (1, 2520), (1, 2520))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 16, 8, 32, 16, 8, 32, 16, 8, 32, 16, 8, 32, 16, 8],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (2,), (2,), (7,), (7,), (7,), (4,), (4,), (4,), (1,), (1,), (1,), (5,), (5,), (5,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'floor': dict(
        name=["floor"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (7,), (4,), (1,), (5,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[10, 20, 40, 10, 20, 40, 10, 20, 40, 10, 20, 40, 10, 20, 40],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (2,), (2,), (7,), (7,), (7,), (4,), (4,), (4,), (1,), (1,), (1,), (5,), (5,), (5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (7,), (4,), (1,), (5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (7,), (4,), (1,), (5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(100, 3), (400, 3), (1600, 3)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 1), (400, 1), (1600, 1)],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300, 4), (1200, 4), (4800, 4)), ((210, 4), (840, 4), (3360, 4)), ((210,), (840,), (3360,)), ((240, 4), (960, 4), (3840, 4)), ((240,), (960,), (3840,)), ((270, 4), (1080, 4), (4320, 4)), ((270,), (1080,), (4320,)), ((300,), (1200,), (4800,)), ((180, 4), (720, 4), (2880, 4)), ((180,), (720,), (2880,)), ((150, 4), (600, 4), (2400, 4)), ((150,), (600,), (2400,)), ((90, 4), (360, 4), (1440, 4)), ((90,), (360,), (1440,)), ((120, 4), (480, 4), (1920, 4)), ((120,), (480,), (1920,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300,), (1200,), (4800,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300,), (1200,), (4800,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (6300,), (2, 6300, 2), (2, 6300), (3,), (4,), (7,), (7, 6300, 2), (7, 6300), (4, 6300, 2), (4, 6300), (1,), (1, 6300, 2), (1, 6300), (5,), (5, 6300, 2), (5, 6300), (6,), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (1, 5670), (6300, 2), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (6300,), (2, 6300, 2), (2, 6300), (3,), (4,), (7,), (7, 6300, 2), (7, 6300), (4, 6300, 2), (4, 6300), (1,), (1, 6300, 2), (1, 6300), (5,), (5, 6300, 2), (5, 6300), (6,), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (1, 5670), (6300, 2), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (6300,), (2, 6300), (7,), (7, 6300), (4,), (4, 6300), (1,), (1, 6300), (5,), (5, 6300), (8, 300, 1), (8, 300, 80), (8, 300), (8, 300, 1), (8, 300, 2), (8, 300, 2), (8, 1200, 1), (8, 1200, 80), (8, 1200), (8, 1200, 1), (8, 1200, 2), (8, 1200, 2), (8, 4800, 1), (8, 4800, 80), (8, 4800), (8, 4800, 1), (8, 4800, 2), (8, 4800, 2), (1, 4410, 2), (4410, 2), (75120,), (78160,), (74160,), (1, 5040, 2), (5040, 2), (87280,), (76160,), (88320,), (75520,), (83680,), (77440,), (88640,), (75040,), (85680,), (1, 5670, 2), (5670, 2), (98960,), (86000,), (86240,), (88560,), (85440,), (89600,), (74000,), (89760,), (88000,), (76720,), (78080,), (86080,), (1, 6300, 2), (6300, 2), (107040,), (74880,), (77280,), (109680,), (91520,), (89520,), (76240,), (80160,), (88720,), (75920,), (1, 3780, 2), (3780, 2), (62160,), (88240,), (76000,), (87840,), (87760,), (72960,), (109360,), (88800,), (65120,), (106720,), (83360,), (74480,), (76320,), (74400,), (78000,), (88080,), (86960,), (89040,), (87200,), (76880,), (87040,), (78720,), (73600,), (85280,), (65200,), (74240,), (74640,), (77120,), (73680,), (78800,), (83120,), (76400,), (70880,), (86160,), (87920,), (76640,), (89200,), (76080,), (75760,), (74800,), (91600,), (74720,), (86800,), (77360,), (87520,), (83600,), (75360,), (78240,), (86400,), (85920,), (89120,), (77520,), (75440,), (77600,), (1, 3150, 2), (3150, 2), (54640,), (91120,), (73920,), (77200,), (67440,), (76560,), (87440,), (85120,), (77760,), (65520,), (85840,), (86640,), (75200,), (84640,), (73840,), (75280,), (75840,), (77680,), (76480,), (75680,), (79200,), (87600,), (85360,), (115680,), (84480,), (109760,), (86880,), (93120,), (66640,), (62880,), (87120,), (109280,), (112560,), (75600,), (78640,), (111920,), (86560,), (110480,), (87360,), (86480,), (78320,), (109200,), (78960,), (77840,), (90720,), (88960,), (74080,), (79040,), (101200,), (84720,), (88880,), (107440,), (64320,), (64480,), (73120,), (72640,), (87680,), (84560,), (73760,), (79120,), (74320,), (91040,), (64880,), (110720,), (108320,), (66160,), (90480,), (79600,), (91360,), (112000,), (72320,), (79680,), (86320,), (109600,), (113760,), (100160,), (101680,), (88400,), (89680,), (88480,), (73040,), (91840,), (67600,), (79920,), (78880,), (84320,), (76800,), (106560,), (72880,), (84800,), (78560,), (89440,), (84880,), (86720,), (91680,), (92080,), (108480,), (90080,), (89360,), (79520,), (80880,), (85200,), (107680,), (98000,), (91760,), (108560,), (63040,), (85520,), (106080,), (105520,), (52560,), (79760,), (76960,), (88160,), (90240,), (74960,), (77040,), (56320,), (71840,), (73200,), (71920,), (98640,), (90400,), (90160,), (82160,), (85040,), (68880,), (110160,), (78400,), (96960,), (64960,), (84080,), (72800,), (99280,), (74560,), (90000,), (65680,), (92240,), (65840,), (71200,), (85760,), (91440,), (101840,), (100720,), (81360,), (77920,), (53680,), (79360,), (106160,), (90800,), (108800,), (83040,), (73280,), (83200,), (80560,), (112720,), (91280,), (72560,), (63440,), (92320,), (106400,), (107920,), (65920,), (90320,), (89280,), (63520,), (54400,), (51600,), (97440,), (67760,), (84240,), (89840,), (66240,), (51920,), (98560,), (96880,), (62240,), (78480,), (72400,), (108720,), (106640,), (113920,), (82240,), (83760,), (113120,), (63760,), (64800,), (101120,), (83440,), (73440,), (66480,), (84960,), (56880,), (83520,), (65440,), (71360,), (79440,), (106240,), (105040,), (107600,), (62720,), (108240,), (101600,), (100800,), (111040,), (99760,), (108160,), (111200,), (107520,), (91200,), (106480,), (52080,), (79840,), (97040,), (64720,), (111360,), (81120,), (89920,), (90560,), (55680,), (111680,), (96160,), (94960,), (65360,), (83840,), (80080,), (98880,), (110400,), (72080,), (82480,), (65040,), (106000,), (109920,), (63680,), (93200,), (95200,), (64640,), (115280,), (110640,), (72720,), (106320,), (80720,), (52720,), (66000,), (111280,), (68720,), (84000,), (63280,), (107200,), (90640,), (110960,), (65760,), (98160,), (83920,), (1, 1890, 2), (1890, 2), (33600,), (99600,), (73360,), (81920,), (110800,), (73520,), (108000,), (102000,), (69920,), (98400,), (84160,), (70320,), (107760,), (107360,), (104880,), (62480,), (80240,), (92000,), (33440,), (112640,), (111600,), (80000,), (63920,), (71520,), (56080,), (90880,), (1, 2520, 2), (2520, 2), (41200,), (80640,), (109520,), (54480,), (98720,), (55360,), (70160,), (104400,), (66720,), (108640,), (113200,), (105440,), (66080,), (105120,), (110080,), (108080,), (112160,), (80400,), (71040,), (83280,), (85600,), (71440,), (110000,), (62800,), (68160,), (101040,), (95440,), (92880,), (66800,), (105840,), (66400,), (66560,), (80320,), (79280,), (52480,), (68080,), (96080,), (109840,), (110880,), (112960,), (72240,), (81040,), (64000,), (92400,), (68560,), (72160,), (99360,), (84400,), (102080,), (108400,), (51680,), (99520,), (92160,), (94160,), (63360,), (106800,), (105360,), (103680,), (102480,), (90960,), (64080,), (33200,), (110320,), (94400,), (54720,), (63840,), (110560,), (72000,), (62960,), (81840,), (42960,), (92800,), (82800,), (106880,), (57040,), (97600,), (34160,), (67520,), (56160,), (99840,), (111840,), (82400,), (68400,), (95760,), (82640,), (70640,), (113600,), (99040,), (82880,), (64400,), (67040,), (101760,), (110240,), (55920,), (99920,), (108960,), (115120,), (63600,), (107280,), (64160,), (54320,), (105760,), (32320,), (64560,), (72480,), (104640,), (104160,), (96720,), (111760,), (55760,), (66960,), (66320,), (61920,), (98080,), (55600,), (55520,), (109120,), (97840,), (80480,), (113440,), (44000,), (93040,), (97280,), (93280,), (82720,), (68480,), (68000,), (67200,), (96800,), (111520,), (69200,), (111440,), (55440,), (82560,), (61120,), (97120,), (40400,), (80800,), (91920,), (112400,), (96000,), (108880,), (95840,), (95680,), (100480,), (70400,), (92720,), (92480,), (101520,), (107840,), (99440,), (82320,), (62560,), (66880,), (112080,), (104800,), (97680,), (64240,), (112880,), (112480,), (102720,), (55280,), (42640,), (105600,), (97520,), (32720,), (81200,), (43040,), (43520,), (113360,), (102240,), (82960,), (100960,), (71600,), (100080,), (98320,), (45680,), (81680,), (98240,), (111120,), (96240,), (96560,), (62640,), (112240,), (65280,), (81760,), (51840,), (53600,), (109440,), (55200,), (54800,), (95920,), (96640,), (114080,), (97920,), (61280,), (67280,), (112320,), (95040,), (70720,), (94880,), (96480,), (62400,), (80960,), (102800,), (114640,), (67680,), (101360,), (65600,), (96400,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (6300,), (2, 6300), (7,), (7, 6300), (4,), (4, 6300), (1,), (1, 6300), (5,), (5, 6300), (8, 300, 80), (8, 300, 80), (8, 300), (8, 300, 2), (8, 300, 2), (8, 300, 1), (8, 1200, 80), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 1200, 2), (8, 1200, 1), (8, 4800, 80), (8, 4800, 80), (8, 4800), (8, 4800, 2), (8, 4800, 2), (8, 4800, 1), (4410, 1), (1, 4410, 2), (75120,), (78160,), (74160,), (5040, 1), (1, 5040, 2), (87280,), (76160,), (88320,), (75520,), (83680,), (77440,), (88640,), (75040,), (85680,), (5670, 1), (1, 5670, 2), (98960,), (86000,), (86240,), (88560,), (85440,), (89600,), (74000,), (89760,), (88000,), (76720,), (78080,), (86080,), (6300, 1), (1, 6300, 2), (107040,), (74880,), (77280,), (109680,), (91520,), (89520,), (76240,), (80160,), (88720,), (75920,), (3780, 1), (1, 3780, 2), (62160,), (88240,), (76000,), (87840,), (87760,), (72960,), (109360,), (88800,), (65120,), (106720,), (83360,), (74480,), (76320,), (74400,), (78000,), (88080,), (86960,), (89040,), (87200,), (76880,), (87040,), (78720,), (73600,), (85280,), (65200,), (74240,), (74640,), (77120,), (73680,), (78800,), (83120,), (76400,), (70880,), (86160,), (87920,), (76640,), (89200,), (76080,), (75760,), (74800,), (91600,), (74720,), (86800,), (77360,), (87520,), (83600,), (75360,), (78240,), (86400,), (85920,), (89120,), (77520,), (75440,), (77600,), (3150, 1), (1, 3150, 2), (54640,), (91120,), (73920,), (77200,), (67440,), (76560,), (87440,), (85120,), (77760,), (65520,), (85840,), (86640,), (75200,), (84640,), (73840,), (75280,), (75840,), (77680,), (76480,), (75680,), (79200,), (87600,), (85360,), (115680,), (84480,), (109760,), (86880,), (93120,), (66640,), (62880,), (87120,), (109280,), (112560,), (75600,), (78640,), (111920,), (86560,), (110480,), (87360,), (86480,), (78320,), (109200,), (78960,), (77840,), (90720,), (88960,), (74080,), (79040,), (101200,), (84720,), (88880,), (107440,), (64320,), (64480,), (73120,), (72640,), (87680,), (84560,), (73760,), (79120,), (74320,), (91040,), (64880,), (110720,), (108320,), (66160,), (90480,), (79600,), (91360,), (112000,), (72320,), (79680,), (86320,), (109600,), (113760,), (100160,), (101680,), (88400,), (89680,), (88480,), (73040,), (91840,), (67600,), (79920,), (78880,), (84320,), (76800,), (106560,), (72880,), (84800,), (78560,), (89440,), (84880,), (86720,), (91680,), (92080,), (108480,), (90080,), (89360,), (79520,), (80880,), (85200,), (107680,), (98000,), (91760,), (108560,), (63040,), (85520,), (106080,), (105520,), (52560,), (79760,), (76960,), (88160,), (90240,), (74960,), (77040,), (56320,), (71840,), (73200,), (71920,), (98640,), (90400,), (90160,), (82160,), (85040,), (68880,), (110160,), (78400,), (96960,), (64960,), (84080,), (72800,), (99280,), (74560,), (90000,), (65680,), (92240,), (65840,), (71200,), (85760,), (91440,), (101840,), (100720,), (81360,), (77920,), (53680,), (79360,), (106160,), (90800,), (108800,), (83040,), (73280,), (83200,), (80560,), (112720,), (91280,), (72560,), (63440,), (92320,), (106400,), (107920,), (65920,), (90320,), (89280,), (63520,), (54400,), (51600,), (97440,), (67760,), (84240,), (89840,), (66240,), (51920,), (98560,), (96880,), (62240,), (78480,), (72400,), (108720,), (106640,), (113920,), (82240,), (83760,), (113120,), (63760,), (64800,), (101120,), (83440,), (73440,), (66480,), (84960,), (56880,), (83520,), (65440,), (71360,), (79440,), (106240,), (105040,), (107600,), (62720,), (108240,), (101600,), (100800,), (111040,), (99760,), (108160,), (111200,), (107520,), (91200,), (106480,), (52080,), (79840,), (97040,), (64720,), (111360,), (81120,), (89920,), (90560,), (55680,), (111680,), (96160,), (94960,), (65360,), (83840,), (80080,), (98880,), (110400,), (72080,), (82480,), (65040,), (106000,), (109920,), (63680,), (93200,), (95200,), (64640,), (115280,), (110640,), (72720,), (106320,), (80720,), (52720,), (66000,), (111280,), (68720,), (84000,), (63280,), (107200,), (90640,), (110960,), (65760,), (98160,), (83920,), (1890, 1), (1, 1890, 2), (33600,), (99600,), (73360,), (81920,), (110800,), (73520,), (108000,), (102000,), (69920,), (98400,), (84160,), (70320,), (107760,), (107360,), (104880,), (62480,), (80240,), (92000,), (33440,), (112640,), (111600,), (80000,), (63920,), (71520,), (56080,), (90880,), (2520, 1), (1, 2520, 2), (41200,), (80640,), (109520,), (54480,), (98720,), (55360,), (70160,), (104400,), (66720,), (108640,), (113200,), (105440,), (66080,), (105120,), (110080,), (108080,), (112160,), (80400,), (71040,), (83280,), (85600,), (71440,), (110000,), (62800,), (68160,), (101040,), (95440,), (92880,), (66800,), (105840,), (66400,), (66560,), (80320,), (79280,), (52480,), (68080,), (96080,), (109840,), (110880,), (112960,), (72240,), (81040,), (64000,), (92400,), (68560,), (72160,), (99360,), (84400,), (102080,), (108400,), (51680,), (99520,), (92160,), (94160,), (63360,), (106800,), (105360,), (103680,), (102480,), (90960,), (64080,), (33200,), (110320,), (94400,), (54720,), (63840,), (110560,), (72000,), (62960,), (81840,), (42960,), (92800,), (82800,), (106880,), (57040,), (97600,), (34160,), (67520,), (56160,), (99840,), (111840,), (82400,), (68400,), (95760,), (82640,), (70640,), (113600,), (99040,), (82880,), (64400,), (67040,), (101760,), (110240,), (55920,), (99920,), (108960,), (115120,), (63600,), (107280,), (64160,), (54320,), (105760,), (32320,), (64560,), (72480,), (104640,), (104160,), (96720,), (111760,), (55760,), (66960,), (66320,), (61920,), (98080,), (55600,), (55520,), (109120,), (97840,), (80480,), (113440,), (44000,), (93040,), (97280,), (93280,), (82720,), (68480,), (68000,), (67200,), (96800,), (111520,), (69200,), (111440,), (55440,), (82560,), (61120,), (97120,), (40400,), (80800,), (91920,), (112400,), (96000,), (108880,), (95840,), (95680,), (100480,), (70400,), (92720,), (92480,), (101520,), (107840,), (99440,), (82320,), (62560,), (66880,), (112080,), (104800,), (97680,), (64240,), (112880,), (112480,), (102720,), (55280,), (42640,), (105600,), (97520,), (32720,), (81200,), (43040,), (43520,), (113360,), (102240,), (82960,), (100960,), (71600,), (100080,), (98320,), (45680,), (81680,), (98240,), (111120,), (96240,), (96560,), (62640,), (112240,), (65280,), (81760,), (51840,), (53600,), (109440,), (55200,), (54800,), (95920,), (96640,), (114080,), (97920,), (61280,), (67280,), (112320,), (95040,), (70720,), (94880,), (96480,), (62400,), (80960,), (102800,), (114640,), (67680,), (101360,), (65600,), (96400,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (2, 6300), (7, 1, 2), (7, 6300), (4, 1, 2), (4, 6300), (1, 1, 2), (1, 6300), (5, 1, 2), (5, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 6300, 2), (1,), (1, 6300, 2), (1,), (1, 6300, 2), (1,), (1, 6300, 2), (1,), (1, 6300, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'minimum': dict(
        name=["minimum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (7, 1, 2), (4, 1, 2), (1, 1, 2), (5, 1, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 6300, 2), (1, 6300, 2), (1, 6300, 2), (1, 6300, 2), (1, 6300, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 1e-06, 1e-06, 0, 1e-06, 0, 1e-06, 0, 1e-06, 0, 1e-06],
            max=[None, 0.999999, 0.999999, None, 0.999999, None, 0.999999, None, 0.999999, None, 0.999999],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 6300, 2), (3,), (4,), (7, 6300, 2), (7,), (4, 6300, 2), (2,), (1, 6300, 2), (1,), (5, 6300, 2), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 6300), (3,), (4,), (7, 6300), (7,), (4, 6300), (2,), (1, 6300), (1,), (5, 6300), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 6300), (3,), (4,), (7, 6300), (7,), (4, 6300), (2,), (1, 6300), (1,), (5, 6300), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 6300), (2, 6300), (7, 6300), (7, 6300), (4, 6300), (4, 6300), (1, 6300), (1, 6300), (5, 6300), (5, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2), (4410,), (5040,), (5670,), (6300,), (3780,), (3150,), (1890,), (2520,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'le': dict(
        name=["le"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'bitwise_not': dict(
        name=["bitwise_not"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (), (), (75120,), (78160,), (74160,), (87280,), (76160,), (88320,), (75520,), (83680,), (77440,), (88640,), (75040,), (85680,), (98960,), (86000,), (86240,), (88560,), (85440,), (89600,), (74000,), (89760,), (88000,), (76720,), (78080,), (86080,), (107040,), (74880,), (77280,), (109680,), (91520,), (89520,), (76240,), (80160,), (88720,), (75920,), (62160,), (88240,), (76000,), (87840,), (87760,), (72960,), (109360,), (88800,), (65120,), (106720,), (83360,), (74480,), (76320,), (74400,), (78000,), (88080,), (86960,), (89040,), (87200,), (76880,), (87040,), (78720,), (73600,), (85280,), (65200,), (74240,), (74640,), (77120,), (73680,), (78800,), (83120,), (76400,), (70880,), (86160,), (87920,), (76640,), (89200,), (76080,), (75760,), (74800,), (91600,), (74720,), (86800,), (77360,), (87520,), (83600,), (75360,), (78240,), (86400,), (85920,), (89120,), (77520,), (75440,), (77600,), (54640,), (91120,), (73920,), (77200,), (67440,), (76560,), (87440,), (85120,), (77760,), (65520,), (85840,), (86640,), (75200,), (84640,), (73840,), (75280,), (75840,), (77680,), (76480,), (75680,), (79200,), (87600,), (85360,), (115680,), (84480,), (109760,), (86880,), (93120,), (66640,), (62880,), (87120,), (109280,), (112560,), (75600,), (78640,), (111920,), (86560,), (110480,), (87360,), (86480,), (78320,), (109200,), (78960,), (77840,), (90720,), (88960,), (74080,), (79040,), (101200,), (84720,), (88880,), (107440,), (64320,), (64480,), (73120,), (72640,), (87680,), (84560,), (73760,), (79120,), (74320,), (91040,), (64880,), (110720,), (108320,), (66160,), (90480,), (79600,), (91360,), (112000,), (72320,), (79680,), (86320,), (109600,), (113760,), (100160,), (101680,), (88400,), (89680,), (88480,), (73040,), (91840,), (67600,), (79920,), (78880,), (84320,), (76800,), (106560,), (72880,), (84800,), (78560,), (89440,), (84880,), (86720,), (91680,), (92080,), (108480,), (90080,), (89360,), (79520,), (80880,), (85200,), (107680,), (98000,), (91760,), (108560,), (63040,), (85520,), (106080,), (105520,), (52560,), (79760,), (76960,), (88160,), (90240,), (74960,), (77040,), (56320,), (71840,), (73200,), (71920,), (98640,), (90400,), (90160,), (82160,), (85040,), (68880,), (110160,), (78400,), (96960,), (64960,), (84080,), (72800,), (99280,), (74560,), (90000,), (65680,), (92240,), (65840,), (71200,), (85760,), (91440,), (101840,), (100720,), (81360,), (77920,), (53680,), (79360,), (106160,), (90800,), (108800,), (83040,), (73280,), (83200,), (80560,), (112720,), (91280,), (72560,), (63440,), (92320,), (106400,), (107920,), (65920,), (90320,), (89280,), (63520,), (54400,), (51600,), (97440,), (67760,), (84240,), (89840,), (66240,), (51920,), (98560,), (96880,), (62240,), (78480,), (72400,), (108720,), (106640,), (113920,), (82240,), (83760,), (113120,), (63760,), (64800,), (101120,), (83440,), (73440,), (66480,), (84960,), (56880,), (83520,), (65440,), (71360,), (79440,), (106240,), (105040,), (107600,), (62720,), (108240,), (101600,), (100800,), (111040,), (99760,), (108160,), (111200,), (107520,), (91200,), (106480,), (52080,), (79840,), (97040,), (64720,), (111360,), (81120,), (89920,), (90560,), (55680,), (111680,), (96160,), (94960,), (65360,), (83840,), (80080,), (98880,), (110400,), (72080,), (82480,), (65040,), (106000,), (109920,), (63680,), (93200,), (95200,), (64640,), (115280,), (110640,), (72720,), (106320,), (80720,), (52720,), (66000,), (111280,), (68720,), (84000,), (63280,), (107200,), (90640,), (110960,), (65760,), (98160,), (83920,), (33600,), (99600,), (73360,), (81920,), (110800,), (73520,), (108000,), (102000,), (69920,), (98400,), (84160,), (70320,), (107760,), (107360,), (104880,), (62480,), (80240,), (92000,), (33440,), (112640,), (111600,), (80000,), (63920,), (71520,), (56080,), (90880,), (41200,), (80640,), (109520,), (54480,), (98720,), (55360,), (70160,), (104400,), (66720,), (108640,), (113200,), (105440,), (66080,), (105120,), (110080,), (108080,), (112160,), (80400,), (71040,), (83280,), (85600,), (71440,), (110000,), (62800,), (68160,), (101040,), (95440,), (92880,), (66800,), (105840,), (66400,), (66560,), (80320,), (79280,), (52480,), (68080,), (96080,), (109840,), (110880,), (112960,), (72240,), (81040,), (64000,), (92400,), (68560,), (72160,), (99360,), (84400,), (102080,), (108400,), (51680,), (99520,), (92160,), (94160,), (63360,), (106800,), (105360,), (103680,), (102480,), (90960,), (64080,), (33200,), (110320,), (94400,), (54720,), (63840,), (110560,), (72000,), (62960,), (81840,), (42960,), (92800,), (82800,), (106880,), (57040,), (97600,), (34160,), (67520,), (56160,), (99840,), (111840,), (82400,), (68400,), (95760,), (82640,), (70640,), (113600,), (99040,), (82880,), (64400,), (67040,), (101760,), (110240,), (55920,), (99920,), (108960,), (115120,), (63600,), (107280,), (64160,), (54320,), (105760,), (32320,), (64560,), (72480,), (104640,), (104160,), (96720,), (111760,), (55760,), (66960,), (66320,), (61920,), (98080,), (55600,), (55520,), (109120,), (97840,), (80480,), (113440,), (44000,), (93040,), (97280,), (93280,), (82720,), (68480,), (68000,), (67200,), (96800,), (111520,), (69200,), (111440,), (55440,), (82560,), (61120,), (97120,), (40400,), (80800,), (91920,), (112400,), (96000,), (108880,), (95840,), (95680,), (100480,), (70400,), (92720,), (92480,), (101520,), (107840,), (99440,), (82320,), (62560,), (66880,), (112080,), (104800,), (97680,), (64240,), (112880,), (112480,), (102720,), (55280,), (42640,), (105600,), (97520,), (32720,), (81200,), (43040,), (43520,), (113360,), (102240,), (82960,), (100960,), (71600,), (100080,), (98320,), (45680,), (81680,), (98240,), (111120,), (96240,), (96560,), (62640,), (112240,), (65280,), (81760,), (51840,), (53600,), (109440,), (55200,), (54800,), (95920,), (96640,), (114080,), (97920,), (61280,), (67280,), (112320,), (95040,), (70720,), (94880,), (96480,), (62400,), (80960,), (102800,), (114640,), (67680,), (101360,), (65600,), (96400,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (75120,), (78160,), (74160,), (87280,), (76160,), (88320,), (75520,), (83680,), (77440,), (88640,), (75040,), (85680,), (98960,), (86000,), (86240,), (88560,), (85440,), (89600,), (74000,), (89760,), (88000,), (76720,), (78080,), (86080,), (107040,), (74880,), (77280,), (109680,), (91520,), (89520,), (76240,), (80160,), (88720,), (75920,), (62160,), (88240,), (76000,), (87840,), (87760,), (72960,), (109360,), (88800,), (65120,), (106720,), (83360,), (74480,), (76320,), (74400,), (78000,), (88080,), (86960,), (89040,), (87200,), (76880,), (87040,), (78720,), (73600,), (85280,), (65200,), (74240,), (74640,), (77120,), (73680,), (78800,), (83120,), (76400,), (70880,), (86160,), (87920,), (76640,), (89200,), (76080,), (75760,), (74800,), (91600,), (74720,), (86800,), (77360,), (87520,), (83600,), (75360,), (78240,), (86400,), (85920,), (89120,), (77520,), (75440,), (77600,), (54640,), (91120,), (73920,), (77200,), (67440,), (76560,), (87440,), (85120,), (77760,), (65520,), (85840,), (86640,), (75200,), (84640,), (73840,), (75280,), (75840,), (77680,), (76480,), (75680,), (79200,), (87600,), (85360,), (115680,), (84480,), (109760,), (86880,), (93120,), (66640,), (62880,), (87120,), (109280,), (112560,), (75600,), (78640,), (111920,), (86560,), (110480,), (87360,), (86480,), (78320,), (109200,), (78960,), (77840,), (90720,), (88960,), (74080,), (79040,), (101200,), (84720,), (88880,), (107440,), (64320,), (64480,), (73120,), (72640,), (87680,), (84560,), (73760,), (79120,), (74320,), (91040,), (64880,), (110720,), (108320,), (66160,), (90480,), (79600,), (91360,), (112000,), (72320,), (79680,), (86320,), (109600,), (113760,), (100160,), (101680,), (88400,), (89680,), (88480,), (73040,), (91840,), (67600,), (79920,), (78880,), (84320,), (76800,), (106560,), (72880,), (84800,), (78560,), (89440,), (84880,), (86720,), (91680,), (92080,), (108480,), (90080,), (89360,), (79520,), (80880,), (85200,), (107680,), (98000,), (91760,), (108560,), (63040,), (85520,), (106080,), (105520,), (52560,), (79760,), (76960,), (88160,), (90240,), (74960,), (77040,), (56320,), (71840,), (73200,), (71920,), (98640,), (90400,), (90160,), (82160,), (85040,), (68880,), (110160,), (78400,), (96960,), (64960,), (84080,), (72800,), (99280,), (74560,), (90000,), (65680,), (92240,), (65840,), (71200,), (85760,), (91440,), (101840,), (100720,), (81360,), (77920,), (53680,), (79360,), (106160,), (90800,), (108800,), (83040,), (73280,), (83200,), (80560,), (112720,), (91280,), (72560,), (63440,), (92320,), (106400,), (107920,), (65920,), (90320,), (89280,), (63520,), (54400,), (51600,), (97440,), (67760,), (84240,), (89840,), (66240,), (51920,), (98560,), (96880,), (62240,), (78480,), (72400,), (108720,), (106640,), (113920,), (82240,), (83760,), (113120,), (63760,), (64800,), (101120,), (83440,), (73440,), (66480,), (84960,), (56880,), (83520,), (65440,), (71360,), (79440,), (106240,), (105040,), (107600,), (62720,), (108240,), (101600,), (100800,), (111040,), (99760,), (108160,), (111200,), (107520,), (91200,), (106480,), (52080,), (79840,), (97040,), (64720,), (111360,), (81120,), (89920,), (90560,), (55680,), (111680,), (96160,), (94960,), (65360,), (83840,), (80080,), (98880,), (110400,), (72080,), (82480,), (65040,), (106000,), (109920,), (63680,), (93200,), (95200,), (64640,), (115280,), (110640,), (72720,), (106320,), (80720,), (52720,), (66000,), (111280,), (68720,), (84000,), (63280,), (107200,), (90640,), (110960,), (65760,), (98160,), (83920,), (33600,), (99600,), (73360,), (81920,), (110800,), (73520,), (108000,), (102000,), (69920,), (98400,), (84160,), (70320,), (107760,), (107360,), (104880,), (62480,), (80240,), (92000,), (33440,), (112640,), (111600,), (80000,), (63920,), (71520,), (56080,), (90880,), (41200,), (80640,), (109520,), (54480,), (98720,), (55360,), (70160,), (104400,), (66720,), (108640,), (113200,), (105440,), (66080,), (105120,), (110080,), (108080,), (112160,), (80400,), (71040,), (83280,), (85600,), (71440,), (110000,), (62800,), (68160,), (101040,), (95440,), (92880,), (66800,), (105840,), (66400,), (66560,), (80320,), (79280,), (52480,), (68080,), (96080,), (109840,), (110880,), (112960,), (72240,), (81040,), (64000,), (92400,), (68560,), (72160,), (99360,), (84400,), (102080,), (108400,), (51680,), (99520,), (92160,), (94160,), (63360,), (106800,), (105360,), (103680,), (102480,), (90960,), (64080,), (33200,), (110320,), (94400,), (54720,), (63840,), (110560,), (72000,), (62960,), (81840,), (42960,), (92800,), (82800,), (106880,), (57040,), (97600,), (34160,), (67520,), (56160,), (99840,), (111840,), (82400,), (68400,), (95760,), (82640,), (70640,), (113600,), (99040,), (82880,), (64400,), (67040,), (101760,), (110240,), (55920,), (99920,), (108960,), (115120,), (63600,), (107280,), (64160,), (54320,), (105760,), (32320,), (64560,), (72480,), (104640,), (104160,), (96720,), (111760,), (55760,), (66960,), (66320,), (61920,), (98080,), (55600,), (55520,), (109120,), (97840,), (80480,), (113440,), (44000,), (93040,), (97280,), (93280,), (82720,), (68480,), (68000,), (67200,), (96800,), (111520,), (69200,), (111440,), (55440,), (82560,), (61120,), (97120,), (40400,), (80800,), (91920,), (112400,), (96000,), (108880,), (95840,), (95680,), (100480,), (70400,), (92720,), (92480,), (101520,), (107840,), (99440,), (82320,), (62560,), (66880,), (112080,), (104800,), (97680,), (64240,), (112880,), (112480,), (102720,), (55280,), (42640,), (105600,), (97520,), (32720,), (81200,), (43040,), (43520,), (113360,), (102240,), (82960,), (100960,), (71600,), (100080,), (98320,), (45680,), (81680,), (98240,), (111120,), (96240,), (96560,), (62640,), (112240,), (65280,), (81760,), (51840,), (53600,), (109440,), (55200,), (54800,), (95920,), (96640,), (114080,), (97920,), (61280,), (67280,), (112320,), (95040,), (70720,), (94880,), (96480,), (62400,), (80960,), (102800,), (114640,), (67680,), (101360,), (65600,), (96400,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'unique': dict(
        name=["unique"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (6289,), (4,), (6295,), (7,), (6286,), (2,), (6294,), (6296,), (1,), (6297,), (6,), (6292,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'clamp_1': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[1e-06, 1e-06, 1e-06, 1e-06, 1e-06, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (4,), (7,), (2,), (1,), (6,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'one_hot': dict(
        name=["one_hot"],
        para=dict(
            num_classes=[80, 80, 80, 80, 80],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (7,), (4,), (1,), (5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'stack_2': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((6300,), (6300,), (6300,), (6300,), (6300,), (6300,), (6300,), (6300,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 255, 10, 10), (8, 255, 20, 20), (8, 255, 40, 40), (1, 255, 7, 10), (1, 255, 14, 20), (1, 255, 28, 40), (1, 255, 8, 10), (1, 255, 16, 20), (1, 255, 32, 40), (1, 255, 10, 7), (1, 255, 20, 14), (1, 255, 40, 28), (1, 255, 10, 8), (1, 255, 20, 16), (1, 255, 40, 32), (1, 255, 9, 10), (1, 255, 18, 20), (1, 255, 36, 40), (1, 255, 10, 10), (1, 255, 20, 20), (1, 255, 40, 40), (1, 255, 6, 10), (1, 255, 12, 20), (1, 255, 24, 40), (1, 255, 5, 10), (1, 255, 10, 20), (1, 255, 20, 40), (1, 255, 10, 9), (1, 255, 20, 18), (1, 255, 40, 36), (1, 255, 10, 6), (1, 255, 20, 12), (1, 255, 40, 24), (1, 255, 10, 5), (1, 255, 20, 10), (1, 255, 40, 20), (1, 255, 3, 10), (1, 255, 6, 20), (1, 255, 12, 40), (1, 255, 4, 10), (1, 255, 8, 20), (1, 255, 16, 40), (1, 255, 10, 4), (1, 255, 20, 8), (1, 255, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_1': dict(
        name=["max"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300), (8, 1200), (8, 4800)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ne': dict(
        name=["ne"],
        interface=["torch.Tensor"],
        para=dict(
            other=[-100, -100, -100, -100, -100, -100, -100, -100, -100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'binary_cross_entropy_with_logits': dict(
        name=["binary_cross_entropy_with_logits"],
        para=dict(
            reduction=['none', 'none', 'none', 'none', 'none', 'none', 'none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mse_loss': dict(
        name=["mse_loss"],
        para=dict(
            reduction=['none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 2), (8, 1200, 2), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 300, 2), (8, 1200, 2), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1), (222,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_3': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp_2': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(23)],
            lr=[9.999999999999998e-05 for i in range(23)],
            momentum=[0.9 for i in range(23)],
            weight_decay=[0.0005 for i in range(23)],
            dampening=[0 for i in range(23)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 210, 2), (1, 840, 2), (1, 3360, 2), (1, 240, 2), (1, 960, 2), (1, 3840, 2), (1, 270, 2), (1, 1080, 2), (1, 4320, 2), (1, 300, 2), (1, 1200, 2), (1, 4800, 2), (1, 180, 2), (1, 720, 2), (1, 2880, 2), (1, 150, 2), (1, 600, 2), (1, 2400, 2), (1, 90, 2), (1, 360, 2), (1, 1440, 2), (1, 120, 2), (1, 480, 2), (1, 1920, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'expand_1': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(210,), (840,), (3360,), (240,), (960,), (3840,), (270,), (1080,), (4320,), (300,), (1200,), (4800,), (180,), (720,), (2880,), (150,), (600,), (2400,), (90,), (360,), (1440,), (120,), (480,), (1920,)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_4': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 210, 85), (1, 840, 85), (1, 3360, 85)), ((1, 4410, 80), (1, 4410, 1)), ((1, 240, 85), (1, 960, 85), (1, 3840, 85)), ((1, 5040, 80), (1, 5040, 1)), ((1, 270, 85), (1, 1080, 85), (1, 4320, 85)), ((1, 5670, 80), (1, 5670, 1)), ((1, 300, 85), (1, 1200, 85), (1, 4800, 85)), ((1, 6300, 80), (1, 6300, 1)), ((1, 180, 85), (1, 720, 85), (1, 2880, 85)), ((1, 3780, 80), (1, 3780, 1)), ((1, 150, 85), (1, 600, 85), (1, 2400, 85)), ((1, 3150, 80), (1, 3150, 1)), ((1, 90, 85), (1, 360, 85), (1, 1440, 85)), ((1, 1890, 80), (1, 1890, 1)), ((1, 120, 85), (1, 480, 85), (1, 1920, 85)), ((1, 2520, 80), (1, 2520, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sigmoid_1': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 4410), (1, 4410, 80), (1, 5040), (1, 5040, 80), (1, 5670), (1, 5670, 80), (1, 6300), (1, 6300, 80), (1, 3780), (1, 3780, 80), (1, 3150), (1, 3150, 80), (1, 1890), (1, 1890, 80), (1, 2520), (1, 2520, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 4), (1, 5040, 4), (1, 5670, 4), (1, 6300, 4), (1, 3780, 4), (1, 3150, 4), (1, 1890, 4), (1, 2520, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'expand_2': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(939, 80, 4), (977, 80, 4), (927, 80, 4), (1091, 80, 4), (952, 80, 4), (1104, 80, 4), (944, 80, 4), (1046, 80, 4), (968, 80, 4), (1108, 80, 4), (938, 80, 4), (1071, 80, 4), (1237, 80, 4), (1075, 80, 4), (1078, 80, 4), (1107, 80, 4), (1068, 80, 4), (1120, 80, 4), (925, 80, 4), (1122, 80, 4), (1100, 80, 4), (959, 80, 4), (976, 80, 4), (1076, 80, 4), (1338, 80, 4), (936, 80, 4), (966, 80, 4), (1371, 80, 4), (1144, 80, 4), (1119, 80, 4), (953, 80, 4), (1002, 80, 4), (1109, 80, 4), (949, 80, 4), (777, 80, 4), (1103, 80, 4), (950, 80, 4), (1098, 80, 4), (1097, 80, 4), (912, 80, 4), (1367, 80, 4), (1110, 80, 4), (814, 80, 4), (1334, 80, 4), (1042, 80, 4), (931, 80, 4), (954, 80, 4), (930, 80, 4), (975, 80, 4), (1101, 80, 4), (1087, 80, 4), (1113, 80, 4), (1090, 80, 4), (961, 80, 4), (1088, 80, 4), (984, 80, 4), (920, 80, 4), (1066, 80, 4), (815, 80, 4), (928, 80, 4), (933, 80, 4), (964, 80, 4), (921, 80, 4), (985, 80, 4), (1039, 80, 4), (955, 80, 4), (886, 80, 4), (1077, 80, 4), (1099, 80, 4), (958, 80, 4), (1115, 80, 4), (951, 80, 4), (947, 80, 4), (935, 80, 4), (1145, 80, 4), (934, 80, 4), (1085, 80, 4), (967, 80, 4), (1094, 80, 4), (1045, 80, 4), (942, 80, 4), (978, 80, 4), (1080, 80, 4), (1074, 80, 4), (1114, 80, 4), (969, 80, 4), (943, 80, 4), (970, 80, 4), (683, 80, 4), (1139, 80, 4), (924, 80, 4), (965, 80, 4), (843, 80, 4), (957, 80, 4), (1093, 80, 4), (1064, 80, 4), (972, 80, 4), (819, 80, 4), (1073, 80, 4), (1083, 80, 4), (940, 80, 4), (1058, 80, 4), (923, 80, 4), (941, 80, 4), (948, 80, 4), (971, 80, 4), (956, 80, 4), (946, 80, 4), (990, 80, 4), (1095, 80, 4), (1067, 80, 4), (1446, 80, 4), (1056, 80, 4), (1372, 80, 4), (1086, 80, 4), (1164, 80, 4), (833, 80, 4), (786, 80, 4), (1089, 80, 4), (1366, 80, 4), (1407, 80, 4), (945, 80, 4), (983, 80, 4), (1399, 80, 4), (1082, 80, 4), (1381, 80, 4), (1092, 80, 4), (1081, 80, 4), (979, 80, 4), (1365, 80, 4), (987, 80, 4), (973, 80, 4), (1134, 80, 4), (1112, 80, 4), (926, 80, 4), (988, 80, 4), (1265, 80, 4), (1059, 80, 4), (1111, 80, 4), (1343, 80, 4), (804, 80, 4), (806, 80, 4), (914, 80, 4), (908, 80, 4), (1096, 80, 4), (1057, 80, 4), (922, 80, 4), (989, 80, 4), (929, 80, 4), (1138, 80, 4), (811, 80, 4), (1384, 80, 4), (1354, 80, 4), (827, 80, 4), (1131, 80, 4), (995, 80, 4), (1142, 80, 4), (1400, 80, 4), (904, 80, 4), (996, 80, 4), (1079, 80, 4), (1370, 80, 4), (1422, 80, 4), (1252, 80, 4), (1271, 80, 4), (1105, 80, 4), (1121, 80, 4), (1106, 80, 4), (913, 80, 4), (1148, 80, 4), (845, 80, 4), (999, 80, 4), (986, 80, 4), (1054, 80, 4), (960, 80, 4), (1332, 80, 4), (911, 80, 4), (1060, 80, 4), (982, 80, 4), (1118, 80, 4), (1061, 80, 4), (1084, 80, 4), (1146, 80, 4), (1151, 80, 4), (1356, 80, 4), (1126, 80, 4), (1117, 80, 4), (994, 80, 4), (1011, 80, 4), (1065, 80, 4), (1346, 80, 4), (1225, 80, 4), (1147, 80, 4), (1357, 80, 4), (788, 80, 4), (1069, 80, 4), (1326, 80, 4), (1319, 80, 4), (657, 80, 4), (997, 80, 4), (962, 80, 4), (1102, 80, 4), (1128, 80, 4), (937, 80, 4), (963, 80, 4), (704, 80, 4), (898, 80, 4), (915, 80, 4), (899, 80, 4), (1233, 80, 4), (1130, 80, 4), (1127, 80, 4), (1027, 80, 4), (1063, 80, 4), (861, 80, 4), (1377, 80, 4), (980, 80, 4), (1212, 80, 4), (812, 80, 4), (1051, 80, 4), (910, 80, 4), (1241, 80, 4), (932, 80, 4), (1125, 80, 4), (821, 80, 4), (1153, 80, 4), (823, 80, 4), (890, 80, 4), (1072, 80, 4), (1143, 80, 4), (1273, 80, 4), (1259, 80, 4), (1017, 80, 4), (974, 80, 4), (671, 80, 4), (992, 80, 4), (1327, 80, 4), (1135, 80, 4), (1360, 80, 4), (1038, 80, 4), (916, 80, 4), (1040, 80, 4), (1007, 80, 4), (1409, 80, 4), (1141, 80, 4), (907, 80, 4), (793, 80, 4), (1154, 80, 4), (1330, 80, 4), (1349, 80, 4), (824, 80, 4), (1129, 80, 4), (1116, 80, 4), (794, 80, 4), (680, 80, 4), (645, 80, 4), (1218, 80, 4), (847, 80, 4), (1053, 80, 4), (1123, 80, 4), (828, 80, 4), (649, 80, 4), (1232, 80, 4), (1211, 80, 4), (778, 80, 4), (981, 80, 4), (905, 80, 4), (1359, 80, 4), (1333, 80, 4), (1424, 80, 4), (1028, 80, 4), (1047, 80, 4), (1414, 80, 4), (797, 80, 4), (810, 80, 4), (1264, 80, 4), (1043, 80, 4), (918, 80, 4), (831, 80, 4), (1062, 80, 4), (711, 80, 4), (1044, 80, 4), (818, 80, 4), (892, 80, 4), (993, 80, 4), (1328, 80, 4), (1313, 80, 4), (1345, 80, 4), (784, 80, 4), (1353, 80, 4), (1270, 80, 4), (1260, 80, 4), (1388, 80, 4), (1247, 80, 4), (1352, 80, 4), (1390, 80, 4), (1344, 80, 4), (1140, 80, 4), (1331, 80, 4), (651, 80, 4), (998, 80, 4), (1213, 80, 4), (809, 80, 4), (1392, 80, 4), (1014, 80, 4), (1124, 80, 4), (1132, 80, 4), (696, 80, 4), (1396, 80, 4), (1202, 80, 4), (1187, 80, 4), (817, 80, 4), (1048, 80, 4), (1001, 80, 4), (1236, 80, 4), (1380, 80, 4), (901, 80, 4), (1031, 80, 4), (813, 80, 4), (1325, 80, 4), (1374, 80, 4), (796, 80, 4), (1165, 80, 4), (1190, 80, 4), (808, 80, 4), (1441, 80, 4), (1383, 80, 4), (909, 80, 4), (1329, 80, 4), (1009, 80, 4), (659, 80, 4), (825, 80, 4), (1391, 80, 4), (859, 80, 4), (1050, 80, 4), (791, 80, 4), (1340, 80, 4), (1133, 80, 4), (1387, 80, 4), (822, 80, 4), (1227, 80, 4), (1049, 80, 4), (420, 80, 4), (1245, 80, 4), (917, 80, 4), (1024, 80, 4), (1385, 80, 4), (919, 80, 4), (1350, 80, 4), (1275, 80, 4), (874, 80, 4), (1230, 80, 4), (1052, 80, 4), (879, 80, 4), (1347, 80, 4), (1342, 80, 4), (1311, 80, 4), (781, 80, 4), (1003, 80, 4), (1150, 80, 4), (418, 80, 4), (1408, 80, 4), (1395, 80, 4), (1000, 80, 4), (799, 80, 4), (894, 80, 4), (701, 80, 4), (1136, 80, 4), (515, 80, 4), (1008, 80, 4), (1369, 80, 4), (681, 80, 4), (1234, 80, 4), (692, 80, 4), (877, 80, 4), (1305, 80, 4), (834, 80, 4), (1358, 80, 4), (1415, 80, 4), (1318, 80, 4), (826, 80, 4), (1314, 80, 4), (1376, 80, 4), (1351, 80, 4), (1402, 80, 4), (1005, 80, 4), (888, 80, 4), (1041, 80, 4), (1070, 80, 4), (893, 80, 4), (1375, 80, 4), (785, 80, 4), (852, 80, 4), (1263, 80, 4), (1193, 80, 4), (1161, 80, 4), (835, 80, 4), (1323, 80, 4), (830, 80, 4), (832, 80, 4), (1004, 80, 4), (991, 80, 4), (656, 80, 4), (851, 80, 4), (1201, 80, 4), (1373, 80, 4), (1386, 80, 4), (1412, 80, 4), (903, 80, 4), (1013, 80, 4), (800, 80, 4), (1155, 80, 4), (857, 80, 4), (902, 80, 4), (1242, 80, 4), (1055, 80, 4), (1276, 80, 4), (1355, 80, 4), (646, 80, 4), (1244, 80, 4), (1152, 80, 4), (1177, 80, 4), (792, 80, 4), (1335, 80, 4), (1317, 80, 4), (1296, 80, 4), (1281, 80, 4), (1137, 80, 4), (801, 80, 4), (415, 80, 4), (1379, 80, 4), (1180, 80, 4), (684, 80, 4), (798, 80, 4), (1382, 80, 4), (900, 80, 4), (787, 80, 4), (1023, 80, 4), (537, 80, 4), (1160, 80, 4), (1035, 80, 4), (1336, 80, 4), (713, 80, 4), (1220, 80, 4), (427, 80, 4), (844, 80, 4), (702, 80, 4), (1248, 80, 4), (1398, 80, 4), (1030, 80, 4), (855, 80, 4), (1197, 80, 4), (1033, 80, 4), (883, 80, 4), (1420, 80, 4), (1238, 80, 4), (1036, 80, 4), (805, 80, 4), (838, 80, 4), (1272, 80, 4), (1378, 80, 4), (699, 80, 4), (1249, 80, 4), (1362, 80, 4), (1439, 80, 4), (795, 80, 4), (1341, 80, 4), (802, 80, 4), (679, 80, 4), (1322, 80, 4), (404, 80, 4), (807, 80, 4), (906, 80, 4), (1308, 80, 4), (1302, 80, 4), (1209, 80, 4), (1397, 80, 4), (697, 80, 4), (837, 80, 4), (829, 80, 4), (774, 80, 4), (1226, 80, 4), (695, 80, 4), (694, 80, 4), (1364, 80, 4), (1223, 80, 4), (1006, 80, 4), (1418, 80, 4), (550, 80, 4), (1163, 80, 4), (1216, 80, 4), (1166, 80, 4), (1034, 80, 4), (856, 80, 4), (850, 80, 4), (840, 80, 4), (1210, 80, 4), (1394, 80, 4), (865, 80, 4), (1393, 80, 4), (693, 80, 4), (1032, 80, 4), (764, 80, 4), (1214, 80, 4), (505, 80, 4), (1010, 80, 4), (1149, 80, 4), (1405, 80, 4), (1200, 80, 4), (1361, 80, 4), (1198, 80, 4), (1196, 80, 4), (1256, 80, 4), (880, 80, 4), (1159, 80, 4), (1156, 80, 4), (1269, 80, 4), (1348, 80, 4), (1243, 80, 4), (1029, 80, 4), (782, 80, 4), (836, 80, 4), (1401, 80, 4), (1310, 80, 4), (1221, 80, 4), (803, 80, 4), (1411, 80, 4), (1406, 80, 4), (1284, 80, 4), (691, 80, 4), (533, 80, 4), (1320, 80, 4), (1219, 80, 4), (409, 80, 4), (1015, 80, 4), (538, 80, 4), (544, 80, 4), (1417, 80, 4), (1278, 80, 4), (1037, 80, 4), (1262, 80, 4), (895, 80, 4), (1251, 80, 4), (1229, 80, 4), (571, 80, 4), (1021, 80, 4), (1228, 80, 4), (1389, 80, 4), (1203, 80, 4), (1207, 80, 4), (783, 80, 4), (1403, 80, 4), (816, 80, 4), (1022, 80, 4), (648, 80, 4), (670, 80, 4), (1368, 80, 4), (690, 80, 4), (685, 80, 4), (1199, 80, 4), (1208, 80, 4), (1426, 80, 4), (1224, 80, 4), (766, 80, 4), (841, 80, 4), (1404, 80, 4), (1188, 80, 4), (884, 80, 4), (1186, 80, 4), (1206, 80, 4), (780, 80, 4), (1012, 80, 4), (1285, 80, 4), (1433, 80, 4), (846, 80, 4), (1267, 80, 4), (820, 80, 4), (1205, 80, 4)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(939, 1, 4), (977, 1, 4), (927, 1, 4), (1091, 1, 4), (952, 1, 4), (1104, 1, 4), (944, 1, 4), (1046, 1, 4), (968, 1, 4), (1108, 1, 4), (938, 1, 4), (1071, 1, 4), (1237, 1, 4), (1075, 1, 4), (1078, 1, 4), (1107, 1, 4), (1068, 1, 4), (1120, 1, 4), (925, 1, 4), (1122, 1, 4), (1100, 1, 4), (959, 1, 4), (976, 1, 4), (1076, 1, 4), (1338, 1, 4), (936, 1, 4), (966, 1, 4), (1371, 1, 4), (1144, 1, 4), (1119, 1, 4), (953, 1, 4), (1002, 1, 4), (1109, 1, 4), (949, 1, 4), (777, 1, 4), (1103, 1, 4), (950, 1, 4), (1098, 1, 4), (1097, 1, 4), (912, 1, 4), (1367, 1, 4), (1110, 1, 4), (814, 1, 4), (1334, 1, 4), (1042, 1, 4), (931, 1, 4), (954, 1, 4), (930, 1, 4), (975, 1, 4), (1101, 1, 4), (1087, 1, 4), (1113, 1, 4), (1090, 1, 4), (961, 1, 4), (1088, 1, 4), (984, 1, 4), (920, 1, 4), (1066, 1, 4), (815, 1, 4), (928, 1, 4), (933, 1, 4), (964, 1, 4), (921, 1, 4), (985, 1, 4), (1039, 1, 4), (955, 1, 4), (886, 1, 4), (1077, 1, 4), (1099, 1, 4), (958, 1, 4), (1115, 1, 4), (951, 1, 4), (947, 1, 4), (935, 1, 4), (1145, 1, 4), (934, 1, 4), (1085, 1, 4), (967, 1, 4), (1094, 1, 4), (1045, 1, 4), (942, 1, 4), (978, 1, 4), (1080, 1, 4), (1074, 1, 4), (1114, 1, 4), (969, 1, 4), (943, 1, 4), (970, 1, 4), (683, 1, 4), (1139, 1, 4), (924, 1, 4), (965, 1, 4), (843, 1, 4), (957, 1, 4), (1093, 1, 4), (1064, 1, 4), (972, 1, 4), (819, 1, 4), (1073, 1, 4), (1083, 1, 4), (940, 1, 4), (1058, 1, 4), (923, 1, 4), (941, 1, 4), (948, 1, 4), (971, 1, 4), (956, 1, 4), (946, 1, 4), (990, 1, 4), (1095, 1, 4), (1067, 1, 4), (1446, 1, 4), (1056, 1, 4), (1372, 1, 4), (1086, 1, 4), (1164, 1, 4), (833, 1, 4), (786, 1, 4), (1089, 1, 4), (1366, 1, 4), (1407, 1, 4), (945, 1, 4), (983, 1, 4), (1399, 1, 4), (1082, 1, 4), (1381, 1, 4), (1092, 1, 4), (1081, 1, 4), (979, 1, 4), (1365, 1, 4), (987, 1, 4), (973, 1, 4), (1134, 1, 4), (1112, 1, 4), (926, 1, 4), (988, 1, 4), (1265, 1, 4), (1059, 1, 4), (1111, 1, 4), (1343, 1, 4), (804, 1, 4), (806, 1, 4), (914, 1, 4), (908, 1, 4), (1096, 1, 4), (1057, 1, 4), (922, 1, 4), (989, 1, 4), (929, 1, 4), (1138, 1, 4), (811, 1, 4), (1384, 1, 4), (1354, 1, 4), (827, 1, 4), (1131, 1, 4), (995, 1, 4), (1142, 1, 4), (1400, 1, 4), (904, 1, 4), (996, 1, 4), (1079, 1, 4), (1370, 1, 4), (1422, 1, 4), (1252, 1, 4), (1271, 1, 4), (1105, 1, 4), (1121, 1, 4), (1106, 1, 4), (913, 1, 4), (1148, 1, 4), (845, 1, 4), (999, 1, 4), (986, 1, 4), (1054, 1, 4), (960, 1, 4), (1332, 1, 4), (911, 1, 4), (1060, 1, 4), (982, 1, 4), (1118, 1, 4), (1061, 1, 4), (1084, 1, 4), (1146, 1, 4), (1151, 1, 4), (1356, 1, 4), (1126, 1, 4), (1117, 1, 4), (994, 1, 4), (1011, 1, 4), (1065, 1, 4), (1346, 1, 4), (1225, 1, 4), (1147, 1, 4), (1357, 1, 4), (788, 1, 4), (1069, 1, 4), (1326, 1, 4), (1319, 1, 4), (657, 1, 4), (997, 1, 4), (962, 1, 4), (1102, 1, 4), (1128, 1, 4), (937, 1, 4), (963, 1, 4), (704, 1, 4), (898, 1, 4), (915, 1, 4), (899, 1, 4), (1233, 1, 4), (1130, 1, 4), (1127, 1, 4), (1027, 1, 4), (1063, 1, 4), (861, 1, 4), (1377, 1, 4), (980, 1, 4), (1212, 1, 4), (812, 1, 4), (1051, 1, 4), (910, 1, 4), (1241, 1, 4), (932, 1, 4), (1125, 1, 4), (821, 1, 4), (1153, 1, 4), (823, 1, 4), (890, 1, 4), (1072, 1, 4), (1143, 1, 4), (1273, 1, 4), (1259, 1, 4), (1017, 1, 4), (974, 1, 4), (671, 1, 4), (992, 1, 4), (1327, 1, 4), (1135, 1, 4), (1360, 1, 4), (1038, 1, 4), (916, 1, 4), (1040, 1, 4), (1007, 1, 4), (1409, 1, 4), (1141, 1, 4), (907, 1, 4), (793, 1, 4), (1154, 1, 4), (1330, 1, 4), (1349, 1, 4), (824, 1, 4), (1129, 1, 4), (1116, 1, 4), (794, 1, 4), (680, 1, 4), (645, 1, 4), (1218, 1, 4), (847, 1, 4), (1053, 1, 4), (1123, 1, 4), (828, 1, 4), (649, 1, 4), (1232, 1, 4), (1211, 1, 4), (778, 1, 4), (981, 1, 4), (905, 1, 4), (1359, 1, 4), (1333, 1, 4), (1424, 1, 4), (1028, 1, 4), (1047, 1, 4), (1414, 1, 4), (797, 1, 4), (810, 1, 4), (1264, 1, 4), (1043, 1, 4), (918, 1, 4), (831, 1, 4), (1062, 1, 4), (711, 1, 4), (1044, 1, 4), (818, 1, 4), (892, 1, 4), (993, 1, 4), (1328, 1, 4), (1313, 1, 4), (1345, 1, 4), (784, 1, 4), (1353, 1, 4), (1270, 1, 4), (1260, 1, 4), (1388, 1, 4), (1247, 1, 4), (1352, 1, 4), (1390, 1, 4), (1344, 1, 4), (1140, 1, 4), (1331, 1, 4), (651, 1, 4), (998, 1, 4), (1213, 1, 4), (809, 1, 4), (1392, 1, 4), (1014, 1, 4), (1124, 1, 4), (1132, 1, 4), (696, 1, 4), (1396, 1, 4), (1202, 1, 4), (1187, 1, 4), (817, 1, 4), (1048, 1, 4), (1001, 1, 4), (1236, 1, 4), (1380, 1, 4), (901, 1, 4), (1031, 1, 4), (813, 1, 4), (1325, 1, 4), (1374, 1, 4), (796, 1, 4), (1165, 1, 4), (1190, 1, 4), (808, 1, 4), (1441, 1, 4), (1383, 1, 4), (909, 1, 4), (1329, 1, 4), (1009, 1, 4), (659, 1, 4), (825, 1, 4), (1391, 1, 4), (859, 1, 4), (1050, 1, 4), (791, 1, 4), (1340, 1, 4), (1133, 1, 4), (1387, 1, 4), (822, 1, 4), (1227, 1, 4), (1049, 1, 4), (420, 1, 4), (1245, 1, 4), (917, 1, 4), (1024, 1, 4), (1385, 1, 4), (919, 1, 4), (1350, 1, 4), (1275, 1, 4), (874, 1, 4), (1230, 1, 4), (1052, 1, 4), (879, 1, 4), (1347, 1, 4), (1342, 1, 4), (1311, 1, 4), (781, 1, 4), (1003, 1, 4), (1150, 1, 4), (418, 1, 4), (1408, 1, 4), (1395, 1, 4), (1000, 1, 4), (799, 1, 4), (894, 1, 4), (701, 1, 4), (1136, 1, 4), (515, 1, 4), (1008, 1, 4), (1369, 1, 4), (681, 1, 4), (1234, 1, 4), (692, 1, 4), (877, 1, 4), (1305, 1, 4), (834, 1, 4), (1358, 1, 4), (1415, 1, 4), (1318, 1, 4), (826, 1, 4), (1314, 1, 4), (1376, 1, 4), (1351, 1, 4), (1402, 1, 4), (1005, 1, 4), (888, 1, 4), (1041, 1, 4), (1070, 1, 4), (893, 1, 4), (1375, 1, 4), (785, 1, 4), (852, 1, 4), (1263, 1, 4), (1193, 1, 4), (1161, 1, 4), (835, 1, 4), (1323, 1, 4), (830, 1, 4), (832, 1, 4), (1004, 1, 4), (991, 1, 4), (656, 1, 4), (851, 1, 4), (1201, 1, 4), (1373, 1, 4), (1386, 1, 4), (1412, 1, 4), (903, 1, 4), (1013, 1, 4), (800, 1, 4), (1155, 1, 4), (857, 1, 4), (902, 1, 4), (1242, 1, 4), (1055, 1, 4), (1276, 1, 4), (1355, 1, 4), (646, 1, 4), (1244, 1, 4), (1152, 1, 4), (1177, 1, 4), (792, 1, 4), (1335, 1, 4), (1317, 1, 4), (1296, 1, 4), (1281, 1, 4), (1137, 1, 4), (801, 1, 4), (415, 1, 4), (1379, 1, 4), (1180, 1, 4), (684, 1, 4), (798, 1, 4), (1382, 1, 4), (900, 1, 4), (787, 1, 4), (1023, 1, 4), (537, 1, 4), (1160, 1, 4), (1035, 1, 4), (1336, 1, 4), (713, 1, 4), (1220, 1, 4), (427, 1, 4), (844, 1, 4), (702, 1, 4), (1248, 1, 4), (1398, 1, 4), (1030, 1, 4), (855, 1, 4), (1197, 1, 4), (1033, 1, 4), (883, 1, 4), (1420, 1, 4), (1238, 1, 4), (1036, 1, 4), (805, 1, 4), (838, 1, 4), (1272, 1, 4), (1378, 1, 4), (699, 1, 4), (1249, 1, 4), (1362, 1, 4), (1439, 1, 4), (795, 1, 4), (1341, 1, 4), (802, 1, 4), (679, 1, 4), (1322, 1, 4), (404, 1, 4), (807, 1, 4), (906, 1, 4), (1308, 1, 4), (1302, 1, 4), (1209, 1, 4), (1397, 1, 4), (697, 1, 4), (837, 1, 4), (829, 1, 4), (774, 1, 4), (1226, 1, 4), (695, 1, 4), (694, 1, 4), (1364, 1, 4), (1223, 1, 4), (1006, 1, 4), (1418, 1, 4), (550, 1, 4), (1163, 1, 4), (1216, 1, 4), (1166, 1, 4), (1034, 1, 4), (856, 1, 4), (850, 1, 4), (840, 1, 4), (1210, 1, 4), (1394, 1, 4), (865, 1, 4), (1393, 1, 4), (693, 1, 4), (1032, 1, 4), (764, 1, 4), (1214, 1, 4), (505, 1, 4), (1010, 1, 4), (1149, 1, 4), (1405, 1, 4), (1200, 1, 4), (1361, 1, 4), (1198, 1, 4), (1196, 1, 4), (1256, 1, 4), (880, 1, 4), (1159, 1, 4), (1156, 1, 4), (1269, 1, 4), (1348, 1, 4), (1243, 1, 4), (1029, 1, 4), (782, 1, 4), (836, 1, 4), (1401, 1, 4), (1310, 1, 4), (1221, 1, 4), (803, 1, 4), (1411, 1, 4), (1406, 1, 4), (1284, 1, 4), (691, 1, 4), (533, 1, 4), (1320, 1, 4), (1219, 1, 4), (409, 1, 4), (1015, 1, 4), (538, 1, 4), (544, 1, 4), (1417, 1, 4), (1278, 1, 4), (1037, 1, 4), (1262, 1, 4), (895, 1, 4), (1251, 1, 4), (1229, 1, 4), (571, 1, 4), (1021, 1, 4), (1228, 1, 4), (1389, 1, 4), (1203, 1, 4), (1207, 1, 4), (783, 1, 4), (1403, 1, 4), (816, 1, 4), (1022, 1, 4), (648, 1, 4), (670, 1, 4), (1368, 1, 4), (690, 1, 4), (685, 1, 4), (1199, 1, 4), (1208, 1, 4), (1426, 1, 4), (1224, 1, 4), (766, 1, 4), (841, 1, 4), (1404, 1, 4), (1188, 1, 4), (884, 1, 4), (1186, 1, 4), (1206, 1, 4), (780, 1, 4), (1012, 1, 4), (1285, 1, 4), (1433, 1, 4), (846, 1, 4), (1267, 1, 4), (820, 1, 4), (1205, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_1': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[80],
            dtype=['Dtype.int64'],
        ),
    ),

    'expand_3': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(939, 80), (977, 80), (927, 80), (1091, 80), (952, 80), (1104, 80), (944, 80), (1046, 80), (968, 80), (1108, 80), (938, 80), (1071, 80), (1237, 80), (1075, 80), (1078, 80), (1107, 80), (1068, 80), (1120, 80), (925, 80), (1122, 80), (1100, 80), (959, 80), (976, 80), (1076, 80), (1338, 80), (936, 80), (966, 80), (1371, 80), (1144, 80), (1119, 80), (953, 80), (1002, 80), (1109, 80), (949, 80), (777, 80), (1103, 80), (950, 80), (1098, 80), (1097, 80), (912, 80), (1367, 80), (1110, 80), (814, 80), (1334, 80), (1042, 80), (931, 80), (954, 80), (930, 80), (975, 80), (1101, 80), (1087, 80), (1113, 80), (1090, 80), (961, 80), (1088, 80), (984, 80), (920, 80), (1066, 80), (815, 80), (928, 80), (933, 80), (964, 80), (921, 80), (985, 80), (1039, 80), (955, 80), (886, 80), (1077, 80), (1099, 80), (958, 80), (1115, 80), (951, 80), (947, 80), (935, 80), (1145, 80), (934, 80), (1085, 80), (967, 80), (1094, 80), (1045, 80), (942, 80), (978, 80), (1080, 80), (1074, 80), (1114, 80), (969, 80), (943, 80), (970, 80), (683, 80), (1139, 80), (924, 80), (965, 80), (843, 80), (957, 80), (1093, 80), (1064, 80), (972, 80), (819, 80), (1073, 80), (1083, 80), (940, 80), (1058, 80), (923, 80), (941, 80), (948, 80), (971, 80), (956, 80), (946, 80), (990, 80), (1095, 80), (1067, 80), (1446, 80), (1056, 80), (1372, 80), (1086, 80), (1164, 80), (833, 80), (786, 80), (1089, 80), (1366, 80), (1407, 80), (945, 80), (983, 80), (1399, 80), (1082, 80), (1381, 80), (1092, 80), (1081, 80), (979, 80), (1365, 80), (987, 80), (973, 80), (1134, 80), (1112, 80), (926, 80), (988, 80), (1265, 80), (1059, 80), (1111, 80), (1343, 80), (804, 80), (806, 80), (914, 80), (908, 80), (1096, 80), (1057, 80), (922, 80), (989, 80), (929, 80), (1138, 80), (811, 80), (1384, 80), (1354, 80), (827, 80), (1131, 80), (995, 80), (1142, 80), (1400, 80), (904, 80), (996, 80), (1079, 80), (1370, 80), (1422, 80), (1252, 80), (1271, 80), (1105, 80), (1121, 80), (1106, 80), (913, 80), (1148, 80), (845, 80), (999, 80), (986, 80), (1054, 80), (960, 80), (1332, 80), (911, 80), (1060, 80), (982, 80), (1118, 80), (1061, 80), (1084, 80), (1146, 80), (1151, 80), (1356, 80), (1126, 80), (1117, 80), (994, 80), (1011, 80), (1065, 80), (1346, 80), (1225, 80), (1147, 80), (1357, 80), (788, 80), (1069, 80), (1326, 80), (1319, 80), (657, 80), (997, 80), (962, 80), (1102, 80), (1128, 80), (937, 80), (963, 80), (704, 80), (898, 80), (915, 80), (899, 80), (1233, 80), (1130, 80), (1127, 80), (1027, 80), (1063, 80), (861, 80), (1377, 80), (980, 80), (1212, 80), (812, 80), (1051, 80), (910, 80), (1241, 80), (932, 80), (1125, 80), (821, 80), (1153, 80), (823, 80), (890, 80), (1072, 80), (1143, 80), (1273, 80), (1259, 80), (1017, 80), (974, 80), (671, 80), (992, 80), (1327, 80), (1135, 80), (1360, 80), (1038, 80), (916, 80), (1040, 80), (1007, 80), (1409, 80), (1141, 80), (907, 80), (793, 80), (1154, 80), (1330, 80), (1349, 80), (824, 80), (1129, 80), (1116, 80), (794, 80), (680, 80), (645, 80), (1218, 80), (847, 80), (1053, 80), (1123, 80), (828, 80), (649, 80), (1232, 80), (1211, 80), (778, 80), (981, 80), (905, 80), (1359, 80), (1333, 80), (1424, 80), (1028, 80), (1047, 80), (1414, 80), (797, 80), (810, 80), (1264, 80), (1043, 80), (918, 80), (831, 80), (1062, 80), (711, 80), (1044, 80), (818, 80), (892, 80), (993, 80), (1328, 80), (1313, 80), (1345, 80), (784, 80), (1353, 80), (1270, 80), (1260, 80), (1388, 80), (1247, 80), (1352, 80), (1390, 80), (1344, 80), (1140, 80), (1331, 80), (651, 80), (998, 80), (1213, 80), (809, 80), (1392, 80), (1014, 80), (1124, 80), (1132, 80), (696, 80), (1396, 80), (1202, 80), (1187, 80), (817, 80), (1048, 80), (1001, 80), (1236, 80), (1380, 80), (901, 80), (1031, 80), (813, 80), (1325, 80), (1374, 80), (796, 80), (1165, 80), (1190, 80), (808, 80), (1441, 80), (1383, 80), (909, 80), (1329, 80), (1009, 80), (659, 80), (825, 80), (1391, 80), (859, 80), (1050, 80), (791, 80), (1340, 80), (1133, 80), (1387, 80), (822, 80), (1227, 80), (1049, 80), (420, 80), (1245, 80), (917, 80), (1024, 80), (1385, 80), (919, 80), (1350, 80), (1275, 80), (874, 80), (1230, 80), (1052, 80), (879, 80), (1347, 80), (1342, 80), (1311, 80), (781, 80), (1003, 80), (1150, 80), (418, 80), (1408, 80), (1395, 80), (1000, 80), (799, 80), (894, 80), (701, 80), (1136, 80), (515, 80), (1008, 80), (1369, 80), (681, 80), (1234, 80), (692, 80), (877, 80), (1305, 80), (834, 80), (1358, 80), (1415, 80), (1318, 80), (826, 80), (1314, 80), (1376, 80), (1351, 80), (1402, 80), (1005, 80), (888, 80), (1041, 80), (1070, 80), (893, 80), (1375, 80), (785, 80), (852, 80), (1263, 80), (1193, 80), (1161, 80), (835, 80), (1323, 80), (830, 80), (832, 80), (1004, 80), (991, 80), (656, 80), (851, 80), (1201, 80), (1373, 80), (1386, 80), (1412, 80), (903, 80), (1013, 80), (800, 80), (1155, 80), (857, 80), (902, 80), (1242, 80), (1055, 80), (1276, 80), (1355, 80), (646, 80), (1244, 80), (1152, 80), (1177, 80), (792, 80), (1335, 80), (1317, 80), (1296, 80), (1281, 80), (1137, 80), (801, 80), (415, 80), (1379, 80), (1180, 80), (684, 80), (798, 80), (1382, 80), (900, 80), (787, 80), (1023, 80), (537, 80), (1160, 80), (1035, 80), (1336, 80), (713, 80), (1220, 80), (427, 80), (844, 80), (702, 80), (1248, 80), (1398, 80), (1030, 80), (855, 80), (1197, 80), (1033, 80), (883, 80), (1420, 80), (1238, 80), (1036, 80), (805, 80), (838, 80), (1272, 80), (1378, 80), (699, 80), (1249, 80), (1362, 80), (1439, 80), (795, 80), (1341, 80), (802, 80), (679, 80), (1322, 80), (404, 80), (807, 80), (906, 80), (1308, 80), (1302, 80), (1209, 80), (1397, 80), (697, 80), (837, 80), (829, 80), (774, 80), (1226, 80), (695, 80), (694, 80), (1364, 80), (1223, 80), (1006, 80), (1418, 80), (550, 80), (1163, 80), (1216, 80), (1166, 80), (1034, 80), (856, 80), (850, 80), (840, 80), (1210, 80), (1394, 80), (865, 80), (1393, 80), (693, 80), (1032, 80), (764, 80), (1214, 80), (505, 80), (1010, 80), (1149, 80), (1405, 80), (1200, 80), (1361, 80), (1198, 80), (1196, 80), (1256, 80), (880, 80), (1159, 80), (1156, 80), (1269, 80), (1348, 80), (1243, 80), (1029, 80), (782, 80), (836, 80), (1401, 80), (1310, 80), (1221, 80), (803, 80), (1411, 80), (1406, 80), (1284, 80), (691, 80), (533, 80), (1320, 80), (1219, 80), (409, 80), (1015, 80), (538, 80), (544, 80), (1417, 80), (1278, 80), (1037, 80), (1262, 80), (895, 80), (1251, 80), (1229, 80), (571, 80), (1021, 80), (1228, 80), (1389, 80), (1203, 80), (1207, 80), (783, 80), (1403, 80), (816, 80), (1022, 80), (648, 80), (670, 80), (1368, 80), (690, 80), (685, 80), (1199, 80), (1208, 80), (1426, 80), (1224, 80), (766, 80), (841, 80), (1404, 80), (1188, 80), (884, 80), (1186, 80), (1206, 80), (780, 80), (1012, 80), (1285, 80), (1433, 80), (846, 80), (1267, 80), (820, 80), (1205, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand_4': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(939, 80), (977, 80), (927, 80), (1091, 80), (952, 80), (1104, 80), (944, 80), (1046, 80), (968, 80), (1108, 80), (938, 80), (1071, 80), (1237, 80), (1075, 80), (1078, 80), (1107, 80), (1068, 80), (1120, 80), (925, 80), (1122, 80), (1100, 80), (959, 80), (976, 80), (1076, 80), (1338, 80), (936, 80), (966, 80), (1371, 80), (1144, 80), (1119, 80), (953, 80), (1002, 80), (1109, 80), (949, 80), (777, 80), (1103, 80), (950, 80), (1098, 80), (1097, 80), (912, 80), (1367, 80), (1110, 80), (814, 80), (1334, 80), (1042, 80), (931, 80), (954, 80), (930, 80), (975, 80), (1101, 80), (1087, 80), (1113, 80), (1090, 80), (961, 80), (1088, 80), (984, 80), (920, 80), (1066, 80), (815, 80), (928, 80), (933, 80), (964, 80), (921, 80), (985, 80), (1039, 80), (955, 80), (886, 80), (1077, 80), (1099, 80), (958, 80), (1115, 80), (951, 80), (947, 80), (935, 80), (1145, 80), (934, 80), (1085, 80), (967, 80), (1094, 80), (1045, 80), (942, 80), (978, 80), (1080, 80), (1074, 80), (1114, 80), (969, 80), (943, 80), (970, 80), (683, 80), (1139, 80), (924, 80), (965, 80), (843, 80), (957, 80), (1093, 80), (1064, 80), (972, 80), (819, 80), (1073, 80), (1083, 80), (940, 80), (1058, 80), (923, 80), (941, 80), (948, 80), (971, 80), (956, 80), (946, 80), (990, 80), (1095, 80), (1067, 80), (1446, 80), (1056, 80), (1372, 80), (1086, 80), (1164, 80), (833, 80), (786, 80), (1089, 80), (1366, 80), (1407, 80), (945, 80), (983, 80), (1399, 80), (1082, 80), (1381, 80), (1092, 80), (1081, 80), (979, 80), (1365, 80), (987, 80), (973, 80), (1134, 80), (1112, 80), (926, 80), (988, 80), (1265, 80), (1059, 80), (1111, 80), (1343, 80), (804, 80), (806, 80), (914, 80), (908, 80), (1096, 80), (1057, 80), (922, 80), (989, 80), (929, 80), (1138, 80), (811, 80), (1384, 80), (1354, 80), (827, 80), (1131, 80), (995, 80), (1142, 80), (1400, 80), (904, 80), (996, 80), (1079, 80), (1370, 80), (1422, 80), (1252, 80), (1271, 80), (1105, 80), (1121, 80), (1106, 80), (913, 80), (1148, 80), (845, 80), (999, 80), (986, 80), (1054, 80), (960, 80), (1332, 80), (911, 80), (1060, 80), (982, 80), (1118, 80), (1061, 80), (1084, 80), (1146, 80), (1151, 80), (1356, 80), (1126, 80), (1117, 80), (994, 80), (1011, 80), (1065, 80), (1346, 80), (1225, 80), (1147, 80), (1357, 80), (788, 80), (1069, 80), (1326, 80), (1319, 80), (657, 80), (997, 80), (962, 80), (1102, 80), (1128, 80), (937, 80), (963, 80), (704, 80), (898, 80), (915, 80), (899, 80), (1233, 80), (1130, 80), (1127, 80), (1027, 80), (1063, 80), (861, 80), (1377, 80), (980, 80), (1212, 80), (812, 80), (1051, 80), (910, 80), (1241, 80), (932, 80), (1125, 80), (821, 80), (1153, 80), (823, 80), (890, 80), (1072, 80), (1143, 80), (1273, 80), (1259, 80), (1017, 80), (974, 80), (671, 80), (992, 80), (1327, 80), (1135, 80), (1360, 80), (1038, 80), (916, 80), (1040, 80), (1007, 80), (1409, 80), (1141, 80), (907, 80), (793, 80), (1154, 80), (1330, 80), (1349, 80), (824, 80), (1129, 80), (1116, 80), (794, 80), (680, 80), (645, 80), (1218, 80), (847, 80), (1053, 80), (1123, 80), (828, 80), (649, 80), (1232, 80), (1211, 80), (778, 80), (981, 80), (905, 80), (1359, 80), (1333, 80), (1424, 80), (1028, 80), (1047, 80), (1414, 80), (797, 80), (810, 80), (1264, 80), (1043, 80), (918, 80), (831, 80), (1062, 80), (711, 80), (1044, 80), (818, 80), (892, 80), (993, 80), (1328, 80), (1313, 80), (1345, 80), (784, 80), (1353, 80), (1270, 80), (1260, 80), (1388, 80), (1247, 80), (1352, 80), (1390, 80), (1344, 80), (1140, 80), (1331, 80), (651, 80), (998, 80), (1213, 80), (809, 80), (1392, 80), (1014, 80), (1124, 80), (1132, 80), (696, 80), (1396, 80), (1202, 80), (1187, 80), (817, 80), (1048, 80), (1001, 80), (1236, 80), (1380, 80), (901, 80), (1031, 80), (813, 80), (1325, 80), (1374, 80), (796, 80), (1165, 80), (1190, 80), (808, 80), (1441, 80), (1383, 80), (909, 80), (1329, 80), (1009, 80), (659, 80), (825, 80), (1391, 80), (859, 80), (1050, 80), (791, 80), (1340, 80), (1133, 80), (1387, 80), (822, 80), (1227, 80), (1049, 80), (420, 80), (1245, 80), (917, 80), (1024, 80), (1385, 80), (919, 80), (1350, 80), (1275, 80), (874, 80), (1230, 80), (1052, 80), (879, 80), (1347, 80), (1342, 80), (1311, 80), (781, 80), (1003, 80), (1150, 80), (418, 80), (1408, 80), (1395, 80), (1000, 80), (799, 80), (894, 80), (701, 80), (1136, 80), (515, 80), (1008, 80), (1369, 80), (681, 80), (1234, 80), (692, 80), (877, 80), (1305, 80), (834, 80), (1358, 80), (1415, 80), (1318, 80), (826, 80), (1314, 80), (1376, 80), (1351, 80), (1402, 80), (1005, 80), (888, 80), (1041, 80), (1070, 80), (893, 80), (1375, 80), (785, 80), (852, 80), (1263, 80), (1193, 80), (1161, 80), (835, 80), (1323, 80), (830, 80), (832, 80), (1004, 80), (991, 80), (656, 80), (851, 80), (1201, 80), (1373, 80), (1386, 80), (1412, 80), (903, 80), (1013, 80), (800, 80), (1155, 80), (857, 80), (902, 80), (1242, 80), (1055, 80), (1276, 80), (1355, 80), (646, 80), (1244, 80), (1152, 80), (1177, 80), (792, 80), (1335, 80), (1317, 80), (1296, 80), (1281, 80), (1137, 80), (801, 80), (415, 80), (1379, 80), (1180, 80), (684, 80), (798, 80), (1382, 80), (900, 80), (787, 80), (1023, 80), (537, 80), (1160, 80), (1035, 80), (1336, 80), (713, 80), (1220, 80), (427, 80), (844, 80), (702, 80), (1248, 80), (1398, 80), (1030, 80), (855, 80), (1197, 80), (1033, 80), (883, 80), (1420, 80), (1238, 80), (1036, 80), (805, 80), (838, 80), (1272, 80), (1378, 80), (699, 80), (1249, 80), (1362, 80), (1439, 80), (795, 80), (1341, 80), (802, 80), (679, 80), (1322, 80), (404, 80), (807, 80), (906, 80), (1308, 80), (1302, 80), (1209, 80), (1397, 80), (697, 80), (837, 80), (829, 80), (774, 80), (1226, 80), (695, 80), (694, 80), (1364, 80), (1223, 80), (1006, 80), (1418, 80), (550, 80), (1163, 80), (1216, 80), (1166, 80), (1034, 80), (856, 80), (850, 80), (840, 80), (1210, 80), (1394, 80), (865, 80), (1393, 80), (693, 80), (1032, 80), (764, 80), (1214, 80), (505, 80), (1010, 80), (1149, 80), (1405, 80), (1200, 80), (1361, 80), (1198, 80), (1196, 80), (1256, 80), (880, 80), (1159, 80), (1156, 80), (1269, 80), (1348, 80), (1243, 80), (1029, 80), (782, 80), (836, 80), (1401, 80), (1310, 80), (1221, 80), (803, 80), (1411, 80), (1406, 80), (1284, 80), (691, 80), (533, 80), (1320, 80), (1219, 80), (409, 80), (1015, 80), (538, 80), (544, 80), (1417, 80), (1278, 80), (1037, 80), (1262, 80), (895, 80), (1251, 80), (1229, 80), (571, 80), (1021, 80), (1228, 80), (1389, 80), (1203, 80), (1207, 80), (783, 80), (1403, 80), (816, 80), (1022, 80), (648, 80), (670, 80), (1368, 80), (690, 80), (685, 80), (1199, 80), (1208, 80), (1426, 80), (1224, 80), (766, 80), (841, 80), (1404, 80), (1188, 80), (884, 80), (1186, 80), (1206, 80), (780, 80), (1012, 80), (1285, 80), (1433, 80), (846, 80), (1267, 80), (820, 80), (1205, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(939, 1), (977, 1), (927, 1), (1091, 1), (952, 1), (1104, 1), (944, 1), (1046, 1), (968, 1), (1108, 1), (938, 1), (1071, 1), (1237, 1), (1075, 1), (1078, 1), (1107, 1), (1068, 1), (1120, 1), (925, 1), (1122, 1), (1100, 1), (959, 1), (976, 1), (1076, 1), (1338, 1), (936, 1), (966, 1), (1371, 1), (1144, 1), (1119, 1), (953, 1), (1002, 1), (1109, 1), (949, 1), (777, 1), (1103, 1), (950, 1), (1098, 1), (1097, 1), (912, 1), (1367, 1), (1110, 1), (814, 1), (1334, 1), (1042, 1), (931, 1), (954, 1), (930, 1), (975, 1), (1101, 1), (1087, 1), (1113, 1), (1090, 1), (961, 1), (1088, 1), (984, 1), (920, 1), (1066, 1), (815, 1), (928, 1), (933, 1), (964, 1), (921, 1), (985, 1), (1039, 1), (955, 1), (886, 1), (1077, 1), (1099, 1), (958, 1), (1115, 1), (951, 1), (947, 1), (935, 1), (1145, 1), (934, 1), (1085, 1), (967, 1), (1094, 1), (1045, 1), (942, 1), (978, 1), (1080, 1), (1074, 1), (1114, 1), (969, 1), (943, 1), (970, 1), (683, 1), (1139, 1), (924, 1), (965, 1), (843, 1), (957, 1), (1093, 1), (1064, 1), (972, 1), (819, 1), (1073, 1), (1083, 1), (940, 1), (1058, 1), (923, 1), (941, 1), (948, 1), (971, 1), (956, 1), (946, 1), (990, 1), (1095, 1), (1067, 1), (1446, 1), (1056, 1), (1372, 1), (1086, 1), (1164, 1), (833, 1), (786, 1), (1089, 1), (1366, 1), (1407, 1), (945, 1), (983, 1), (1399, 1), (1082, 1), (1381, 1), (1092, 1), (1081, 1), (979, 1), (1365, 1), (987, 1), (973, 1), (1134, 1), (1112, 1), (926, 1), (988, 1), (1265, 1), (1059, 1), (1111, 1), (1343, 1), (804, 1), (806, 1), (914, 1), (908, 1), (1096, 1), (1057, 1), (922, 1), (989, 1), (929, 1), (1138, 1), (811, 1), (1384, 1), (1354, 1), (827, 1), (1131, 1), (995, 1), (1142, 1), (1400, 1), (904, 1), (996, 1), (1079, 1), (1370, 1), (1422, 1), (1252, 1), (1271, 1), (1105, 1), (1121, 1), (1106, 1), (913, 1), (1148, 1), (845, 1), (999, 1), (986, 1), (1054, 1), (960, 1), (1332, 1), (911, 1), (1060, 1), (982, 1), (1118, 1), (1061, 1), (1084, 1), (1146, 1), (1151, 1), (1356, 1), (1126, 1), (1117, 1), (994, 1), (1011, 1), (1065, 1), (1346, 1), (1225, 1), (1147, 1), (1357, 1), (788, 1), (1069, 1), (1326, 1), (1319, 1), (657, 1), (997, 1), (962, 1), (1102, 1), (1128, 1), (937, 1), (963, 1), (704, 1), (898, 1), (915, 1), (899, 1), (1233, 1), (1130, 1), (1127, 1), (1027, 1), (1063, 1), (861, 1), (1377, 1), (980, 1), (1212, 1), (812, 1), (1051, 1), (910, 1), (1241, 1), (932, 1), (1125, 1), (821, 1), (1153, 1), (823, 1), (890, 1), (1072, 1), (1143, 1), (1273, 1), (1259, 1), (1017, 1), (974, 1), (671, 1), (992, 1), (1327, 1), (1135, 1), (1360, 1), (1038, 1), (916, 1), (1040, 1), (1007, 1), (1409, 1), (1141, 1), (907, 1), (793, 1), (1154, 1), (1330, 1), (1349, 1), (824, 1), (1129, 1), (1116, 1), (794, 1), (680, 1), (645, 1), (1218, 1), (847, 1), (1053, 1), (1123, 1), (828, 1), (649, 1), (1232, 1), (1211, 1), (778, 1), (981, 1), (905, 1), (1359, 1), (1333, 1), (1424, 1), (1028, 1), (1047, 1), (1414, 1), (797, 1), (810, 1), (1264, 1), (1043, 1), (918, 1), (831, 1), (1062, 1), (711, 1), (1044, 1), (818, 1), (892, 1), (993, 1), (1328, 1), (1313, 1), (1345, 1), (784, 1), (1353, 1), (1270, 1), (1260, 1), (1388, 1), (1247, 1), (1352, 1), (1390, 1), (1344, 1), (1140, 1), (1331, 1), (651, 1), (998, 1), (1213, 1), (809, 1), (1392, 1), (1014, 1), (1124, 1), (1132, 1), (696, 1), (1396, 1), (1202, 1), (1187, 1), (817, 1), (1048, 1), (1001, 1), (1236, 1), (1380, 1), (901, 1), (1031, 1), (813, 1), (1325, 1), (1374, 1), (796, 1), (1165, 1), (1190, 1), (808, 1), (1441, 1), (1383, 1), (909, 1), (1329, 1), (1009, 1), (659, 1), (825, 1), (1391, 1), (859, 1), (1050, 1), (791, 1), (1340, 1), (1133, 1), (1387, 1), (822, 1), (1227, 1), (1049, 1), (420, 1), (1245, 1), (917, 1), (1024, 1), (1385, 1), (919, 1), (1350, 1), (1275, 1), (874, 1), (1230, 1), (1052, 1), (879, 1), (1347, 1), (1342, 1), (1311, 1), (781, 1), (1003, 1), (1150, 1), (418, 1), (1408, 1), (1395, 1), (1000, 1), (799, 1), (894, 1), (701, 1), (1136, 1), (515, 1), (1008, 1), (1369, 1), (681, 1), (1234, 1), (692, 1), (877, 1), (1305, 1), (834, 1), (1358, 1), (1415, 1), (1318, 1), (826, 1), (1314, 1), (1376, 1), (1351, 1), (1402, 1), (1005, 1), (888, 1), (1041, 1), (1070, 1), (893, 1), (1375, 1), (785, 1), (852, 1), (1263, 1), (1193, 1), (1161, 1), (835, 1), (1323, 1), (830, 1), (832, 1), (1004, 1), (991, 1), (656, 1), (851, 1), (1201, 1), (1373, 1), (1386, 1), (1412, 1), (903, 1), (1013, 1), (800, 1), (1155, 1), (857, 1), (902, 1), (1242, 1), (1055, 1), (1276, 1), (1355, 1), (646, 1), (1244, 1), (1152, 1), (1177, 1), (792, 1), (1335, 1), (1317, 1), (1296, 1), (1281, 1), (1137, 1), (801, 1), (415, 1), (1379, 1), (1180, 1), (684, 1), (798, 1), (1382, 1), (900, 1), (787, 1), (1023, 1), (537, 1), (1160, 1), (1035, 1), (1336, 1), (713, 1), (1220, 1), (427, 1), (844, 1), (702, 1), (1248, 1), (1398, 1), (1030, 1), (855, 1), (1197, 1), (1033, 1), (883, 1), (1420, 1), (1238, 1), (1036, 1), (805, 1), (838, 1), (1272, 1), (1378, 1), (699, 1), (1249, 1), (1362, 1), (1439, 1), (795, 1), (1341, 1), (802, 1), (679, 1), (1322, 1), (404, 1), (807, 1), (906, 1), (1308, 1), (1302, 1), (1209, 1), (1397, 1), (697, 1), (837, 1), (829, 1), (774, 1), (1226, 1), (695, 1), (694, 1), (1364, 1), (1223, 1), (1006, 1), (1418, 1), (550, 1), (1163, 1), (1216, 1), (1166, 1), (1034, 1), (856, 1), (850, 1), (840, 1), (1210, 1), (1394, 1), (865, 1), (1393, 1), (693, 1), (1032, 1), (764, 1), (1214, 1), (505, 1), (1010, 1), (1149, 1), (1405, 1), (1200, 1), (1361, 1), (1198, 1), (1196, 1), (1256, 1), (880, 1), (1159, 1), (1156, 1), (1269, 1), (1348, 1), (1243, 1), (1029, 1), (782, 1), (836, 1), (1401, 1), (1310, 1), (1221, 1), (803, 1), (1411, 1), (1406, 1), (1284, 1), (691, 1), (533, 1), (1320, 1), (1219, 1), (409, 1), (1015, 1), (538, 1), (544, 1), (1417, 1), (1278, 1), (1037, 1), (1262, 1), (895, 1), (1251, 1), (1229, 1), (571, 1), (1021, 1), (1228, 1), (1389, 1), (1203, 1), (1207, 1), (783, 1), (1403, 1), (816, 1), (1022, 1), (648, 1), (670, 1), (1368, 1), (690, 1), (685, 1), (1199, 1), (1208, 1), (1426, 1), (1224, 1), (766, 1), (841, 1), (1404, 1), (1188, 1), (884, 1), (1186, 1), (1206, 1), (780, 1), (1012, 1), (1285, 1), (1433, 1), (846, 1), (1267, 1), (820, 1), (1205, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
