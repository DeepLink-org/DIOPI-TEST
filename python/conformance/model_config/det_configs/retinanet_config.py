from ...config import Genfunc
from ...dtype import Dtype

retinanet_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)],
            padding=[(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 3, 800, 1088), (2, 64, 200, 272), (2, 64, 200, 272), (2, 64, 200, 272), (2, 256, 200, 272), (2, 256, 200, 272), (2, 128, 200, 272), (2, 128, 100, 136), (2, 256, 200, 272), (2, 512, 100, 136), (2, 128, 100, 136), (2, 512, 100, 136), (2, 256, 100, 136), (2, 256, 50, 68), (2, 512, 100, 136), (2, 1024, 50, 68), (2, 256, 50, 68), (2, 1024, 50, 68), (2, 512, 50, 68), (2, 512, 25, 34), (2, 1024, 50, 68), (2, 2048, 25, 34), (2, 512, 25, 34), (1, 3, 800, 1216), (1, 64, 200, 304), (1, 64, 200, 304), (1, 64, 200, 304), (1, 256, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 256, 200, 304), (1, 512, 100, 152), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 512, 25, 38), (1, 3, 800, 1248), (1, 64, 200, 312), (1, 64, 200, 312), (1, 64, 200, 312), (1, 256, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 256, 200, 312), (1, 512, 100, 156), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 512, 25, 39), (1, 3, 800, 1088), (1, 64, 200, 272), (1, 64, 200, 272), (1, 64, 200, 272), (1, 256, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 256, 200, 272), (1, 512, 100, 136), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 512, 25, 34), (1, 3, 800, 1344), (1, 64, 200, 336), (1, 64, 200, 336), (1, 64, 200, 336), (1, 256, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 256, 200, 336), (1, 512, 100, 168), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 512, 25, 42), (1, 3, 800, 1024), (1, 64, 200, 256), (1, 64, 200, 256), (1, 64, 200, 256), (1, 256, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 256, 200, 256), (1, 512, 100, 128), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 512, 25, 32), (1, 3, 1216, 800), (1, 64, 304, 200), (1, 64, 304, 200), (1, 64, 304, 200), (1, 256, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 256, 304, 200), (1, 512, 152, 100), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 512, 38, 25), (1, 3, 1088, 800), (1, 64, 272, 200), (1, 64, 272, 200), (1, 64, 272, 200), (1, 256, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 256, 272, 200), (1, 512, 136, 100), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 512, 34, 25), (1, 3, 1152, 800), (1, 64, 288, 200), (1, 64, 288, 200), (1, 64, 288, 200), (1, 256, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 256, 288, 200), (1, 512, 144, 100), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 512, 36, 25), (1, 3, 800, 960), (1, 64, 200, 240), (1, 64, 200, 240), (1, 64, 200, 240), (1, 256, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 256, 200, 240), (1, 512, 100, 120), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 512, 25, 30), (1, 3, 800, 1120), (1, 64, 200, 280), (1, 64, 200, 280), (1, 64, 200, 280), (1, 256, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 256, 200, 280), (1, 512, 100, 140), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 512, 25, 35), (1, 3, 896, 800), (1, 64, 224, 200), (1, 64, 224, 200), (1, 64, 224, 200), (1, 256, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 256, 224, 200), (1, 512, 112, 100), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 512, 28, 25), (1, 3, 832, 800), (1, 64, 208, 200), (1, 64, 208, 200), (1, 64, 208, 200), (1, 256, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 256, 208, 200), (1, 512, 104, 100), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 512, 26, 25), (1, 3, 800, 1280), (1, 64, 200, 320), (1, 64, 200, 320), (1, 64, 200, 320), (1, 256, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 256, 200, 320), (1, 512, 100, 160), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 512, 25, 40), (1, 3, 800, 1152), (1, 64, 200, 288), (1, 64, 200, 288), (1, 64, 200, 288), (1, 256, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 256, 200, 288), (1, 512, 100, 144), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 512, 25, 36), (1, 3, 768, 1344), (1, 64, 192, 336), (1, 64, 192, 336), (1, 64, 192, 336), (1, 256, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 256, 192, 336), (1, 512, 96, 168), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 512, 24, 42), (1, 3, 800, 800), (1, 64, 200, 200), (1, 64, 200, 200), (1, 64, 200, 200), (1, 256, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 256, 200, 200), (1, 512, 100, 100), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 512, 25, 25), (1, 3, 1312, 800), (1, 64, 328, 200), (1, 64, 328, 200), (1, 64, 328, 200), (1, 256, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 256, 328, 200), (1, 512, 164, 100), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 512, 41, 25), (1, 3, 800, 1184), (1, 64, 200, 296), (1, 64, 200, 296), (1, 64, 200, 296), (1, 256, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 256, 200, 296), (1, 512, 100, 148), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 512, 25, 37), (1, 3, 800, 1312), (1, 64, 200, 328), (1, 64, 200, 328), (1, 64, 200, 328), (1, 256, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 256, 200, 328), (1, 512, 100, 164), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 512, 25, 41), (1, 3, 608, 1344), (1, 64, 152, 336), (1, 64, 152, 336), (1, 64, 152, 336), (1, 256, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 256, 152, 336), (1, 512, 76, 168), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 512, 19, 42), (1, 3, 1248, 800), (1, 64, 312, 200), (1, 64, 312, 200), (1, 64, 312, 200), (1, 256, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 256, 312, 200), (1, 512, 156, 100), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 512, 39, 25), (1, 3, 1120, 800), (1, 64, 280, 200), (1, 64, 280, 200), (1, 64, 280, 200), (1, 256, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 256, 280, 200), (1, 512, 140, 100), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 512, 35, 25), (1, 3, 800, 832), (1, 64, 200, 208), (1, 64, 200, 208), (1, 64, 200, 208), (1, 256, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 256, 200, 208), (1, 512, 100, 104), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 512, 25, 26), (1, 3, 800, 1056), (1, 64, 200, 264), (1, 64, 200, 264), (1, 64, 200, 264), (1, 256, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 256, 200, 264), (1, 512, 100, 132), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 512, 25, 33), (1, 3, 992, 800), (1, 64, 248, 200), (1, 64, 248, 200), (1, 64, 248, 200), (1, 256, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 256, 248, 200), (1, 512, 124, 100), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 512, 31, 25), (1, 3, 1344, 768), (1, 64, 336, 192), (1, 64, 336, 192), (1, 64, 336, 192), (1, 256, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 256, 336, 192), (1, 512, 168, 96), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 512, 42, 24), (1, 3, 1184, 800), (1, 64, 296, 200), (1, 64, 296, 200), (1, 64, 296, 200), (1, 256, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 256, 296, 200), (1, 512, 148, 100), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 512, 37, 25), (1, 3, 800, 992), (1, 64, 200, 248), (1, 64, 200, 248), (1, 64, 200, 248), (1, 256, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 256, 200, 248), (1, 512, 100, 124), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 512, 25, 31), (1, 3, 1280, 800), (1, 64, 320, 200), (1, 64, 320, 200), (1, 64, 320, 200), (1, 256, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 256, 320, 200), (1, 512, 160, 100), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 512, 40, 25), (1, 3, 704, 1344), (1, 64, 176, 336), (1, 64, 176, 336), (1, 64, 176, 336), (1, 256, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 256, 176, 336), (1, 512, 88, 168), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 512, 22, 42), (1, 3, 864, 800), (1, 64, 216, 200), (1, 64, 216, 200), (1, 64, 216, 200), (1, 256, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 256, 216, 200), (1, 512, 108, 100), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 512, 27, 25), (1, 3, 800, 864), (1, 64, 200, 216), (1, 64, 200, 216), (1, 64, 200, 216), (1, 256, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 256, 200, 216), (1, 512, 100, 108), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 512, 25, 27), (1, 3, 1056, 800), (1, 64, 264, 200), (1, 64, 264, 200), (1, 64, 264, 200), (1, 256, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 256, 264, 200), (1, 512, 132, 100), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 512, 33, 25), (1, 3, 640, 1344), (1, 64, 160, 336), (1, 64, 160, 336), (1, 64, 160, 336), (1, 256, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 256, 160, 336), (1, 512, 80, 168), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 512, 20, 42), (1, 3, 1344, 800), (1, 64, 336, 200), (1, 64, 336, 200), (1, 64, 336, 200), (1, 256, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 256, 336, 200), (1, 512, 168, 100), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 512, 42, 25), (1, 3, 736, 1344), (1, 64, 184, 336), (1, 64, 184, 336), (1, 64, 184, 336), (1, 256, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 256, 184, 336), (1, 512, 92, 168), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 512, 23, 42), (1, 3, 672, 1344), (1, 64, 168, 336), (1, 64, 168, 336), (1, 64, 168, 336), (1, 256, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 256, 168, 336), (1, 512, 84, 168), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 512, 21, 42), (1, 3, 1024, 800), (1, 64, 256, 200), (1, 64, 256, 200), (1, 64, 256, 200), (1, 256, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 256, 256, 200), (1, 512, 128, 100), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 512, 32, 25), (1, 3, 800, 928), (1, 64, 200, 232), (1, 64, 200, 232), (1, 64, 200, 232), (1, 256, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 256, 200, 232), (1, 512, 100, 116), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 512, 25, 29), (1, 3, 1344, 608), (1, 64, 336, 152), (1, 64, 336, 152), (1, 64, 336, 152), (1, 256, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 256, 336, 152), (1, 512, 168, 76), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 512, 42, 19), (1, 3, 800, 896), (1, 64, 200, 224), (1, 64, 200, 224), (1, 64, 200, 224), (1, 256, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 256, 200, 224), (1, 512, 100, 112), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 512, 25, 28), (1, 3, 576, 1344), (1, 64, 144, 336), (1, 64, 144, 336), (1, 64, 144, 336), (1, 256, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 256, 144, 336), (1, 512, 72, 168), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 512, 18, 42), (1, 3, 1344, 640), (1, 64, 336, 160), (1, 64, 336, 160), (1, 64, 336, 160), (1, 256, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 256, 336, 160), (1, 512, 168, 80), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 512, 42, 20), (1, 3, 960, 800), (1, 64, 240, 200), (1, 64, 240, 200), (1, 64, 240, 200), (1, 256, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 256, 240, 200), (1, 512, 120, 100), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 512, 30, 25), (1, 3, 352, 1344), (1, 64, 88, 336), (1, 64, 88, 336), (1, 64, 88, 336), (1, 256, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 256, 88, 336), (1, 512, 44, 168), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 512, 11, 42), (1, 3, 416, 1344), (1, 64, 104, 336), (1, 64, 104, 336), (1, 64, 104, 336), (1, 256, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 256, 104, 336), (1, 512, 52, 168), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 512, 13, 42), (1, 3, 480, 1344), (1, 64, 120, 336), (1, 64, 120, 336), (1, 64, 120, 336), (1, 256, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 256, 120, 336), (1, 512, 60, 168), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 512, 15, 42), (1, 3, 928, 800), (1, 64, 232, 200), (1, 64, 232, 200), (1, 64, 232, 200), (1, 256, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 256, 232, 200), (1, 512, 116, 100), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 512, 29, 25), (1, 3, 1344, 704), (1, 64, 336, 176), (1, 64, 336, 176), (1, 64, 336, 176), (1, 256, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 256, 336, 176), (1, 512, 168, 88), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 512, 42, 22), (1, 3, 512, 1344), (1, 64, 128, 336), (1, 64, 128, 336), (1, 64, 128, 336), (1, 256, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 256, 128, 336), (1, 512, 64, 168), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 512, 16, 42), (1, 3, 384, 1344), (1, 64, 96, 336), (1, 64, 96, 336), (1, 64, 96, 336), (1, 256, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 256, 96, 336), (1, 512, 48, 168), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 512, 12, 42), (1, 3, 1344, 512), (1, 64, 336, 128), (1, 64, 336, 128), (1, 64, 336, 128), (1, 256, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 256, 336, 128), (1, 512, 168, 64), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 512, 42, 16), (1, 3, 448, 1344), (1, 64, 112, 336), (1, 64, 112, 336), (1, 64, 112, 336), (1, 256, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 256, 112, 336), (1, 512, 56, 168), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 512, 14, 42), (1, 3, 544, 1344), (1, 64, 136, 336), (1, 64, 136, 336), (1, 64, 136, 336), (1, 256, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 256, 136, 336), (1, 512, 68, 168), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 512, 17, 42), (1, 3, 1344, 736), (1, 64, 336, 184), (1, 64, 336, 184), (1, 64, 336, 184), (1, 256, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 256, 336, 184), (1, 512, 168, 92), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 512, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 400, 544), (2, 64, 200, 272), (2, 256, 200, 272), (2, 128, 200, 272), (2, 128, 100, 136), (2, 512, 100, 136), (2, 256, 100, 136), (2, 256, 50, 68), (2, 1024, 50, 68), (2, 512, 50, 68), (2, 512, 25, 34), (2, 2048, 25, 34), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 64, 400, 544), (2, 64, 200, 272), (2, 256, 200, 272), (2, 128, 200, 272), (2, 128, 100, 136), (2, 512, 100, 136), (2, 256, 100, 136), (2, 256, 50, 68), (2, 1024, 50, 68), (2, 512, 50, 68), (2, 512, 25, 34), (2, 2048, 25, 34), (2, 256, 25, 34), (2, 256, 13, 17), (2, 256, 7, 9), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 256, 25, 38), (1, 256, 13, 19), (1, 256, 7, 10), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 256, 25, 39), (1, 256, 13, 20), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 256, 25, 34), (1, 256, 13, 17), (1, 256, 7, 9), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 256, 25, 42), (1, 256, 13, 21), (1, 256, 7, 11), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 256, 25, 32), (1, 256, 13, 16), (1, 256, 7, 8), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 256, 38, 25), (1, 256, 19, 13), (1, 256, 10, 7), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 256, 34, 25), (1, 256, 17, 13), (1, 256, 9, 7), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 256, 36, 25), (1, 256, 18, 13), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 256, 25, 30), (1, 256, 13, 15), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 256, 25, 35), (1, 256, 13, 18), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 256, 28, 25), (1, 256, 14, 13), (1, 256, 7, 7), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 256, 26, 25), (1, 256, 13, 13), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 256, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 256, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 256, 24, 42), (1, 256, 12, 21), (1, 256, 6, 11), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 256, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 256, 41, 25), (1, 256, 21, 13), (1, 256, 11, 7), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 256, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 256, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 256, 19, 42), (1, 256, 10, 21), (1, 256, 5, 11), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 256, 39, 25), (1, 256, 20, 13), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 256, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 256, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 256, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 256, 31, 25), (1, 256, 16, 13), (1, 256, 8, 7), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 256, 42, 24), (1, 256, 21, 12), (1, 256, 11, 6), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 256, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 256, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 256, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 256, 22, 42), (1, 256, 11, 21), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 256, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 256, 25, 27), (1, 256, 13, 14), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 256, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 256, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 256, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 256, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 256, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 256, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 256, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 256, 42, 19), (1, 256, 21, 10), (1, 256, 11, 5), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 256, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 256, 18, 42), (1, 256, 9, 21), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 256, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 256, 30, 25), (1, 256, 15, 13), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 256, 11, 42), (1, 256, 6, 21), (1, 256, 3, 11), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 256, 13, 42), (1, 256, 7, 21), (1, 256, 4, 11), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 256, 15, 42), (1, 256, 8, 21), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 256, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 256, 42, 22), (1, 256, 21, 11), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 256, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 256, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 256, 42, 16), (1, 256, 21, 8), (1, 256, 11, 4), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 256, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 256, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 400, 544), (1, 64, 400, 608), (1, 64, 400, 624), (1, 64, 400, 544), (1, 64, 400, 672), (1, 64, 400, 512), (1, 64, 608, 400), (1, 64, 544, 400), (1, 64, 576, 400), (1, 64, 400, 480), (1, 64, 400, 560), (1, 64, 448, 400), (1, 64, 416, 400), (1, 64, 400, 640), (1, 64, 400, 576), (1, 64, 384, 672), (1, 64, 400, 400), (1, 64, 656, 400), (1, 64, 400, 592), (1, 64, 400, 656), (1, 64, 304, 672), (1, 64, 624, 400), (1, 64, 560, 400), (1, 64, 400, 416), (1, 64, 400, 528), (1, 64, 496, 400), (1, 64, 672, 384), (1, 64, 592, 400), (1, 64, 400, 496), (1, 64, 640, 400), (1, 64, 352, 672), (1, 64, 432, 400), (1, 64, 400, 432), (1, 64, 528, 400), (1, 64, 320, 672), (1, 64, 672, 400), (1, 64, 368, 672), (1, 64, 336, 672), (1, 64, 512, 400), (1, 64, 400, 464), (1, 64, 672, 304), (1, 64, 400, 448), (1, 64, 288, 672), (1, 64, 672, 320), (1, 64, 480, 400), (1, 64, 176, 672), (1, 64, 208, 672), (1, 64, 240, 672), (1, 64, 464, 400), (1, 64, 672, 352), (1, 64, 256, 672), (1, 64, 192, 672), (1, 64, 672, 256), (1, 64, 224, 672), (1, 64, 272, 672), (1, 64, 672, 368)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 200, 272), (2, 512, 100, 136), (2, 1024, 50, 68), (2, 2048, 25, 34), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 200, 272), (2, 512, 100, 136), (2, 1024, 50, 68), (2, 2048, 25, 34), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 512, 100, 136), (2, 1024, 50, 68), (2, 2048, 25, 34), (2, 256, 100, 136), (2, 256, 50, 68), (2, 256, 25, 34), (2, 2048, 25, 34), (2, 256, 13, 17), (2, 256, 100, 136), (2, 256, 100, 136), (2, 256, 50, 68), (2, 256, 50, 68), (2, 256, 25, 34), (2, 256, 25, 34), (2, 256, 13, 17), (2, 256, 13, 17), (2, 256, 13, 17), (2, 256, 7, 9), (2, 256, 7, 9), (2, 256, 7, 9), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 25, 38), (1, 2048, 25, 38), (1, 256, 13, 19), (1, 256, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 25, 38), (1, 256, 13, 19), (1, 256, 13, 19), (1, 256, 13, 19), (1, 256, 7, 10), (1, 256, 7, 10), (1, 256, 7, 10), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 2048, 25, 39), (1, 256, 13, 20), (1, 256, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 25, 39), (1, 256, 13, 20), (1, 256, 13, 20), (1, 256, 13, 20), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 2048, 25, 34), (1, 256, 13, 17), (1, 256, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 25, 34), (1, 256, 13, 17), (1, 256, 13, 17), (1, 256, 13, 17), (1, 256, 7, 9), (1, 256, 7, 9), (1, 256, 7, 9), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 2048, 25, 42), (1, 256, 13, 21), (1, 256, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 25, 42), (1, 256, 13, 21), (1, 256, 13, 21), (1, 256, 13, 21), (1, 256, 7, 11), (1, 256, 7, 11), (1, 256, 7, 11), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 2048, 25, 32), (1, 256, 13, 16), (1, 256, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 25, 32), (1, 256, 13, 16), (1, 256, 13, 16), (1, 256, 13, 16), (1, 256, 7, 8), (1, 256, 7, 8), (1, 256, 7, 8), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 2048, 38, 25), (1, 256, 19, 13), (1, 256, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 38, 25), (1, 256, 19, 13), (1, 256, 19, 13), (1, 256, 19, 13), (1, 256, 10, 7), (1, 256, 10, 7), (1, 256, 10, 7), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 2048, 34, 25), (1, 256, 17, 13), (1, 256, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 34, 25), (1, 256, 17, 13), (1, 256, 17, 13), (1, 256, 17, 13), (1, 256, 9, 7), (1, 256, 9, 7), (1, 256, 9, 7), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 2048, 36, 25), (1, 256, 18, 13), (1, 256, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 36, 25), (1, 256, 18, 13), (1, 256, 18, 13), (1, 256, 18, 13), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 2048, 25, 30), (1, 256, 13, 15), (1, 256, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 25, 30), (1, 256, 13, 15), (1, 256, 13, 15), (1, 256, 13, 15), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 2048, 25, 35), (1, 256, 13, 18), (1, 256, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 25, 35), (1, 256, 13, 18), (1, 256, 13, 18), (1, 256, 13, 18), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 2048, 28, 25), (1, 256, 14, 13), (1, 256, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 28, 25), (1, 256, 14, 13), (1, 256, 14, 13), (1, 256, 14, 13), (1, 256, 7, 7), (1, 256, 7, 7), (1, 256, 7, 7), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 2048, 26, 25), (1, 256, 13, 13), (1, 256, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 26, 25), (1, 256, 13, 13), (1, 256, 13, 13), (1, 256, 13, 13), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 2048, 25, 40), (1, 256, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 25, 40), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 2048, 25, 36), (1, 256, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 25, 36), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 2048, 24, 42), (1, 256, 12, 21), (1, 256, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 24, 42), (1, 256, 12, 21), (1, 256, 12, 21), (1, 256, 12, 21), (1, 256, 6, 11), (1, 256, 6, 11), (1, 256, 6, 11), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 2048, 25, 25), (1, 256, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 25, 25), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 2048, 41, 25), (1, 256, 21, 13), (1, 256, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 41, 25), (1, 256, 21, 13), (1, 256, 21, 13), (1, 256, 21, 13), (1, 256, 11, 7), (1, 256, 11, 7), (1, 256, 11, 7), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 2048, 25, 37), (1, 256, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 25, 37), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 2048, 25, 41), (1, 256, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 25, 41), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 2048, 19, 42), (1, 256, 10, 21), (1, 256, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 19, 42), (1, 256, 10, 21), (1, 256, 10, 21), (1, 256, 10, 21), (1, 256, 5, 11), (1, 256, 5, 11), (1, 256, 5, 11), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 2048, 39, 25), (1, 256, 20, 13), (1, 256, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 39, 25), (1, 256, 20, 13), (1, 256, 20, 13), (1, 256, 20, 13), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 2048, 35, 25), (1, 256, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 35, 25), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 2048, 25, 26), (1, 256, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 25, 26), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 2048, 25, 33), (1, 256, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 25, 33), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 2048, 31, 25), (1, 256, 16, 13), (1, 256, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 31, 25), (1, 256, 16, 13), (1, 256, 16, 13), (1, 256, 16, 13), (1, 256, 8, 7), (1, 256, 8, 7), (1, 256, 8, 7), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 2048, 42, 24), (1, 256, 21, 12), (1, 256, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 42, 24), (1, 256, 21, 12), (1, 256, 21, 12), (1, 256, 21, 12), (1, 256, 11, 6), (1, 256, 11, 6), (1, 256, 11, 6), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 2048, 37, 25), (1, 256, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 37, 25), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 2048, 25, 31), (1, 256, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 25, 31), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 2048, 40, 25), (1, 256, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 40, 25), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 2048, 22, 42), (1, 256, 11, 21), (1, 256, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 22, 42), (1, 256, 11, 21), (1, 256, 11, 21), (1, 256, 11, 21), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 2048, 27, 25), (1, 256, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 27, 25), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 2048, 25, 27), (1, 256, 13, 14), (1, 256, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 25, 27), (1, 256, 13, 14), (1, 256, 13, 14), (1, 256, 13, 14), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 2048, 33, 25), (1, 256, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 33, 25), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 2048, 20, 42), (1, 256, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 20, 42), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 2048, 42, 25), (1, 256, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 42, 25), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 2048, 23, 42), (1, 256, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 23, 42), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 2048, 21, 42), (1, 256, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 21, 42), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 2048, 32, 25), (1, 256, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 32, 25), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 2048, 25, 29), (1, 256, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 25, 29), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 2048, 42, 19), (1, 256, 21, 10), (1, 256, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 42, 19), (1, 256, 21, 10), (1, 256, 21, 10), (1, 256, 21, 10), (1, 256, 11, 5), (1, 256, 11, 5), (1, 256, 11, 5), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 2048, 25, 28), (1, 256, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 25, 28), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 2048, 18, 42), (1, 256, 9, 21), (1, 256, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 18, 42), (1, 256, 9, 21), (1, 256, 9, 21), (1, 256, 9, 21), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 2048, 42, 20), (1, 256, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 42, 20), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 2048, 30, 25), (1, 256, 15, 13), (1, 256, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 30, 25), (1, 256, 15, 13), (1, 256, 15, 13), (1, 256, 15, 13), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 2048, 11, 42), (1, 256, 6, 21), (1, 256, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 11, 42), (1, 256, 6, 21), (1, 256, 6, 21), (1, 256, 6, 21), (1, 256, 3, 11), (1, 256, 3, 11), (1, 256, 3, 11), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 2048, 13, 42), (1, 256, 7, 21), (1, 256, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 13, 42), (1, 256, 7, 21), (1, 256, 7, 21), (1, 256, 7, 21), (1, 256, 4, 11), (1, 256, 4, 11), (1, 256, 4, 11), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 2048, 15, 42), (1, 256, 8, 21), (1, 256, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 15, 42), (1, 256, 8, 21), (1, 256, 8, 21), (1, 256, 8, 21), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 2048, 29, 25), (1, 256, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 29, 25), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 2048, 42, 22), (1, 256, 21, 11), (1, 256, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 42, 22), (1, 256, 21, 11), (1, 256, 21, 11), (1, 256, 21, 11), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 2048, 16, 42), (1, 256, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 16, 42), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 2048, 12, 42), (1, 256, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 12, 42), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 2048, 42, 16), (1, 256, 21, 8), (1, 256, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 42, 16), (1, 256, 21, 8), (1, 256, 21, 8), (1, 256, 21, 8), (1, 256, 11, 4), (1, 256, 11, 4), (1, 256, 11, 4), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 2048, 14, 42), (1, 256, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 14, 42), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 2048, 17, 42), (1, 256, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 17, 42), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23), (1, 2048, 42, 23), (1, 256, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 84, 46), (1, 256, 42, 23), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 2048, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3), (720, 256, 3, 3), (36, 256, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (720,), (36,), (256,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (720,), (36,), (720,), (36,), (720,), (36,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            size=[(50, 68), (100, 136), (50, 76), (100, 152), (50, 78), (100, 156), (50, 68), (100, 136), (50, 84), (100, 168), (50, 64), (100, 128), (76, 50), (152, 100), (68, 50), (136, 100), (72, 50), (144, 100), (50, 60), (100, 120), (50, 70), (100, 140), (56, 50), (112, 100), (52, 50), (104, 100), (50, 80), (100, 160), (50, 72), (100, 144), (48, 84), (96, 168), (50, 50), (100, 100), (82, 50), (164, 100), (50, 74), (100, 148), (50, 82), (100, 164), (38, 84), (76, 168), (78, 50), (156, 100), (70, 50), (140, 100), (50, 52), (100, 104), (50, 66), (100, 132), (62, 50), (124, 100), (84, 48), (168, 96), (74, 50), (148, 100), (50, 62), (100, 124), (80, 50), (160, 100), (44, 84), (88, 168), (54, 50), (108, 100), (50, 54), (100, 108), (66, 50), (132, 100), (40, 84), (80, 168), (84, 50), (168, 100), (46, 84), (92, 168), (42, 84), (84, 168), (64, 50), (128, 100), (50, 58), (100, 116), (84, 38), (168, 76), (50, 56), (100, 112), (36, 84), (72, 168), (84, 40), (168, 80), (60, 50), (120, 100), (22, 84), (44, 168), (26, 84), (52, 168), (30, 84), (60, 168), (58, 50), (116, 100), (84, 44), (168, 88), (32, 84), (64, 168), (24, 84), (48, 168), (84, 32), (168, 64), (28, 84), (56, 168), (34, 84), (68, 168), (84, 46), (168, 92)],
            mode=['nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 25, 34), (2, 256, 50, 68), (1, 256, 25, 38), (1, 256, 50, 76), (1, 256, 25, 39), (1, 256, 50, 78), (1, 256, 25, 34), (1, 256, 50, 68), (1, 256, 25, 42), (1, 256, 50, 84), (1, 256, 25, 32), (1, 256, 50, 64), (1, 256, 38, 25), (1, 256, 76, 50), (1, 256, 34, 25), (1, 256, 68, 50), (1, 256, 36, 25), (1, 256, 72, 50), (1, 256, 25, 30), (1, 256, 50, 60), (1, 256, 25, 35), (1, 256, 50, 70), (1, 256, 28, 25), (1, 256, 56, 50), (1, 256, 26, 25), (1, 256, 52, 50), (1, 256, 25, 40), (1, 256, 50, 80), (1, 256, 25, 36), (1, 256, 50, 72), (1, 256, 24, 42), (1, 256, 48, 84), (1, 256, 25, 25), (1, 256, 50, 50), (1, 256, 41, 25), (1, 256, 82, 50), (1, 256, 25, 37), (1, 256, 50, 74), (1, 256, 25, 41), (1, 256, 50, 82), (1, 256, 19, 42), (1, 256, 38, 84), (1, 256, 39, 25), (1, 256, 78, 50), (1, 256, 35, 25), (1, 256, 70, 50), (1, 256, 25, 26), (1, 256, 50, 52), (1, 256, 25, 33), (1, 256, 50, 66), (1, 256, 31, 25), (1, 256, 62, 50), (1, 256, 42, 24), (1, 256, 84, 48), (1, 256, 37, 25), (1, 256, 74, 50), (1, 256, 25, 31), (1, 256, 50, 62), (1, 256, 40, 25), (1, 256, 80, 50), (1, 256, 22, 42), (1, 256, 44, 84), (1, 256, 27, 25), (1, 256, 54, 50), (1, 256, 25, 27), (1, 256, 50, 54), (1, 256, 33, 25), (1, 256, 66, 50), (1, 256, 20, 42), (1, 256, 40, 84), (1, 256, 42, 25), (1, 256, 84, 50), (1, 256, 23, 42), (1, 256, 46, 84), (1, 256, 21, 42), (1, 256, 42, 84), (1, 256, 32, 25), (1, 256, 64, 50), (1, 256, 25, 29), (1, 256, 50, 58), (1, 256, 42, 19), (1, 256, 84, 38), (1, 256, 25, 28), (1, 256, 50, 56), (1, 256, 18, 42), (1, 256, 36, 84), (1, 256, 42, 20), (1, 256, 84, 40), (1, 256, 30, 25), (1, 256, 60, 50), (1, 256, 11, 42), (1, 256, 22, 84), (1, 256, 13, 42), (1, 256, 26, 84), (1, 256, 15, 42), (1, 256, 30, 84), (1, 256, 29, 25), (1, 256, 58, 50), (1, 256, 42, 22), (1, 256, 84, 44), (1, 256, 16, 42), (1, 256, 32, 84), (1, 256, 12, 42), (1, 256, 24, 84), (1, 256, 42, 16), (1, 256, 84, 32), (1, 256, 14, 42), (1, 256, 28, 84), (1, 256, 17, 42), (1, 256, 34, 84), (1, 256, 42, 23), (1, 256, 84, 46)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 50, 68), (2, 256, 100, 136), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (5, 1), (133,), (13, 1), (335,), (), (1, 256, 50, 76), (1, 256, 100, 152), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 78), (1, 256, 100, 156), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 50, 84), (1, 256, 100, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 64), (1, 256, 100, 128), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 72, 50), (1, 256, 144, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 60), (1, 256, 100, 120), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 70), (1, 256, 100, 140), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 56, 50), (1, 256, 112, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 52, 50), (1, 256, 104, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 80), (1, 256, 100, 160), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 48, 84), (1, 256, 96, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 50), (1, 256, 100, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 82, 50), (1, 256, 164, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 74), (1, 256, 100, 148), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 38, 84), (1, 256, 76, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 50, 66), (1, 256, 100, 132), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 62, 50), (1, 256, 124, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 44, 84), (1, 256, 88, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 54, 50), (1, 256, 108, 100), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 40, 84), (1, 256, 80, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 46, 84), (1, 256, 92, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 42, 84), (1, 256, 84, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 50, 58), (1, 256, 100, 116), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 36, 84), (1, 256, 72, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 22, 84), (1, 256, 44, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 26, 84), (1, 256, 52, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 30, 84), (1, 256, 60, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 32, 84), (1, 256, 64, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 24, 84), (1, 256, 48, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 28, 84), (1, 256, 56, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 34, 84), (1, 256, 68, 168), (1, 9, 4), (1, 9, 4), (1, 9, 4), (1, 256, 84, 46), (1, 256, 168, 92)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 50, 68), (2, 256, 100, 136), (13600, 1, 4), (3400, 1, 4), (850, 1, 4), (221, 1, 4), (63, 1, 4), (1, 163206), (133,), (1, 163206), (335,), (), (1, 256, 50, 76), (1, 256, 100, 152), (15200, 1, 4), (3800, 1, 4), (950, 1, 4), (247, 1, 4), (70, 1, 4), (1, 256, 50, 78), (1, 256, 100, 156), (15600, 1, 4), (3900, 1, 4), (975, 1, 4), (260, 1, 4), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 50, 84), (1, 256, 100, 168), (16800, 1, 4), (4200, 1, 4), (1050, 1, 4), (273, 1, 4), (77, 1, 4), (1, 256, 50, 64), (1, 256, 100, 128), (12800, 1, 4), (3200, 1, 4), (800, 1, 4), (208, 1, 4), (56, 1, 4), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 72, 50), (1, 256, 144, 100), (14400, 1, 4), (3600, 1, 4), (900, 1, 4), (234, 1, 4), (1, 256, 50, 60), (1, 256, 100, 120), (12000, 1, 4), (3000, 1, 4), (750, 1, 4), (195, 1, 4), (1, 256, 50, 70), (1, 256, 100, 140), (14000, 1, 4), (3500, 1, 4), (875, 1, 4), (1, 256, 56, 50), (1, 256, 112, 100), (11200, 1, 4), (2800, 1, 4), (700, 1, 4), (182, 1, 4), (49, 1, 4), (1, 256, 52, 50), (1, 256, 104, 100), (10400, 1, 4), (2600, 1, 4), (650, 1, 4), (169, 1, 4), (1, 256, 50, 80), (1, 256, 100, 160), (16000, 1, 4), (4000, 1, 4), (1000, 1, 4), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 48, 84), (1, 256, 96, 168), (16128, 1, 4), (4032, 1, 4), (1008, 1, 4), (252, 1, 4), (66, 1, 4), (1, 256, 50, 50), (1, 256, 100, 100), (10000, 1, 4), (2500, 1, 4), (625, 1, 4), (1, 256, 82, 50), (1, 256, 164, 100), (16400, 1, 4), (4100, 1, 4), (1025, 1, 4), (1, 256, 50, 74), (1, 256, 100, 148), (14800, 1, 4), (3700, 1, 4), (925, 1, 4), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 38, 84), (1, 256, 76, 168), (12768, 1, 4), (3192, 1, 4), (798, 1, 4), (210, 1, 4), (55, 1, 4), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 50, 66), (1, 256, 100, 132), (13200, 1, 4), (3300, 1, 4), (825, 1, 4), (1, 256, 62, 50), (1, 256, 124, 100), (12400, 1, 4), (3100, 1, 4), (775, 1, 4), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 44, 84), (1, 256, 88, 168), (14784, 1, 4), (3696, 1, 4), (924, 1, 4), (231, 1, 4), (1, 256, 54, 50), (1, 256, 108, 100), (10800, 1, 4), (2700, 1, 4), (675, 1, 4), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 40, 84), (1, 256, 80, 168), (13440, 1, 4), (3360, 1, 4), (840, 1, 4), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 46, 84), (1, 256, 92, 168), (15456, 1, 4), (3864, 1, 4), (966, 1, 4), (1, 256, 42, 84), (1, 256, 84, 168), (14112, 1, 4), (3528, 1, 4), (882, 1, 4), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 50, 58), (1, 256, 100, 116), (11600, 1, 4), (2900, 1, 4), (725, 1, 4), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 36, 84), (1, 256, 72, 168), (12096, 1, 4), (3024, 1, 4), (756, 1, 4), (189, 1, 4), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 22, 84), (1, 256, 44, 168), (7392, 1, 4), (1848, 1, 4), (462, 1, 4), (126, 1, 4), (33, 1, 4), (1, 256, 26, 84), (1, 256, 52, 168), (8736, 1, 4), (2184, 1, 4), (546, 1, 4), (147, 1, 4), (44, 1, 4), (1, 256, 30, 84), (1, 256, 60, 168), (10080, 1, 4), (2520, 1, 4), (630, 1, 4), (168, 1, 4), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 32, 84), (1, 256, 64, 168), (10752, 1, 4), (2688, 1, 4), (672, 1, 4), (1, 256, 24, 84), (1, 256, 48, 168), (8064, 1, 4), (2016, 1, 4), (504, 1, 4), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 28, 84), (1, 256, 56, 168), (9408, 1, 4), (2352, 1, 4), (588, 1, 4), (1, 256, 34, 84), (1, 256, 68, 168), (11424, 1, 4), (2856, 1, 4), (714, 1, 4), (1, 256, 84, 46), (1, 256, 168, 92)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            end=[136, 100, 68, 50, 34, 25, 17, 13, 9, 7, 152, 76, 38, 19, 10, 156, 78, 39, 20, 168, 84, 42, 21, 11, 128, 64, 32, 16, 8, 144, 72, 36, 18, 120, 60, 30, 15, 140, 70, 35, 112, 56, 28, 14, 104, 52, 26, 160, 80, 40, 96, 48, 24, 12, 6, 164, 82, 41, 148, 74, 37, 5, 132, 66, 33, 124, 62, 31, 88, 44, 22, 108, 54, 27, 92, 46, 23, 116, 58, 29, 3, 4],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[8, 8, 16, 16, 32, 32, 64, 64, 128, 128, 0.5, 0.5, 8, 16, 32, 64, 128, 8, 16, 32, 64, 8, 16, 32, 64, 128, 8, 16, 32, 64, 128, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 8, 16, 32, 64, 8, 16, 32, 8, 16, 32, 8, 16, 32, 64, 128, 8, 16, 32, 8, 16, 32, 8, 16, 32, 64, 128, 8, 16, 32, 8, 16, 32, 8, 16, 32, 64, 8, 16, 32, 8, 16, 32, 8, 16, 32, 8, 16, 32, 8, 16, 32, 8, 16, 32, 64, 8, 16, 32, 64, 128, 8, 16, 32, 64, 128, 8, 16, 32, 64, 8, 16, 32, 8, 16, 32, 8, 16, 32, 8, 16, 32],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(136,), (100,), (68,), (50,), (34,), (25,), (17,), (13,), (9,), (7,), (133,), (335,), (152,), (76,), (38,), (19,), (10,), (156,), (78,), (39,), (20,), (168,), (84,), (42,), (21,), (11,), (128,), (64,), (32,), (16,), (8,), (144,), (72,), (36,), (18,), (120,), (60,), (30,), (15,), (140,), (70,), (35,), (112,), (56,), (28,), (14,), (104,), (52,), (26,), (160,), (80,), (40,), (96,), (48,), (24,), (12,), (6,), (164,), (82,), (41,), (148,), (74,), (37,), (76,), (38,), (19,), (10,), (5,), (132,), (66,), (33,), (124,), (62,), (31,), (88,), (44,), (22,), (11,), (108,), (54,), (27,), (80,), (40,), (20,), (92,), (46,), (23,), (84,), (42,), (21,), (116,), (58,), (29,), (72,), (36,), (18,), (9,), (44,), (22,), (11,), (6,), (3,), (52,), (26,), (13,), (7,), (4,), (60,), (30,), (15,), (8,), (64,), (32,), (16,), (48,), (24,), (12,), (56,), (28,), (14,), (68,), (34,), (17,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((13600,), (13600,), (13600,), (13600,)), ((3400,), (3400,), (3400,), (3400,)), ((850,), (850,), (850,), (850,)), ((221,), (221,), (221,), (221,)), ((63,), (63,), (63,), (63,)), ((133,), (133,), (133,), (133,)), ((335,), (335,), (335,), (335,)), ((15200,), (15200,), (15200,), (15200,)), ((3800,), (3800,), (3800,), (3800,)), ((950,), (950,), (950,), (950,)), ((247,), (247,), (247,), (247,)), ((70,), (70,), (70,), (70,)), ((15600,), (15600,), (15600,), (15600,)), ((3900,), (3900,), (3900,), (3900,)), ((975,), (975,), (975,), (975,)), ((260,), (260,), (260,), (260,)), ((16800,), (16800,), (16800,), (16800,)), ((4200,), (4200,), (4200,), (4200,)), ((1050,), (1050,), (1050,), (1050,)), ((273,), (273,), (273,), (273,)), ((77,), (77,), (77,), (77,)), ((12800,), (12800,), (12800,), (12800,)), ((3200,), (3200,), (3200,), (3200,)), ((800,), (800,), (800,), (800,)), ((208,), (208,), (208,), (208,)), ((56,), (56,), (56,), (56,)), ((14400,), (14400,), (14400,), (14400,)), ((3600,), (3600,), (3600,), (3600,)), ((900,), (900,), (900,), (900,)), ((234,), (234,), (234,), (234,)), ((12000,), (12000,), (12000,), (12000,)), ((3000,), (3000,), (3000,), (3000,)), ((750,), (750,), (750,), (750,)), ((195,), (195,), (195,), (195,)), ((14000,), (14000,), (14000,), (14000,)), ((3500,), (3500,), (3500,), (3500,)), ((875,), (875,), (875,), (875,)), ((11200,), (11200,), (11200,), (11200,)), ((2800,), (2800,), (2800,), (2800,)), ((700,), (700,), (700,), (700,)), ((182,), (182,), (182,), (182,)), ((49,), (49,), (49,), (49,)), ((10400,), (10400,), (10400,), (10400,)), ((2600,), (2600,), (2600,), (2600,)), ((650,), (650,), (650,), (650,)), ((169,), (169,), (169,), (169,)), ((16000,), (16000,), (16000,), (16000,)), ((4000,), (4000,), (4000,), (4000,)), ((1000,), (1000,), (1000,), (1000,)), ((16128,), (16128,), (16128,), (16128,)), ((4032,), (4032,), (4032,), (4032,)), ((1008,), (1008,), (1008,), (1008,)), ((252,), (252,), (252,), (252,)), ((66,), (66,), (66,), (66,)), ((10000,), (10000,), (10000,), (10000,)), ((2500,), (2500,), (2500,), (2500,)), ((625,), (625,), (625,), (625,)), ((16400,), (16400,), (16400,), (16400,)), ((4100,), (4100,), (4100,), (4100,)), ((1025,), (1025,), (1025,), (1025,)), ((14800,), (14800,), (14800,), (14800,)), ((3700,), (3700,), (3700,), (3700,)), ((925,), (925,), (925,), (925,)), ((12768,), (12768,), (12768,), (12768,)), ((3192,), (3192,), (3192,), (3192,)), ((798,), (798,), (798,), (798,)), ((210,), (210,), (210,), (210,)), ((55,), (55,), (55,), (55,)), ((13200,), (13200,), (13200,), (13200,)), ((3300,), (3300,), (3300,), (3300,)), ((825,), (825,), (825,), (825,)), ((12400,), (12400,), (12400,), (12400,)), ((3100,), (3100,), (3100,), (3100,)), ((775,), (775,), (775,), (775,)), ((14784,), (14784,), (14784,), (14784,)), ((3696,), (3696,), (3696,), (3696,)), ((924,), (924,), (924,), (924,)), ((231,), (231,), (231,), (231,)), ((10800,), (10800,), (10800,), (10800,)), ((2700,), (2700,), (2700,), (2700,)), ((675,), (675,), (675,), (675,)), ((13440,), (13440,), (13440,), (13440,)), ((3360,), (3360,), (3360,), (3360,)), ((840,), (840,), (840,), (840,)), ((15456,), (15456,), (15456,), (15456,)), ((3864,), (3864,), (3864,), (3864,)), ((966,), (966,), (966,), (966,)), ((14112,), (14112,), (14112,), (14112,)), ((3528,), (3528,), (3528,), (3528,)), ((882,), (882,), (882,), (882,)), ((11600,), (11600,), (11600,), (11600,)), ((2900,), (2900,), (2900,), (2900,)), ((725,), (725,), (725,), (725,)), ((12096,), (12096,), (12096,), (12096,)), ((3024,), (3024,), (3024,), (3024,)), ((756,), (756,), (756,), (756,)), ((189,), (189,), (189,), (189,)), ((7392,), (7392,), (7392,), (7392,)), ((1848,), (1848,), (1848,), (1848,)), ((462,), (462,), (462,), (462,)), ((126,), (126,), (126,), (126,)), ((33,), (33,), (33,), (33,)), ((8736,), (8736,), (8736,), (8736,)), ((2184,), (2184,), (2184,), (2184,)), ((546,), (546,), (546,), (546,)), ((147,), (147,), (147,), (147,)), ((44,), (44,), (44,), (44,)), ((10080,), (10080,), (10080,), (10080,)), ((2520,), (2520,), (2520,), (2520,)), ((630,), (630,), (630,), (630,)), ((168,), (168,), (168,), (168,)), ((10752,), (10752,), (10752,), (10752,)), ((2688,), (2688,), (2688,), (2688,)), ((672,), (672,), (672,), (672,)), ((8064,), (8064,), (8064,), (8064,)), ((2016,), (2016,), (2016,), (2016,)), ((504,), (504,), (504,), (504,)), ((9408,), (9408,), (9408,), (9408,)), ((2352,), (2352,), (2352,), (2352,)), ((588,), (588,), (588,), (588,)), ((11424,), (11424,), (11424,), (11424,)), ((2856,), (2856,), (2856,), (2856,)), ((714,), (714,), (714,), (714,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(13600,), (3400,), (850,), (221,), (63,), (163206,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(13600,), (3400,), (850,), (221,), (63,), (163206,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(13600, 9), (3400, 9), (850, 9), (221, 9), (63, 9)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(13600, 1), (3400, 1), (850, 1), (221, 1), (63, 1)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((122400, 4), (30600, 4), (7650, 4), (1989, 4), (567, 4)), ((0, 4), (0, 4), (0, 4), (0, 4), (0, 4)), ((0,), (0,), (0,), (0,), (0,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((122400,), (30600,), (7650,), (1989,), (567,))],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'any': dict(
        name=["any"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (163206,), (5, 163206, 2), (5, 163206), (133,), (13,), (13, 163206, 2), (13, 163206), (335,), (244800, 4), (61200, 4), (15300, 4), (3978, 4), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (163206,), (5, 163206, 2), (5, 163206), (133,), (13,), (13, 163206, 2), (13, 163206), (335,), (244800, 4), (61200, 4), (15300, 4), (3978, 4), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (163206,), (5, 163206), (13,), (13, 163206), (244800, 80), (244800, 4), (61200, 80), (61200, 4), (15300, 80), (15300, 4), (3978, 80), (3978, 4), (1134, 80), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (163206,), (5, 163206), (13,), (13, 163206), (244800, 1), (244800, 4), (61200, 1), (61200, 4), (15300, 1), (15300, 4), (3978, 1), (3978, 4), (1134, 1), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 1, 2), (5, 163206), (13, 1, 2), (13, 163206)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 163206, 2), (1,), (1, 163206, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'minimum': dict(
        name=["minimum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 1, 2), (13, 1, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 163206, 2), (1, 163206, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 0],
            max=[None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 163206, 2), (13, 163206, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 163206), (133,), (13, 163206), (335,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5, 163206), (133,), (13, 163206), (335,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0, 1, 0, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 163206), (5, 163206), (13, 163206), (13, 163206)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0.5, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,), (163206,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'lt': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.4],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(127,), (331,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(133,), (335,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'unique': dict(
        name=["unique"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(133,), (162828,), (335,), (162198,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(163206,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(133,), (335,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(133, 4), (335, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 4), (1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(133, 4), (335, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 4), (1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((163206,), (163206,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'stack_2': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((163206,), (163206,)), ((163206, 4), (163206, 4))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 720, 100, 136), (2, 36, 100, 136), (2, 720, 50, 68), (2, 36, 50, 68), (2, 720, 25, 34), (2, 36, 25, 34), (2, 720, 13, 17), (2, 36, 13, 17), (2, 720, 7, 9), (2, 36, 7, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(244800, 80), (244800, 4), (61200, 80), (61200, 4), (15300, 80), (15300, 4), (3978, 80), (3978, 4), (1134, 80), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[468.0000001192093],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'abs': dict(
        name=["abs"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(244800, 4), (61200, 4), (15300, 4), (3978, 4), (1134, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1134, 80), (3978, 80), (15300, 80), (61200, 80), (244800, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1134, 80), (3978, 80), (15300, 80), (61200, 80), (244800, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(26)],
            lr=[1.000000000000001e-05 for i in range(26)],
            momentum=[0.9 for i in range(26)],
            weight_decay=[0.0001 for i in range(26)],
            dampening=[0 for i in range(26)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 2048, 1, 1), (256, 2048, 3, 3), (720, 256, 3, 3), (720,), (36, 256, 3, 3), (36,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 2048, 1, 1), (256, 2048, 3, 3), (720, 256, 3, 3), (720,), (36, 256, 3, 3), (36,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'permute_1': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(36, 100, 152), (720, 100, 152), (36, 50, 76), (720, 50, 76), (36, 25, 38), (720, 25, 38), (36, 13, 19), (720, 13, 19), (36, 7, 10), (720, 7, 10), (36, 100, 156), (720, 100, 156), (36, 50, 78), (720, 50, 78), (36, 25, 39), (720, 25, 39), (36, 13, 20), (720, 13, 20), (36, 100, 136), (720, 100, 136), (36, 50, 68), (720, 50, 68), (36, 25, 34), (720, 25, 34), (36, 13, 17), (720, 13, 17), (36, 7, 9), (720, 7, 9), (36, 100, 168), (720, 100, 168), (36, 50, 84), (720, 50, 84), (36, 25, 42), (720, 25, 42), (36, 13, 21), (720, 13, 21), (36, 7, 11), (720, 7, 11), (36, 100, 128), (720, 100, 128), (36, 50, 64), (720, 50, 64), (36, 25, 32), (720, 25, 32), (36, 13, 16), (720, 13, 16), (36, 7, 8), (720, 7, 8), (36, 152, 100), (720, 152, 100), (36, 76, 50), (720, 76, 50), (36, 38, 25), (720, 38, 25), (36, 19, 13), (720, 19, 13), (36, 10, 7), (720, 10, 7), (36, 136, 100), (720, 136, 100), (36, 68, 50), (720, 68, 50), (36, 34, 25), (720, 34, 25), (36, 17, 13), (720, 17, 13), (36, 9, 7), (720, 9, 7), (36, 144, 100), (720, 144, 100), (36, 72, 50), (720, 72, 50), (36, 36, 25), (720, 36, 25), (36, 18, 13), (720, 18, 13), (36, 100, 120), (720, 100, 120), (36, 50, 60), (720, 50, 60), (36, 25, 30), (720, 25, 30), (36, 13, 15), (720, 13, 15), (36, 100, 140), (720, 100, 140), (36, 50, 70), (720, 50, 70), (36, 25, 35), (720, 25, 35), (36, 13, 18), (720, 13, 18), (36, 112, 100), (720, 112, 100), (36, 56, 50), (720, 56, 50), (36, 28, 25), (720, 28, 25), (36, 14, 13), (720, 14, 13), (36, 7, 7), (720, 7, 7), (36, 104, 100), (720, 104, 100), (36, 52, 50), (720, 52, 50), (36, 26, 25), (720, 26, 25), (36, 13, 13), (720, 13, 13), (36, 100, 160), (720, 100, 160), (36, 50, 80), (720, 50, 80), (36, 25, 40), (720, 25, 40), (36, 100, 144), (720, 100, 144), (36, 50, 72), (720, 50, 72), (36, 25, 36), (720, 25, 36), (36, 96, 168), (720, 96, 168), (36, 48, 84), (720, 48, 84), (36, 24, 42), (720, 24, 42), (36, 12, 21), (720, 12, 21), (36, 6, 11), (720, 6, 11), (36, 100, 100), (720, 100, 100), (36, 50, 50), (720, 50, 50), (36, 25, 25), (720, 25, 25), (36, 164, 100), (720, 164, 100), (36, 82, 50), (720, 82, 50), (36, 41, 25), (720, 41, 25), (36, 21, 13), (720, 21, 13), (36, 11, 7), (720, 11, 7), (36, 100, 148), (720, 100, 148), (36, 50, 74), (720, 50, 74), (36, 25, 37), (720, 25, 37), (36, 100, 164), (720, 100, 164), (36, 50, 82), (720, 50, 82), (36, 25, 41), (720, 25, 41), (36, 76, 168), (720, 76, 168), (36, 38, 84), (720, 38, 84), (36, 19, 42), (720, 19, 42), (36, 10, 21), (720, 10, 21), (36, 5, 11), (720, 5, 11), (36, 156, 100), (720, 156, 100), (36, 78, 50), (720, 78, 50), (36, 39, 25), (720, 39, 25), (36, 20, 13), (720, 20, 13), (36, 140, 100), (720, 140, 100), (36, 70, 50), (720, 70, 50), (36, 35, 25), (720, 35, 25), (36, 100, 104), (720, 100, 104), (36, 50, 52), (720, 50, 52), (36, 25, 26), (720, 25, 26), (36, 100, 132), (720, 100, 132), (36, 50, 66), (720, 50, 66), (36, 25, 33), (720, 25, 33), (36, 124, 100), (720, 124, 100), (36, 62, 50), (720, 62, 50), (36, 31, 25), (720, 31, 25), (36, 16, 13), (720, 16, 13), (36, 8, 7), (720, 8, 7), (36, 168, 96), (720, 168, 96), (36, 84, 48), (720, 84, 48), (36, 42, 24), (720, 42, 24), (36, 21, 12), (720, 21, 12), (36, 11, 6), (720, 11, 6), (36, 148, 100), (720, 148, 100), (36, 74, 50), (720, 74, 50), (36, 37, 25), (720, 37, 25), (36, 100, 124), (720, 100, 124), (36, 50, 62), (720, 50, 62), (36, 25, 31), (720, 25, 31), (36, 160, 100), (720, 160, 100), (36, 80, 50), (720, 80, 50), (36, 40, 25), (720, 40, 25), (36, 88, 168), (720, 88, 168), (36, 44, 84), (720, 44, 84), (36, 22, 42), (720, 22, 42), (36, 11, 21), (720, 11, 21), (36, 108, 100), (720, 108, 100), (36, 54, 50), (720, 54, 50), (36, 27, 25), (720, 27, 25), (36, 100, 108), (720, 100, 108), (36, 50, 54), (720, 50, 54), (36, 25, 27), (720, 25, 27), (36, 13, 14), (720, 13, 14), (36, 132, 100), (720, 132, 100), (36, 66, 50), (720, 66, 50), (36, 33, 25), (720, 33, 25), (36, 80, 168), (720, 80, 168), (36, 40, 84), (720, 40, 84), (36, 20, 42), (720, 20, 42), (36, 168, 100), (720, 168, 100), (36, 84, 50), (720, 84, 50), (36, 42, 25), (720, 42, 25), (36, 92, 168), (720, 92, 168), (36, 46, 84), (720, 46, 84), (36, 23, 42), (720, 23, 42), (36, 84, 168), (720, 84, 168), (36, 42, 84), (720, 42, 84), (36, 21, 42), (720, 21, 42), (36, 128, 100), (720, 128, 100), (36, 64, 50), (720, 64, 50), (36, 32, 25), (720, 32, 25), (36, 100, 116), (720, 100, 116), (36, 50, 58), (720, 50, 58), (36, 25, 29), (720, 25, 29), (36, 168, 76), (720, 168, 76), (36, 84, 38), (720, 84, 38), (36, 42, 19), (720, 42, 19), (36, 21, 10), (720, 21, 10), (36, 11, 5), (720, 11, 5), (36, 100, 112), (720, 100, 112), (36, 50, 56), (720, 50, 56), (36, 25, 28), (720, 25, 28), (36, 72, 168), (720, 72, 168), (36, 36, 84), (720, 36, 84), (36, 18, 42), (720, 18, 42), (36, 9, 21), (720, 9, 21), (36, 168, 80), (720, 168, 80), (36, 84, 40), (720, 84, 40), (36, 42, 20), (720, 42, 20), (36, 120, 100), (720, 120, 100), (36, 60, 50), (720, 60, 50), (36, 30, 25), (720, 30, 25), (36, 15, 13), (720, 15, 13), (36, 44, 168), (720, 44, 168), (36, 22, 84), (720, 22, 84), (36, 11, 42), (720, 11, 42), (36, 6, 21), (720, 6, 21), (36, 3, 11), (720, 3, 11), (36, 52, 168), (720, 52, 168), (36, 26, 84), (720, 26, 84), (36, 13, 42), (720, 13, 42), (36, 7, 21), (720, 7, 21), (36, 4, 11), (720, 4, 11), (36, 60, 168), (720, 60, 168), (36, 30, 84), (720, 30, 84), (36, 15, 42), (720, 15, 42), (36, 8, 21), (720, 8, 21), (36, 116, 100), (720, 116, 100), (36, 58, 50), (720, 58, 50), (36, 29, 25), (720, 29, 25), (36, 168, 88), (720, 168, 88), (36, 84, 44), (720, 84, 44), (36, 42, 22), (720, 42, 22), (36, 21, 11), (720, 21, 11), (36, 64, 168), (720, 64, 168), (36, 32, 84), (720, 32, 84), (36, 16, 42), (720, 16, 42), (36, 48, 168), (720, 48, 168), (36, 24, 84), (720, 24, 84), (36, 12, 42), (720, 12, 42), (36, 168, 64), (720, 168, 64), (36, 84, 32), (720, 84, 32), (36, 42, 16), (720, 42, 16), (36, 21, 8), (720, 21, 8), (36, 11, 4), (720, 11, 4), (36, 56, 168), (720, 56, 168), (36, 28, 84), (720, 28, 84), (36, 14, 42), (720, 14, 42), (36, 68, 168), (720, 68, 168), (36, 34, 84), (720, 34, 84), (36, 17, 42), (720, 17, 42), (36, 168, 92), (720, 168, 92), (36, 84, 46), (720, 84, 46), (36, 42, 23), (720, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(136800, 80), (34200, 80), (8550, 80), (2223, 80), (630, 80), (140400, 80), (35100, 80), (8775, 80), (2340, 80), (122400, 80), (30600, 80), (7650, 80), (1989, 80), (567, 80), (151200, 80), (37800, 80), (9450, 80), (2457, 80), (693, 80), (115200, 80), (28800, 80), (7200, 80), (1872, 80), (504, 80), (129600, 80), (32400, 80), (8100, 80), (2106, 80), (108000, 80), (27000, 80), (6750, 80), (1755, 80), (126000, 80), (31500, 80), (7875, 80), (100800, 80), (25200, 80), (6300, 80), (1638, 80), (441, 80), (93600, 80), (23400, 80), (5850, 80), (1521, 80), (144000, 80), (36000, 80), (9000, 80), (145152, 80), (36288, 80), (9072, 80), (2268, 80), (594, 80), (90000, 80), (22500, 80), (5625, 80), (147600, 80), (36900, 80), (9225, 80), (133200, 80), (33300, 80), (8325, 80), (114912, 80), (28728, 80), (7182, 80), (1890, 80), (495, 80), (118800, 80), (29700, 80), (7425, 80), (111600, 80), (27900, 80), (6975, 80), (133056, 80), (33264, 80), (8316, 80), (2079, 80), (97200, 80), (24300, 80), (6075, 80), (120960, 80), (30240, 80), (7560, 80), (139104, 80), (34776, 80), (8694, 80), (127008, 80), (31752, 80), (7938, 80), (104400, 80), (26100, 80), (6525, 80), (108864, 80), (27216, 80), (6804, 80), (1701, 80), (66528, 80), (16632, 80), (4158, 80), (1134, 80), (297, 80), (78624, 80), (19656, 80), (4914, 80), (1323, 80), (396, 80), (90720, 80), (22680, 80), (5670, 80), (1512, 80), (96768, 80), (24192, 80), (6048, 80), (72576, 80), (18144, 80), (4536, 80), (84672, 80), (21168, 80), (5292, 80), (102816, 80), (25704, 80), (6426, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(136800, 80), (34200, 80), (8550, 80), (2223, 80), (630, 80), (140400, 80), (35100, 80), (8775, 80), (2340, 80), (122400, 80), (30600, 80), (7650, 80), (1989, 80), (567, 80), (151200, 80), (37800, 80), (9450, 80), (2457, 80), (693, 80), (115200, 80), (28800, 80), (7200, 80), (1872, 80), (504, 80), (129600, 80), (32400, 80), (8100, 80), (2106, 80), (108000, 80), (27000, 80), (6750, 80), (1755, 80), (126000, 80), (31500, 80), (7875, 80), (100800, 80), (25200, 80), (6300, 80), (1638, 80), (441, 80), (93600, 80), (23400, 80), (5850, 80), (1521, 80), (144000, 80), (36000, 80), (9000, 80), (145152, 80), (36288, 80), (9072, 80), (2268, 80), (594, 80), (90000, 80), (22500, 80), (5625, 80), (147600, 80), (36900, 80), (9225, 80), (133200, 80), (33300, 80), (8325, 80), (114912, 80), (28728, 80), (7182, 80), (1890, 80), (495, 80), (118800, 80), (29700, 80), (7425, 80), (111600, 80), (27900, 80), (6975, 80), (133056, 80), (33264, 80), (8316, 80), (2079, 80), (97200, 80), (24300, 80), (6075, 80), (120960, 80), (30240, 80), (7560, 80), (139104, 80), (34776, 80), (8694, 80), (127008, 80), (31752, 80), (7938, 80), (104400, 80), (26100, 80), (6525, 80), (108864, 80), (27216, 80), (6804, 80), (1701, 80), (66528, 80), (16632, 80), (4158, 80), (1134, 80), (297, 80), (78624, 80), (19656, 80), (4914, 80), (1323, 80), (396, 80), (90720, 80), (22680, 80), (5670, 80), (1512, 80), (96768, 80), (24192, 80), (6048, 80), (72576, 80), (18144, 80), (4536, 80), (84672, 80), (21168, 80), (5292, 80), (102816, 80), (25704, 80), (6426, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'nonzero_1': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(136800, 80), (34200, 80), (8550, 80), (2223, 80), (630, 80), (140400, 80), (35100, 80), (8775, 80), (2340, 80), (122400, 80), (30600, 80), (7650, 80), (1989, 80), (567, 80), (151200, 80), (37800, 80), (9450, 80), (2457, 80), (693, 80), (115200, 80), (28800, 80), (7200, 80), (1872, 80), (504, 80), (129600, 80), (32400, 80), (8100, 80), (2106, 80), (108000, 80), (27000, 80), (6750, 80), (1755, 80), (126000, 80), (31500, 80), (7875, 80), (100800, 80), (25200, 80), (6300, 80), (1638, 80), (441, 80), (93600, 80), (23400, 80), (5850, 80), (1521, 80), (144000, 80), (36000, 80), (9000, 80), (145152, 80), (36288, 80), (9072, 80), (2268, 80), (594, 80), (90000, 80), (22500, 80), (5625, 80), (147600, 80), (36900, 80), (9225, 80), (133200, 80), (33300, 80), (8325, 80), (114912, 80), (28728, 80), (7182, 80), (1890, 80), (495, 80), (118800, 80), (29700, 80), (7425, 80), (111600, 80), (27900, 80), (6975, 80), (133056, 80), (33264, 80), (8316, 80), (2079, 80), (97200, 80), (24300, 80), (6075, 80), (120960, 80), (30240, 80), (7560, 80), (139104, 80), (34776, 80), (8694, 80), (127008, 80), (31752, 80), (7938, 80), (104400, 80), (26100, 80), (6525, 80), (108864, 80), (27216, 80), (6804, 80), (1701, 80), (66528, 80), (16632, 80), (4158, 80), (1134, 80), (297, 80), (78624, 80), (19656, 80), (4914, 80), (1323, 80), (396, 80), (90720, 80), (22680, 80), (5670, 80), (1512, 80), (96768, 80), (24192, 80), (6048, 80), (72576, 80), (18144, 80), (4536, 80), (84672, 80), (21168, 80), (5292, 80), (102816, 80), (25704, 80), (6426, 80)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sort': dict(
        name=["sort"],
        interface=["torch.Tensor"],
        para=dict(
            descending=[True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(0,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(0, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((0,), (0,), (0,), (0,), (0,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[-1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((0, 4), (0, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

}
