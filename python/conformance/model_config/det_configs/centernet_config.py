from ...config import Genfunc
from ...dtype import Dtype

centernet_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1)],
            padding=[(3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 3, 512, 512), (16, 64, 128, 128), (16, 64, 128, 128), (16, 128, 64, 64), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 128, 64, 64), (1, 3, 448, 672), (1, 64, 112, 168), (1, 64, 112, 168), (1, 128, 56, 84), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 128, 56, 84), (1, 3, 256, 384), (1, 64, 64, 96), (1, 64, 64, 96), (1, 128, 32, 48), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 16, 24), (1, 128, 32, 48), (1, 3, 512, 672), (1, 64, 128, 168), (1, 64, 128, 168), (1, 128, 64, 84), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 32, 42), (1, 128, 64, 84), (1, 3, 416, 672), (1, 64, 104, 168), (1, 64, 104, 168), (1, 128, 52, 84), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 26, 42), (1, 128, 52, 84), (1, 3, 672, 448), (1, 64, 168, 112), (1, 64, 168, 112), (1, 128, 84, 56), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 42, 28), (1, 128, 84, 56), (1, 3, 512, 384), (1, 64, 128, 96), (1, 64, 128, 96), (1, 128, 64, 48), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 32, 24), (1, 128, 64, 48), (1, 3, 512, 352), (1, 64, 128, 88), (1, 64, 128, 88), (1, 128, 64, 44), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 32, 22), (1, 128, 64, 44), (1, 3, 448, 512), (1, 64, 112, 128), (1, 64, 112, 128), (1, 128, 56, 64), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 28, 32), (1, 128, 56, 64), (1, 3, 480, 672), (1, 64, 120, 168), (1, 64, 120, 168), (1, 128, 60, 84), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 30, 42), (1, 128, 60, 84), (1, 3, 672, 512), (1, 64, 168, 128), (1, 64, 168, 128), (1, 128, 84, 64), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 42, 32), (1, 128, 84, 64), (1, 3, 512, 480), (1, 64, 128, 120), (1, 64, 128, 120), (1, 128, 64, 60), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 32, 30), (1, 128, 64, 60), (1, 3, 672, 640), (1, 64, 168, 160), (1, 64, 168, 160), (1, 128, 84, 80), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 42, 40), (1, 128, 84, 80), (1, 3, 384, 672), (1, 64, 96, 168), (1, 64, 96, 168), (1, 128, 48, 84), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 24, 42), (1, 128, 48, 84), (1, 3, 384, 512), (1, 64, 96, 128), (1, 64, 96, 128), (1, 128, 48, 64), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 24, 32), (1, 128, 48, 64), (1, 3, 672, 608), (1, 64, 168, 152), (1, 64, 168, 152), (1, 128, 84, 76), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 42, 38), (1, 128, 84, 76), (1, 3, 672, 672), (1, 64, 168, 168), (1, 64, 168, 168), (1, 128, 84, 84), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 42, 42), (1, 128, 84, 84), (1, 3, 672, 416), (1, 64, 168, 104), (1, 64, 168, 104), (1, 128, 84, 52), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 42, 26), (1, 128, 84, 52), (1, 3, 320, 480), (1, 64, 80, 120), (1, 64, 80, 120), (1, 128, 40, 60), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 20, 30), (1, 128, 40, 60), (1, 3, 352, 512), (1, 64, 88, 128), (1, 64, 88, 128), (1, 128, 44, 64), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 22, 32), (1, 128, 44, 64), (1, 3, 320, 672), (1, 64, 80, 168), (1, 64, 80, 168), (1, 128, 40, 84), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 20, 42), (1, 128, 40, 84), (1, 3, 320, 512), (1, 64, 80, 128), (1, 64, 80, 128), (1, 128, 40, 64), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 20, 32), (1, 128, 40, 64), (1, 3, 480, 320), (1, 64, 120, 80), (1, 64, 120, 80), (1, 128, 60, 40), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 30, 20), (1, 128, 60, 40), (1, 3, 672, 480), (1, 64, 168, 120), (1, 64, 168, 120), (1, 128, 84, 60), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 42, 30), (1, 128, 84, 60), (1, 3, 352, 480), (1, 64, 88, 120), (1, 64, 88, 120), (1, 128, 44, 60), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 22, 30), (1, 128, 44, 60), (1, 3, 448, 448), (1, 64, 112, 112), (1, 64, 112, 112), (1, 128, 56, 56), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 28, 28), (1, 128, 56, 56), (1, 3, 640, 672), (1, 64, 160, 168), (1, 64, 160, 168), (1, 128, 80, 84), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 40, 42), (1, 128, 80, 84), (1, 3, 640, 640), (1, 64, 160, 160), (1, 64, 160, 160), (1, 128, 80, 80), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 40, 40), (1, 128, 80, 80), (1, 3, 416, 512), (1, 64, 104, 128), (1, 64, 104, 128), (1, 128, 52, 64), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 26, 32), (1, 128, 52, 64), (1, 3, 544, 672), (1, 64, 136, 168), (1, 64, 136, 168), (1, 128, 68, 84), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 34, 42), (1, 128, 68, 84), (1, 3, 672, 544), (1, 64, 168, 136), (1, 64, 168, 136), (1, 128, 84, 68), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 42, 34), (1, 128, 84, 68), (1, 3, 672, 384), (1, 64, 168, 96), (1, 64, 168, 96), (1, 128, 84, 48), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 42, 24), (1, 128, 84, 48), (1, 3, 192, 320), (1, 64, 48, 80), (1, 64, 48, 80), (1, 128, 24, 40), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 12, 20), (1, 128, 24, 40), (1, 3, 352, 672), (1, 64, 88, 168), (1, 64, 88, 168), (1, 128, 44, 84), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 22, 42), (1, 128, 44, 84), (1, 3, 384, 288), (1, 64, 96, 72), (1, 64, 96, 72), (1, 128, 48, 36), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 24, 18), (1, 128, 48, 36), (1, 3, 512, 512), (1, 64, 128, 128), (1, 64, 128, 128), (1, 128, 64, 64), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 32, 32), (1, 128, 64, 64), (1, 3, 512, 416), (1, 64, 128, 104), (1, 64, 128, 104), (1, 128, 64, 52), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 32, 26), (1, 128, 64, 52), (1, 3, 288, 512), (1, 64, 72, 128), (1, 64, 72, 128), (1, 128, 36, 64), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 18, 32), (1, 128, 36, 64), (1, 3, 512, 320), (1, 64, 128, 80), (1, 64, 128, 80), (1, 128, 64, 40), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 32, 20), (1, 128, 64, 40), (1, 3, 576, 672), (1, 64, 144, 168), (1, 64, 144, 168), (1, 128, 72, 84), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 36, 42), (1, 128, 72, 84), (1, 3, 672, 288), (1, 64, 168, 72), (1, 64, 168, 72), (1, 128, 84, 36), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 42, 18), (1, 128, 84, 36), (1, 3, 640, 480), (1, 64, 160, 120), (1, 64, 160, 120), (1, 128, 80, 60), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 40, 30), (1, 128, 80, 60), (1, 3, 288, 672), (1, 64, 72, 168), (1, 64, 72, 168), (1, 128, 36, 84), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 18, 42), (1, 128, 36, 84), (1, 3, 352, 256), (1, 64, 88, 64), (1, 64, 88, 64), (1, 128, 44, 32), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 22, 16), (1, 128, 44, 32), (1, 3, 192, 224), (1, 64, 48, 56), (1, 64, 48, 56), (1, 128, 24, 28), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 12, 14), (1, 128, 24, 28), (1, 3, 608, 672), (1, 64, 152, 168), (1, 64, 152, 168), (1, 128, 76, 84), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 38, 42), (1, 128, 76, 84), (1, 3, 416, 608), (1, 64, 104, 152), (1, 64, 104, 152), (1, 128, 52, 76), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 26, 38), (1, 128, 52, 76), (1, 3, 672, 320), (1, 64, 168, 80), (1, 64, 168, 80), (1, 128, 84, 40), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 42, 20), (1, 128, 84, 40), (1, 3, 256, 352), (1, 64, 64, 88), (1, 64, 64, 88), (1, 128, 32, 44), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 16, 22), (1, 128, 32, 44), (1, 3, 512, 640), (1, 64, 128, 160), (1, 64, 128, 160), (1, 128, 64, 80), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 32, 40), (1, 128, 64, 80), (1, 3, 608, 416), (1, 64, 152, 104), (1, 64, 152, 104), (1, 128, 76, 52), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 38, 26), (1, 128, 76, 52), (1, 3, 192, 672), (1, 64, 48, 168), (1, 64, 48, 168), (1, 128, 24, 84), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 12, 42), (1, 128, 24, 84), (1, 3, 192, 256), (1, 64, 48, 64), (1, 64, 48, 64), (1, 128, 24, 32), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 256, 12, 16), (1, 512, 6, 8), (1, 256, 12, 16), (1, 128, 24, 32), (1, 3, 192, 512), (1, 64, 48, 128), (1, 64, 48, 128), (1, 128, 24, 64), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 12, 32), (1, 128, 24, 64), (1, 3, 416, 320), (1, 64, 104, 80), (1, 64, 104, 80), (1, 128, 52, 40), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 26, 20), (1, 128, 52, 40), (1, 3, 416, 416), (1, 64, 104, 104), (1, 64, 104, 104), (1, 128, 52, 52), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 26, 26), (1, 128, 52, 52), (1, 3, 224, 352), (1, 64, 56, 88), (1, 64, 56, 88), (1, 128, 28, 44), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 14, 22), (1, 128, 28, 44), (1, 3, 480, 352), (1, 64, 120, 88), (1, 64, 120, 88), (1, 128, 60, 44), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 30, 22), (1, 128, 60, 44), (1, 3, 448, 608), (1, 64, 112, 152), (1, 64, 112, 152), (1, 128, 56, 76), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 28, 38), (1, 128, 56, 76), (1, 3, 384, 608), (1, 64, 96, 152), (1, 64, 96, 152), (1, 128, 48, 76), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 24, 38), (1, 128, 48, 76), (1, 3, 512, 448), (1, 64, 128, 112), (1, 64, 128, 112), (1, 128, 64, 56), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 32, 28), (1, 128, 64, 56), (1, 3, 224, 288), (1, 64, 56, 72), (1, 64, 56, 72), (1, 128, 28, 36), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 14, 18), (1, 128, 28, 36), (1, 3, 672, 576), (1, 64, 168, 144), (1, 64, 168, 144), (1, 128, 84, 72), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 42, 36), (1, 128, 84, 72), (1, 3, 160, 224), (1, 64, 40, 56), (1, 64, 40, 56), (1, 128, 20, 28), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 10, 14), (1, 128, 20, 28), (1, 3, 672, 352), (1, 64, 168, 88), (1, 64, 168, 88), (1, 128, 84, 44), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 42, 22), (1, 128, 84, 44), (1, 3, 256, 512), (1, 64, 64, 128), (1, 64, 64, 128), (1, 128, 32, 64), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 16, 32), (1, 128, 32, 64), (1, 3, 256, 672), (1, 64, 64, 168), (1, 64, 64, 168), (1, 128, 32, 84), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 16, 42), (1, 128, 32, 84), (1, 3, 160, 672), (1, 64, 40, 168), (1, 64, 40, 168), (1, 128, 20, 84), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 10, 42), (1, 128, 20, 84), (1, 3, 320, 416), (1, 64, 80, 104), (1, 64, 80, 104), (1, 128, 40, 52), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 20, 26), (1, 128, 40, 52), (1, 3, 480, 512), (1, 64, 120, 128), (1, 64, 120, 128), (1, 128, 60, 64), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 30, 32), (1, 128, 60, 64), (1, 3, 288, 448), (1, 64, 72, 112), (1, 64, 72, 112), (1, 128, 36, 56), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 18, 28), (1, 128, 36, 56), (1, 3, 192, 288), (1, 64, 48, 72), (1, 64, 48, 72), (1, 128, 24, 36), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 12, 18), (1, 128, 24, 36), (1, 3, 608, 480), (1, 64, 152, 120), (1, 64, 152, 120), (1, 128, 76, 60), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 38, 30), (1, 128, 76, 60), (1, 3, 512, 256), (1, 64, 128, 64), (1, 64, 128, 64), (1, 128, 64, 32), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 32, 16), (1, 128, 64, 32), (1, 3, 480, 640), (1, 64, 120, 160), (1, 64, 120, 160), (1, 128, 60, 80), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 30, 40), (1, 128, 60, 80), (1, 3, 672, 256), (1, 64, 168, 64), (1, 64, 168, 64), (1, 128, 84, 32), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 42, 16), (1, 128, 84, 32), (1, 3, 256, 320), (1, 64, 64, 80), (1, 64, 64, 80), (1, 128, 32, 40), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 256, 16, 20), (1, 512, 8, 10), (1, 256, 16, 20), (1, 128, 32, 40), (1, 3, 448, 544), (1, 64, 112, 136), (1, 64, 112, 136), (1, 128, 56, 68), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 28, 34), (1, 128, 56, 68), (1, 3, 224, 672), (1, 64, 56, 168), (1, 64, 56, 168), (1, 128, 28, 84), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 14, 42), (1, 128, 28, 84), (1, 3, 640, 416), (1, 64, 160, 104), (1, 64, 160, 104), (1, 128, 80, 52), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 40, 26), (1, 128, 80, 52), (1, 3, 416, 576), (1, 64, 104, 144), (1, 64, 104, 144), (1, 128, 52, 72), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 26, 36), (1, 128, 52, 72), (1, 3, 416, 640), (1, 64, 104, 160), (1, 64, 104, 160), (1, 128, 52, 80), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 26, 40), (1, 128, 52, 80), (1, 3, 480, 608), (1, 64, 120, 152), (1, 64, 120, 152), (1, 128, 60, 76), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 30, 38), (1, 128, 60, 76), (1, 3, 320, 320), (1, 64, 80, 80), (1, 64, 80, 80), (1, 128, 40, 40), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 256, 20, 20), (1, 512, 10, 10), (1, 256, 20, 20), (1, 128, 40, 40), (1, 3, 352, 448), (1, 64, 88, 112), (1, 64, 88, 112), (1, 128, 44, 56), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 22, 28), (1, 128, 44, 56), (1, 3, 224, 512), (1, 64, 56, 128), (1, 64, 56, 128), (1, 128, 28, 64), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 14, 32), (1, 128, 28, 64), (1, 3, 480, 416), (1, 64, 120, 104), (1, 64, 120, 104), (1, 128, 60, 52), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 30, 26), (1, 128, 60, 52), (1, 3, 544, 384), (1, 64, 136, 96), (1, 64, 136, 96), (1, 128, 68, 48), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 34, 24), (1, 128, 68, 48), (1, 3, 512, 288), (1, 64, 128, 72), (1, 64, 128, 72), (1, 128, 64, 36), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 32, 18), (1, 128, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1.1920928955078125e-07],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 64, 128, 192), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 64, 256, 336), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 64, 208, 336), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 64, 336, 224), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 64, 256, 192), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 64, 256, 176), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 64, 224, 256), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 64, 240, 336), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 64, 336, 256), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 64, 256, 240), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 64, 336, 320), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 64, 192, 336), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 64, 192, 256), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 64, 336, 304), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 64, 336, 336), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 64, 336, 208), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 64, 160, 240), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 64, 176, 256), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 64, 160, 336), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 64, 160, 256), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 64, 240, 160), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 64, 336, 240), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 64, 176, 240), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 64, 224, 224), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 64, 320, 336), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 64, 320, 320), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 64, 208, 256), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 64, 272, 336), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 64, 336, 272), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 64, 336, 192), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 64, 96, 160), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 64, 176, 336), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 64, 192, 144), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 64, 256, 256), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 64, 256, 208), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 64, 144, 256), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 64, 256, 160), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 64, 288, 336), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 64, 336, 144), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 64, 320, 240), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 64, 144, 336), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 64, 176, 128), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 64, 96, 112), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 64, 304, 336), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 64, 208, 304), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 64, 336, 160), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 64, 128, 176), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 64, 256, 320), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 64, 304, 208), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 64, 96, 336), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 512, 6, 8), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 64, 96, 256), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 64, 208, 160), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 64, 208, 208), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 64, 112, 176), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 64, 240, 176), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 64, 224, 304), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 64, 192, 304), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 64, 256, 224), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 64, 112, 144), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 64, 336, 288), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 64, 80, 112), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 64, 336, 176), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 64, 128, 256), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 64, 128, 336), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 64, 80, 336), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 64, 160, 208), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 64, 240, 256), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 64, 144, 224), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 64, 96, 144), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 64, 304, 240), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 64, 256, 128), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 64, 240, 320), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 64, 336, 128), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 64, 224, 272), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 64, 112, 336), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 64, 320, 208), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 64, 208, 288), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 64, 208, 320), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 64, 240, 304), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 64, 176, 224), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 64, 112, 256), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 64, 240, 208), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 64, 272, 192), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 64, 256, 144), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 64, 128, 192), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 64, 256, 336), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 64, 208, 336), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 64, 336, 224), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 64, 256, 192), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 64, 256, 176), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 64, 224, 256), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 64, 240, 336), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 64, 336, 256), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 64, 256, 240), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 64, 336, 320), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 64, 192, 336), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 64, 192, 256), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 64, 336, 304), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 64, 336, 336), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 64, 336, 208), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 64, 160, 240), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 64, 176, 256), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 64, 160, 336), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 64, 160, 256), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 64, 240, 160), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 64, 336, 240), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 64, 176, 240), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 64, 224, 224), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 64, 320, 336), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 64, 320, 320), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 64, 208, 256), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 64, 272, 336), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 64, 336, 272), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 64, 336, 192), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 64, 96, 160), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 64, 176, 336), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 64, 192, 144), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 64, 256, 256), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 64, 256, 208), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 64, 144, 256), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 64, 256, 160), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 64, 288, 336), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 64, 336, 144), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 64, 320, 240), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 64, 144, 336), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 64, 176, 128), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 64, 96, 112), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 64, 304, 336), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 64, 208, 304), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 64, 336, 160), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 64, 128, 176), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 64, 256, 320), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 64, 304, 208), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 64, 96, 336), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 512, 6, 8), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 64, 96, 256), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 64, 208, 160), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 64, 208, 208), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 64, 112, 176), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 64, 240, 176), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 64, 224, 304), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 64, 192, 304), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 64, 256, 224), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 64, 112, 144), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 64, 336, 288), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 64, 80, 112), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 64, 336, 176), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 64, 128, 256), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 64, 128, 336), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 64, 80, 336), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 64, 160, 208), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 64, 240, 256), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 64, 144, 224), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 64, 96, 144), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 64, 304, 240), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 64, 256, 128), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 64, 240, 320), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 64, 336, 128), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 64, 224, 272), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 64, 112, 336), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 64, 320, 208), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 64, 208, 288), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 64, 208, 320), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 64, 240, 304), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 64, 176, 224), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 64, 112, 256), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 64, 240, 208), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 64, 272, 192), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 64, 256, 144), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (1, 64, 224, 336), (1, 64, 128, 192), (1, 64, 256, 336), (1, 64, 208, 336), (1, 64, 336, 224), (1, 64, 256, 192), (1, 64, 256, 176), (1, 64, 224, 256), (1, 64, 240, 336), (1, 64, 336, 256), (1, 64, 256, 240), (1, 64, 336, 320), (1, 64, 192, 336), (1, 64, 192, 256), (1, 64, 336, 304), (1, 64, 336, 336), (1, 64, 336, 208), (1, 64, 160, 240), (1, 64, 176, 256), (1, 64, 160, 336), (1, 64, 160, 256), (1, 64, 240, 160), (1, 64, 336, 240), (1, 64, 176, 240), (1, 64, 224, 224), (1, 64, 320, 336), (1, 64, 320, 320), (1, 64, 208, 256), (1, 64, 272, 336), (1, 64, 336, 272), (1, 64, 336, 192), (1, 64, 96, 160), (1, 64, 176, 336), (1, 64, 192, 144), (1, 64, 256, 256), (1, 64, 256, 208), (1, 64, 144, 256), (1, 64, 256, 160), (1, 64, 288, 336), (1, 64, 336, 144), (1, 64, 320, 240), (1, 64, 144, 336), (1, 64, 176, 128), (1, 64, 96, 112), (1, 64, 304, 336), (1, 64, 208, 304), (1, 64, 336, 160), (1, 64, 128, 176), (1, 64, 256, 320), (1, 64, 304, 208), (1, 64, 96, 336), (1, 64, 96, 128), (1, 64, 96, 256), (1, 64, 208, 160), (1, 64, 208, 208), (1, 64, 112, 176), (1, 64, 240, 176), (1, 64, 224, 304), (1, 64, 192, 304), (1, 64, 256, 224), (1, 64, 112, 144), (1, 64, 336, 288), (1, 64, 80, 112), (1, 64, 336, 176), (1, 64, 128, 256), (1, 64, 128, 336), (1, 64, 80, 336), (1, 64, 160, 208), (1, 64, 240, 256), (1, 64, 144, 224), (1, 64, 96, 144), (1, 64, 304, 240), (1, 64, 256, 128), (1, 64, 240, 320), (1, 64, 336, 128), (1, 64, 128, 160), (1, 64, 224, 272), (1, 64, 112, 336), (1, 64, 320, 208), (1, 64, 208, 288), (1, 64, 208, 320), (1, 64, 240, 304), (1, 64, 160, 160), (1, 64, 176, 224), (1, 64, 112, 256), (1, 64, 240, 208), (1, 64, 272, 192), (1, 64, 256, 144)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv_transpose2d': dict(
        name=["conv_transpose2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)],
            padding=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            output_padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "shape": [(256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 128, 128), (16, 64, 128, 128), (16, 64, 128, 128), (1, 64, 112, 168), (1, 64, 112, 168), (1, 64, 112, 168), (1, 64, 64, 96), (1, 64, 64, 96), (1, 64, 64, 96), (1, 64, 128, 168), (1, 64, 128, 168), (1, 64, 128, 168), (1, 64, 104, 168), (1, 64, 104, 168), (1, 64, 104, 168), (1, 64, 168, 112), (1, 64, 168, 112), (1, 64, 168, 112), (1, 64, 128, 96), (1, 64, 128, 96), (1, 64, 128, 96), (1, 64, 128, 88), (1, 64, 128, 88), (1, 64, 128, 88), (1, 64, 112, 128), (1, 64, 112, 128), (1, 64, 112, 128), (1, 64, 120, 168), (1, 64, 120, 168), (1, 64, 120, 168), (1, 64, 168, 128), (1, 64, 168, 128), (1, 64, 168, 128), (1, 64, 128, 120), (1, 64, 128, 120), (1, 64, 128, 120), (1, 64, 168, 160), (1, 64, 168, 160), (1, 64, 168, 160), (1, 64, 96, 168), (1, 64, 96, 168), (1, 64, 96, 168), (1, 64, 96, 128), (1, 64, 96, 128), (1, 64, 96, 128), (1, 64, 168, 152), (1, 64, 168, 152), (1, 64, 168, 152), (1, 64, 168, 168), (1, 64, 168, 168), (1, 64, 168, 168), (1, 64, 168, 104), (1, 64, 168, 104), (1, 64, 168, 104), (1, 64, 80, 120), (1, 64, 80, 120), (1, 64, 80, 120), (1, 64, 88, 128), (1, 64, 88, 128), (1, 64, 88, 128), (1, 64, 80, 168), (1, 64, 80, 168), (1, 64, 80, 168), (1, 64, 80, 128), (1, 64, 80, 128), (1, 64, 80, 128), (1, 64, 120, 80), (1, 64, 120, 80), (1, 64, 120, 80), (1, 64, 168, 120), (1, 64, 168, 120), (1, 64, 168, 120), (1, 64, 88, 120), (1, 64, 88, 120), (1, 64, 88, 120), (1, 64, 112, 112), (1, 64, 112, 112), (1, 64, 112, 112), (1, 64, 160, 168), (1, 64, 160, 168), (1, 64, 160, 168), (1, 64, 160, 160), (1, 64, 160, 160), (1, 64, 160, 160), (1, 64, 104, 128), (1, 64, 104, 128), (1, 64, 104, 128), (1, 64, 136, 168), (1, 64, 136, 168), (1, 64, 136, 168), (1, 64, 168, 136), (1, 64, 168, 136), (1, 64, 168, 136), (1, 64, 168, 96), (1, 64, 168, 96), (1, 64, 168, 96), (1, 64, 48, 80), (1, 64, 48, 80), (1, 64, 48, 80), (1, 64, 88, 168), (1, 64, 88, 168), (1, 64, 88, 168), (1, 64, 96, 72), (1, 64, 96, 72), (1, 64, 96, 72), (1, 64, 128, 128), (1, 64, 128, 128), (1, 64, 128, 128), (1, 64, 128, 104), (1, 64, 128, 104), (1, 64, 128, 104), (1, 64, 72, 128), (1, 64, 72, 128), (1, 64, 72, 128), (1, 64, 128, 80), (1, 64, 128, 80), (1, 64, 128, 80), (1, 64, 144, 168), (1, 64, 144, 168), (1, 64, 144, 168), (1, 64, 168, 72), (1, 64, 168, 72), (1, 64, 168, 72), (1, 64, 160, 120), (1, 64, 160, 120), (1, 64, 160, 120), (1, 64, 72, 168), (1, 64, 72, 168), (1, 64, 72, 168), (1, 64, 88, 64), (1, 64, 88, 64), (1, 64, 88, 64), (1, 64, 48, 56), (1, 64, 48, 56), (1, 64, 48, 56), (1, 64, 152, 168), (1, 64, 152, 168), (1, 64, 152, 168), (1, 64, 104, 152), (1, 64, 104, 152), (1, 64, 104, 152), (1, 64, 168, 80), (1, 64, 168, 80), (1, 64, 168, 80), (1, 64, 64, 88), (1, 64, 64, 88), (1, 64, 64, 88), (1, 64, 128, 160), (1, 64, 128, 160), (1, 64, 128, 160), (1, 64, 152, 104), (1, 64, 152, 104), (1, 64, 152, 104), (1, 64, 48, 168), (1, 64, 48, 168), (1, 64, 48, 168), (1, 64, 48, 64), (1, 64, 48, 64), (1, 64, 48, 64), (1, 64, 48, 128), (1, 64, 48, 128), (1, 64, 48, 128), (1, 64, 104, 80), (1, 64, 104, 80), (1, 64, 104, 80), (1, 64, 104, 104), (1, 64, 104, 104), (1, 64, 104, 104), (1, 64, 56, 88), (1, 64, 56, 88), (1, 64, 56, 88), (1, 64, 120, 88), (1, 64, 120, 88), (1, 64, 120, 88), (1, 64, 112, 152), (1, 64, 112, 152), (1, 64, 112, 152), (1, 64, 96, 152), (1, 64, 96, 152), (1, 64, 96, 152), (1, 64, 128, 112), (1, 64, 128, 112), (1, 64, 128, 112), (1, 64, 56, 72), (1, 64, 56, 72), (1, 64, 56, 72), (1, 64, 168, 144), (1, 64, 168, 144), (1, 64, 168, 144), (1, 64, 40, 56), (1, 64, 40, 56), (1, 64, 40, 56), (1, 64, 168, 88), (1, 64, 168, 88), (1, 64, 168, 88), (1, 64, 64, 128), (1, 64, 64, 128), (1, 64, 64, 128), (1, 64, 64, 168), (1, 64, 64, 168), (1, 64, 64, 168), (1, 64, 40, 168), (1, 64, 40, 168), (1, 64, 40, 168), (1, 64, 80, 104), (1, 64, 80, 104), (1, 64, 80, 104), (1, 64, 120, 128), (1, 64, 120, 128), (1, 64, 120, 128), (1, 64, 72, 112), (1, 64, 72, 112), (1, 64, 72, 112), (1, 64, 48, 72), (1, 64, 48, 72), (1, 64, 48, 72), (1, 64, 152, 120), (1, 64, 152, 120), (1, 64, 152, 120), (1, 64, 128, 64), (1, 64, 128, 64), (1, 64, 128, 64), (1, 64, 120, 160), (1, 64, 120, 160), (1, 64, 120, 160), (1, 64, 168, 64), (1, 64, 168, 64), (1, 64, 168, 64), (1, 64, 64, 80), (1, 64, 64, 80), (1, 64, 64, 80), (1, 64, 112, 136), (1, 64, 112, 136), (1, 64, 112, 136), (1, 64, 56, 168), (1, 64, 56, 168), (1, 64, 56, 168), (1, 64, 160, 104), (1, 64, 160, 104), (1, 64, 160, 104), (1, 64, 104, 144), (1, 64, 104, 144), (1, 64, 104, 144), (1, 64, 104, 160), (1, 64, 104, 160), (1, 64, 104, 160), (1, 64, 120, 152), (1, 64, 120, 152), (1, 64, 120, 152), (1, 64, 80, 80), (1, 64, 80, 80), (1, 64, 80, 80), (1, 64, 88, 112), (1, 64, 88, 112), (1, 64, 88, 112), (1, 64, 56, 128), (1, 64, 56, 128), (1, 64, 56, 128), (1, 64, 120, 104), (1, 64, 120, 104), (1, 64, 120, 104), (1, 64, 136, 96), (1, 64, 136, 96), (1, 64, 136, 96), (1, 64, 128, 72), (1, 64, 128, 72), (1, 64, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 80, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(25, 1), (), (1, 23), (1, 29), (1, 1), (1, 3), (1, 7), (1, 15), (1, 19), (1, 11), (1, 9), (1, 17), (6, 1), (1, 5), (1, 27), (1, 13), (1, 25), (1, 21), (3, 1), (8, 1), (2, 1), (1, 31), (1, 33), (1, 49), (1, 43), (14, 1), (7, 1), (1, 51), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(25, 1), (), (23, 1), (29, 1), (1, 1), (3, 1), (7, 1), (15, 1), (19, 1), (11, 1), (9, 1), (17, 1), (6, 1), (5, 1), (27, 1), (13, 1), (25, 1), (21, 1), (3, 1), (8, 1), (2, 1), (31, 1), (33, 1), (49, 1), (43, 1), (14, 1), (7, 1), (51, 1), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.25, 0.25, 0.7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.25, 1, 0.25, 1, 1, 1, 1, 1, 0.25, 0.25, 0.25, 1, 1, 1, 1, 0.25, 0.25, 1, 35.0, 4.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(25, 1), (), (), (23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (1, 1), (17, 17), (6, 1), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (3, 1), (8, 1), (2, 1), (31, 31), (33, 33), (49, 49), (43, 43), (14, 1), (7, 1), (51, 51), (), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2, 1.3, 2, 8, 2.4, 29.388888888888893, 46.722222222222214, 0.05555555555555555, 0.5, 2.7222222222222228, 12.5, 20.055555555555554, 6.722222222222221, 4.5, 2, 16.055555555555557, 2, 1.388888888888889, 40.5, 9.388888888888888, 34.72222222222223, 24.5, 2, 2, 2, 53.38888888888889, 60.5, 133.38888888888886, 102.72222222222223, 2, 2, 144.5, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(25, 1), (), (), (), (), (23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (1, 1), (17, 17), (6, 1), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (3, 1), (8, 1), (2, 1), (31, 31), (33, 33), (49, 49), (43, 43), (14, 1), (7, 1), (51, 51), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((25, 1), (25, 1)), ((1, 1), (1, 1)), ((6, 1), (6, 1)), ((3, 1), (3, 1)), ((8, 1), (8, 1)), ((2, 1), (2, 1)), ((14, 1), (14, 1)), ((7, 1), (7, 1)), ((1, 100, 4), (1, 100, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1, 23), (23, 1), (1, 29), (29, 1), (1, 1), (1, 3), (3, 1), (1, 7), (7, 1), (1, 15), (15, 1), (1, 19), (19, 1), (1, 11), (11, 1), (1, 9), (9, 1), (1, 17), (17, 1), (1, 5), (5, 1), (1, 27), (27, 1), (1, 13), (13, 1), (1, 25), (25, 1), (1, 21), (21, 1), (1, 31), (31, 1), (1, 33), (33, 1), (1, 49), (49, 1), (1, 43), (43, 1), (1, 51), (51, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (1, 23), (23, 1), (1, 29), (29, 1), (1, 1), (1, 3), (3, 1), (1, 7), (7, 1), (1, 15), (15, 1), (1, 19), (19, 1), (1, 11), (11, 1), (1, 9), (9, 1), (1, 17), (17, 1), (1, 5), (5, 1), (1, 27), (27, 1), (1, 13), (13, 1), (1, 25), (25, 1), (1, 21), (21, 1), (1, 31), (31, 1), (1, 33), (33, 1), (1, 49), (49, 1), (1, 43), (43, 1), (1, 51), (51, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'pow': dict(
        name=["pow"],
        interface=["torch.Tensor"],
        para=dict(
            exponent=[2, 4.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 80, 128, 128), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[4, 2, 0.7, 16, -0.6, -0.7, 4.8, 1.1920928955078125e-07, 1.0, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[81.45076158330258, 136.06152388258042, 89.90678766783962, 147.01348524455162, 7.661788992075025, 13.352794431901698, 9.194706380697868, 16.103169649292845, 7.079180708211347, 11.799828893423095, 49.460181664774545, 92.54571294433363, 55.437918367925306, 94.007178499171, 77.67383792279257, 135.1325593398941, 31.866401260526345, 51.383619638825564, 6.105554034613082, 11.611524421437887, 5.685435496804979, 9.998554888258385, 9.13982034385626, 15.692955740181047, 8.329521477224894, 13.605223695934082, 6.095502239560759, 10.318848661324212, 3.2849263259313557, 5.489175027312278, 7.65040907420548, 13.604870406560178, 54.76762656827366, 97.95355244961767, 8.5926299873844, 14.367796046451309, 8.369086611917302, 13.870498064335482, 7.625781410075811, 14.407415049148737, 7.020048042850261, 12.200999134612399, 7.880468498283678, 13.68517768005829, 7.36570956311502, 13.895288429080692, 34.191996890605665, 57.38945300668277, 38.48985414457052, 65.29875004785697, 59.03172147773602, 100.14897106935248, 15.115704667262147, 25.30229829142256, 119.21289713680311, 212.94965294054836, 93.01151852391725, 156.06640463677633, 115.94381300197739, 208.06282855185833, 13.39097767457831, 21.869831978807017, 45.374857416270466, 74.86517177775323, 90.34623612974976, 151.79317497420627, 57.7211609539777, 94.8933714920331, 27.933664489579705, 46.63953882738604, 22.806316049678266, 37.0813183412062, 35.557814250834866, 58.93714789794082, 60.67167179015673, 97.95082072780197, 9.899748103472483, 16.354824537259066, 5.073705446095127, 8.183903260853455, 8.71396344234423, 14.253815792567178, 22.87722517353503, 36.90935899267285, 32.108278189904745, 51.855215541990084, 4.792346519117932, 7.733774242766978, 17.951572121972788, 29.028609271716757, 52.692661743002695, 101.09117075535083, 14.946138445878232, 25.173775921395364, 5.388756292662888, 9.226560019315924, 43.544197868013946, 71.14518743606274, 105.2995633745696, 176.1819017379481, 134.90032489304835, 232.6695786141798, 145.6061481896455, 235.28342283828667, 130.65367508225705, 210.93124990740466, 78.58590604495345, 127.39753848681693, 61.62372233399144, 105.2867921144433, 12.699122024585499, 22.08393384968683, 11.558870972934395, 20.728872550781976, 5.488453970258162, 8.962108957865679, 3.4070933286683456, 5.510262365169903, 15.344314844491265, 24.9469848034036, 4.337835882632413, 7.759873038757575, 5.0280821879610915, 8.108781326113473, 5.217462255161335, 8.43735803555338, 45.44061898253175, 82.42261403697107, 4.020752479385952, 6.522345061971336, 4.617802974259733, 7.453885533458267, 15.598059783003162, 25.22182108391586, 0.9585951813653707, 1.6097544991160349, 7.159357320829465, 11.648106079708436, 100.91395816796108, 173.99414052634071, 68.41867249584539, 112.35955643324247, 42.199944634423844, 78.8112113296706, 24.948621521445077, 45.00753246419565, 24.90951643025337, 44.735471956512036, 71.26192334444812, 134.86309609192577, 87.19337457807502, 140.9113473518013, 83.04393368497786, 134.8924629566085, 8.443700250102097, 13.746911274176396, 14.307948025799659, 23.57958494486014, 133.89514612654935, 234.6340068862568, 131.5314690245266, 235.39893001031248, 87.42845568395481, 154.66465740433398, 155.87938546356924, 253.62330581001424, 2.782041544200231, 4.784082309333784, 9.9129981513482, 17.5995399068169, 7.205209691042623, 12.444446866474218, 5.155897833617645, 8.697482075750878, 5.135861122856283, 8.284584381784414, 3.0140269101871056, 5.115484195885039, 3.383100748445618, 5.585073550977124, 12.42103783047668, 20.710075484229893, 5.421396899512248, 9.39135820569921, 8.45103894228997, 14.507857725764188, 1.7687359974445045, 2.8553829154122097, 3.4252024458481203, 6.313363497754993, 4.890744143853739, 8.685366581288736, 5.397636828965278, 8.709182138158841, 3.9026804980141634, 7.15168476662812, 6.700937905781449, 11.760573154936676, 6.528271155503972, 11.584797572251276, 5.45177104066728, 9.619375988554543, 6.673115885136049, 11.714863939003944, 1.6832424425697385, 3.0615785730681195, 4.457486342549863, 7.345785435177642, 3.177692809299067, 5.235423970802435, 2.771703559536669, 4.470519242477688, 3.820652734002761, 6.172770529373401, 2.8038595778693463, 4.529899448516697],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[123.39771115052135, 141.64003119704543, 10.56205324210046, 12.514346015720193, 10.770260547826426, 53.23079768579112, 81.46270834905073, 107.55142756055123, 51.38208256000456, 6.022779455989426, 7.652299632577651, 13.064276615501072, 13.147307702685808, 8.989048546671336, 4.9735038616272425, 9.975291052374855, 70.17646562862082, 12.993049524168681, 12.870746391367458, 7.809827423728883, 9.744592193948764, 10.961456743314132, 7.604498144441131, 51.316548827778256, 56.501745686527244, 86.65544987008896, 22.80844891256034, 153.3463897011436, 139.68170429811127, 147.0042051375572, 21.14067985488079, 70.35867927981593, 135.32273344674945, 90.08279069660031, 42.359928297751225, 36.27708444002563, 54.6746859987554, 97.6367280487343, 15.314876449838835, 8.176624325708595, 13.7198444181913, 36.85488560250103, 51.64129869076445, 7.717259560445729, 28.81343735765105, 49.17492096142606, 22.274336289301782, 7.752066059976668, 68.69496376645816, 159.03071882894199, 190.79553846984996, 233.9797333638108, 210.25839757308148, 125.61777031435481, 89.07576655578104, 17.602542069391212, 14.686347818837037, 8.667254892585476, 5.467286704341625, 24.410355968638086, 5.55487944409487, 8.10554969839097, 8.373632063102765, 55.57702240964223, 6.4202522399406465, 7.433323304493158, 25.03757308362711, 1.43725459450455, 11.375757213163947, 142.83900875417402, 106.98067235633033, 45.83138519770731, 31.089669762124664, 31.5032075732352, 72.30602418064832, 140.08759815290574, 132.30794601279624, 13.401393624329478, 22.232738185315746, 181.95516918667082, 168.20023874091262, 115.74885680455985, 247.6639450697255, 3.9624280664310647, 12.988398730671694, 10.156914040791683, 7.659576067236695, 8.276113623051593, 4.42054129932391, 5.240404351627333, 18.886400834320163, 7.587534428978724, 12.084491823281322, 2.8465820295748783, 3.941409153554431, 6.402971722177133, 8.694213468701783, 4.596350109181401, 9.068828609238903, 8.56549999837534, 7.271010898582444, 9.024697219968623, 2.0386077256789736, 6.926672106322477, 4.940162616786805, 4.467186287409113, 6.141121958262187, 4.506953483197606, 1e-12, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (16, 80, 128, 128), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'lt': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[-11, -14, 0, -1, -3, -7, -9, -5, -4, -8, -2, -13, -6, -12, -10, -15, -16, -24, -21, -25],
            end=[12, 15, 1, 2, 4, 8, 10, 6, 5, 9, 3, 14, 7, 13, 11, 16, 17, 25, 22, 26],
            dtype=['Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32'],
        ),
    ),

    'neg': dict(
        name=["neg"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[11, 12, 14, 15, 0, 1, 2, 3, 4, 7, 8, 9, 10, 5, 6, 13, 16, 17, 24, 25, 21, 22, 26],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[128],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_3': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[11, 14, 0, 1, 3, 7, 9, 5, 4, 8, 2, 13, 6, 12, 10, 15, 16, 24, 21, 25],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[12, 15, 1, 2, 4, 8, 10, 6, 5, 9, 3, 14, 7, 13, 11, 16, 17, 25, 22, 26],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(23, 23), (29, 29), (1, 1), (3, 3), (7, 7), (15, 15), (19, 19), (11, 11), (9, 9), (17, 17), (5, 5), (27, 27), (13, 13), (25, 25), (21, 21), (31, 31), (33, 33), (49, 49), (43, 43), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_4': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_5': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sum_1': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128), (16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'abs': dict(
        name=["abs"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,), (90,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_5': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(25)],
            lr=[2.000000000000002e-05 for i in range(25)],
            momentum=[0.9 for i in range(25)],
            weight_decay=[0.0001 for i in range(25)],
            dampening=[0 for i in range(25)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_1': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'topk': dict(
        name=["topk"],
        interface=["torch"],
        para=dict(
            k=[100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 1505280), (1, 491520), (1, 1720320), (1, 1397760), (1, 983040), (1, 901120), (1, 1146880), (1, 1612800), (1, 1228800), (1, 2150400), (1, 1290240), (1, 2042880), (1, 2257920), (1, 768000), (1, 1075200), (1, 819200), (1, 844800), (1, 1003520), (1, 2048000), (1, 1064960), (1, 1827840), (1, 307200), (1, 1182720), (1, 552960), (1, 1310720), (1, 737280), (1, 1935360), (1, 967680), (1, 1536000), (1, 450560), (1, 215040), (1, 1264640), (1, 1638400), (1, 645120), (1, 245760), (1, 665600), (1, 865280), (1, 394240), (1, 1361920), (1, 1167360), (1, 322560), (1, 179200), (1, 655360), (1, 860160), (1, 537600), (1, 276480), (1, 1459200), (1, 409600), (1, 1218560), (1, 752640), (1, 1331200), (1, 1198080), (1, 512000), (1, 788480), (1, 573440), (1, 998400), (1, 1044480)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[18816, 168, 6144, 96, 21504, 17472, 112, 12288, 11264, 88, 14336, 128, 20160, 15360, 120, 26880, 160, 16128, 25536, 152, 28224, 104, 9600, 13440, 10240, 80, 10560, 12544, 25600, 13312, 22848, 136, 3840, 14784, 6912, 72, 16384, 9216, 24192, 12096, 19200, 5632, 64, 2688, 56, 15808, 20480, 8064, 3072, 8320, 10816, 4928, 17024, 14592, 4032, 144, 2240, 8192, 10752, 6720, 3456, 18240, 5120, 15232, 9408, 16640, 14976, 6400, 9856, 7168, 12480, 13056],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        interface=["torch"],
        para=dict(
            other=[18816, 168, 6144, 96, 21504, 17472, 112, 12288, 11264, 88, 14336, 128, 20160, 15360, 120, 26880, 160, 16128, 25536, 152, 28224, 104, 9600, 13440, 10240, 80, 10560, 12544, 25600, 13312, 22848, 136, 3840, 14784, 6912, 72, 16384, 9216, 24192, 12096, 19200, 5632, 64, 2688, 56, 15808, 20480, 8064, 3072, 8320, 10816, 4928, 17024, 14592, 4032, 144, 2240, 8192, 10752, 6720, 3456, 18240, 5120, 15232, 9408, 16640, 14976, 6400, 9856, 7168, 12480, 13056],
            rounding_mode=['trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 2, 112, 168), (1, 2, 64, 96), (1, 2, 128, 168), (1, 2, 104, 168), (1, 2, 168, 112), (1, 2, 128, 96), (1, 2, 128, 88), (1, 2, 112, 128), (1, 2, 120, 168), (1, 2, 168, 128), (1, 2, 128, 120), (1, 2, 168, 160), (1, 2, 96, 168), (1, 2, 96, 128), (1, 2, 168, 152), (1, 2, 168, 168), (1, 2, 168, 104), (1, 2, 80, 120), (1, 2, 88, 128), (1, 2, 80, 168), (1, 2, 80, 128), (1, 2, 120, 80), (1, 2, 168, 120), (1, 2, 88, 120), (1, 2, 112, 112), (1, 2, 160, 168), (1, 2, 160, 160), (1, 2, 104, 128), (1, 2, 136, 168), (1, 2, 168, 136), (1, 2, 168, 96), (1, 2, 48, 80), (1, 2, 88, 168), (1, 2, 96, 72), (1, 2, 128, 128), (1, 2, 128, 104), (1, 2, 72, 128), (1, 2, 128, 80), (1, 2, 144, 168), (1, 2, 168, 72), (1, 2, 160, 120), (1, 2, 72, 168), (1, 2, 88, 64), (1, 2, 48, 56), (1, 2, 152, 168), (1, 2, 104, 152), (1, 2, 168, 80), (1, 2, 64, 88), (1, 2, 128, 160), (1, 2, 152, 104), (1, 2, 48, 168), (1, 2, 48, 64), (1, 2, 48, 128), (1, 2, 104, 80), (1, 2, 104, 104), (1, 2, 56, 88), (1, 2, 120, 88), (1, 2, 112, 152), (1, 2, 96, 152), (1, 2, 128, 112), (1, 2, 56, 72), (1, 2, 168, 144), (1, 2, 40, 56), (1, 2, 168, 88), (1, 2, 64, 128), (1, 2, 64, 168), (1, 2, 40, 168), (1, 2, 80, 104), (1, 2, 120, 128), (1, 2, 72, 112), (1, 2, 48, 72), (1, 2, 152, 120), (1, 2, 128, 64), (1, 2, 120, 160), (1, 2, 168, 64), (1, 2, 64, 80), (1, 2, 112, 136), (1, 2, 56, 168), (1, 2, 160, 104), (1, 2, 104, 144), (1, 2, 104, 160), (1, 2, 120, 152), (1, 2, 80, 80), (1, 2, 88, 112), (1, 2, 56, 128), (1, 2, 120, 104), (1, 2, 136, 96), (1, 2, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gather': dict(
        name=["gather"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 18816, 2), (1, 6144, 2), (1, 21504, 2), (1, 17472, 2), (1, 12288, 2), (1, 11264, 2), (1, 14336, 2), (1, 20160, 2), (1, 15360, 2), (1, 26880, 2), (1, 16128, 2), (1, 25536, 2), (1, 28224, 2), (1, 9600, 2), (1, 13440, 2), (1, 10240, 2), (1, 10560, 2), (1, 12544, 2), (1, 25600, 2), (1, 13312, 2), (1, 22848, 2), (1, 3840, 2), (1, 14784, 2), (1, 6912, 2), (1, 16384, 2), (1, 9216, 2), (1, 24192, 2), (1, 12096, 2), (1, 19200, 2), (1, 5632, 2), (1, 2688, 2), (1, 15808, 2), (1, 20480, 2), (1, 8064, 2), (1, 3072, 2), (1, 8320, 2), (1, 10816, 2), (1, 4928, 2), (1, 17024, 2), (1, 14592, 2), (1, 4032, 2), (1, 2240, 2), (1, 8192, 2), (1, 10752, 2), (1, 6720, 2), (1, 3456, 2), (1, 18240, 2), (1, 5120, 2), (1, 15232, 2), (1, 9408, 2), (1, 16640, 2), (1, 14976, 2), (1, 6400, 2), (1, 9856, 2), (1, 7168, 2), (1, 12480, 2), (1, 13056, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["index"],
                    "shape": [(1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2), (1, 100, 2)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 100), (1, 100), (1, 100), (1, 100))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub_6': dict(
        name=["sub"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_5': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
