from ...config import Genfunc
from ...dtype import Dtype

centernet_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1)],
            padding=[(3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 3, 512, 512), (16, 64, 128, 128), (16, 64, 128, 128), (16, 128, 64, 64), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 128, 64, 64), (1, 3, 448, 672), (1, 64, 112, 168), (1, 64, 112, 168), (1, 128, 56, 84), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 128, 56, 84), (1, 3, 256, 384), (1, 64, 64, 96), (1, 64, 64, 96), (1, 128, 32, 48), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 16, 24), (1, 128, 32, 48), (1, 3, 512, 672), (1, 64, 128, 168), (1, 64, 128, 168), (1, 128, 64, 84), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 32, 42), (1, 128, 64, 84), (1, 3, 416, 672), (1, 64, 104, 168), (1, 64, 104, 168), (1, 128, 52, 84), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 26, 42), (1, 128, 52, 84), (1, 3, 672, 448), (1, 64, 168, 112), (1, 64, 168, 112), (1, 128, 84, 56), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 42, 28), (1, 128, 84, 56), (1, 3, 512, 384), (1, 64, 128, 96), (1, 64, 128, 96), (1, 128, 64, 48), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 32, 24), (1, 128, 64, 48), (1, 3, 512, 352), (1, 64, 128, 88), (1, 64, 128, 88), (1, 128, 64, 44), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 32, 22), (1, 128, 64, 44), (1, 3, 448, 512), (1, 64, 112, 128), (1, 64, 112, 128), (1, 128, 56, 64), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 28, 32), (1, 128, 56, 64), (1, 3, 480, 672), (1, 64, 120, 168), (1, 64, 120, 168), (1, 128, 60, 84), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 30, 42), (1, 128, 60, 84), (1, 3, 672, 512), (1, 64, 168, 128), (1, 64, 168, 128), (1, 128, 84, 64), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 42, 32), (1, 128, 84, 64), (1, 3, 512, 480), (1, 64, 128, 120), (1, 64, 128, 120), (1, 128, 64, 60), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 32, 30), (1, 128, 64, 60), (1, 3, 672, 640), (1, 64, 168, 160), (1, 64, 168, 160), (1, 128, 84, 80), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 42, 40), (1, 128, 84, 80), (1, 3, 384, 672), (1, 64, 96, 168), (1, 64, 96, 168), (1, 128, 48, 84), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 24, 42), (1, 128, 48, 84), (1, 3, 384, 512), (1, 64, 96, 128), (1, 64, 96, 128), (1, 128, 48, 64), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 24, 32), (1, 128, 48, 64), (1, 3, 672, 608), (1, 64, 168, 152), (1, 64, 168, 152), (1, 128, 84, 76), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 42, 38), (1, 128, 84, 76), (1, 3, 672, 672), (1, 64, 168, 168), (1, 64, 168, 168), (1, 128, 84, 84), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 42, 42), (1, 128, 84, 84), (1, 3, 672, 416), (1, 64, 168, 104), (1, 64, 168, 104), (1, 128, 84, 52), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 42, 26), (1, 128, 84, 52), (1, 3, 320, 480), (1, 64, 80, 120), (1, 64, 80, 120), (1, 128, 40, 60), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 20, 30), (1, 128, 40, 60), (1, 3, 352, 512), (1, 64, 88, 128), (1, 64, 88, 128), (1, 128, 44, 64), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 22, 32), (1, 128, 44, 64), (1, 3, 320, 672), (1, 64, 80, 168), (1, 64, 80, 168), (1, 128, 40, 84), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 20, 42), (1, 128, 40, 84), (1, 3, 320, 512), (1, 64, 80, 128), (1, 64, 80, 128), (1, 128, 40, 64), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 20, 32), (1, 128, 40, 64), (1, 3, 480, 320), (1, 64, 120, 80), (1, 64, 120, 80), (1, 128, 60, 40), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 30, 20), (1, 128, 60, 40), (1, 3, 672, 480), (1, 64, 168, 120), (1, 64, 168, 120), (1, 128, 84, 60), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 42, 30), (1, 128, 84, 60), (1, 3, 352, 480), (1, 64, 88, 120), (1, 64, 88, 120), (1, 128, 44, 60), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 22, 30), (1, 128, 44, 60), (1, 3, 448, 448), (1, 64, 112, 112), (1, 64, 112, 112), (1, 128, 56, 56), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 28, 28), (1, 128, 56, 56), (1, 3, 640, 672), (1, 64, 160, 168), (1, 64, 160, 168), (1, 128, 80, 84), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 40, 42), (1, 128, 80, 84), (1, 3, 640, 640), (1, 64, 160, 160), (1, 64, 160, 160), (1, 128, 80, 80), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 40, 40), (1, 128, 80, 80), (1, 3, 416, 512), (1, 64, 104, 128), (1, 64, 104, 128), (1, 128, 52, 64), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 26, 32), (1, 128, 52, 64), (1, 3, 544, 672), (1, 64, 136, 168), (1, 64, 136, 168), (1, 128, 68, 84), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 34, 42), (1, 128, 68, 84), (1, 3, 672, 544), (1, 64, 168, 136), (1, 64, 168, 136), (1, 128, 84, 68), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 42, 34), (1, 128, 84, 68), (1, 3, 672, 384), (1, 64, 168, 96), (1, 64, 168, 96), (1, 128, 84, 48), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 42, 24), (1, 128, 84, 48), (1, 3, 192, 320), (1, 64, 48, 80), (1, 64, 48, 80), (1, 128, 24, 40), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 12, 20), (1, 128, 24, 40), (1, 3, 352, 672), (1, 64, 88, 168), (1, 64, 88, 168), (1, 128, 44, 84), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 22, 42), (1, 128, 44, 84), (1, 3, 384, 288), (1, 64, 96, 72), (1, 64, 96, 72), (1, 128, 48, 36), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 24, 18), (1, 128, 48, 36), (1, 3, 512, 512), (1, 64, 128, 128), (1, 64, 128, 128), (1, 128, 64, 64), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 32, 32), (1, 128, 64, 64), (1, 3, 512, 416), (1, 64, 128, 104), (1, 64, 128, 104), (1, 128, 64, 52), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 32, 26), (1, 128, 64, 52), (1, 3, 288, 512), (1, 64, 72, 128), (1, 64, 72, 128), (1, 128, 36, 64), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 18, 32), (1, 128, 36, 64), (1, 3, 512, 320), (1, 64, 128, 80), (1, 64, 128, 80), (1, 128, 64, 40), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 32, 20), (1, 128, 64, 40), (1, 3, 576, 672), (1, 64, 144, 168), (1, 64, 144, 168), (1, 128, 72, 84), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 36, 42), (1, 128, 72, 84), (1, 3, 672, 288), (1, 64, 168, 72), (1, 64, 168, 72), (1, 128, 84, 36), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 42, 18), (1, 128, 84, 36), (1, 3, 640, 480), (1, 64, 160, 120), (1, 64, 160, 120), (1, 128, 80, 60), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 40, 30), (1, 128, 80, 60), (1, 3, 288, 672), (1, 64, 72, 168), (1, 64, 72, 168), (1, 128, 36, 84), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 18, 42), (1, 128, 36, 84), (1, 3, 352, 256), (1, 64, 88, 64), (1, 64, 88, 64), (1, 128, 44, 32), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 22, 16), (1, 128, 44, 32), (1, 3, 192, 224), (1, 64, 48, 56), (1, 64, 48, 56), (1, 128, 24, 28), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 12, 14), (1, 128, 24, 28), (1, 3, 608, 672), (1, 64, 152, 168), (1, 64, 152, 168), (1, 128, 76, 84), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 38, 42), (1, 128, 76, 84), (1, 3, 416, 608), (1, 64, 104, 152), (1, 64, 104, 152), (1, 128, 52, 76), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 26, 38), (1, 128, 52, 76), (1, 3, 672, 320), (1, 64, 168, 80), (1, 64, 168, 80), (1, 128, 84, 40), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 42, 20), (1, 128, 84, 40), (1, 3, 256, 352), (1, 64, 64, 88), (1, 64, 64, 88), (1, 128, 32, 44), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 16, 22), (1, 128, 32, 44), (1, 3, 512, 640), (1, 64, 128, 160), (1, 64, 128, 160), (1, 128, 64, 80), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 32, 40), (1, 128, 64, 80), (1, 3, 608, 416), (1, 64, 152, 104), (1, 64, 152, 104), (1, 128, 76, 52), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 38, 26), (1, 128, 76, 52), (1, 3, 192, 672), (1, 64, 48, 168), (1, 64, 48, 168), (1, 128, 24, 84), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 12, 42), (1, 128, 24, 84), (1, 3, 192, 256), (1, 64, 48, 64), (1, 64, 48, 64), (1, 128, 24, 32), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 256, 12, 16), (1, 512, 6, 8), (1, 256, 12, 16), (1, 128, 24, 32), (1, 3, 192, 512), (1, 64, 48, 128), (1, 64, 48, 128), (1, 128, 24, 64), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 12, 32), (1, 128, 24, 64), (1, 3, 416, 320), (1, 64, 104, 80), (1, 64, 104, 80), (1, 128, 52, 40), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 26, 20), (1, 128, 52, 40), (1, 3, 416, 416), (1, 64, 104, 104), (1, 64, 104, 104), (1, 128, 52, 52), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 26, 26), (1, 128, 52, 52), (1, 3, 224, 352), (1, 64, 56, 88), (1, 64, 56, 88), (1, 128, 28, 44), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 14, 22), (1, 128, 28, 44), (1, 3, 480, 352), (1, 64, 120, 88), (1, 64, 120, 88), (1, 128, 60, 44), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 30, 22), (1, 128, 60, 44), (1, 3, 448, 608), (1, 64, 112, 152), (1, 64, 112, 152), (1, 128, 56, 76), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 28, 38), (1, 128, 56, 76), (1, 3, 384, 608), (1, 64, 96, 152), (1, 64, 96, 152), (1, 128, 48, 76), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 24, 38), (1, 128, 48, 76), (1, 3, 512, 448), (1, 64, 128, 112), (1, 64, 128, 112), (1, 128, 64, 56), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 32, 28), (1, 128, 64, 56), (1, 3, 224, 288), (1, 64, 56, 72), (1, 64, 56, 72), (1, 128, 28, 36), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 14, 18), (1, 128, 28, 36), (1, 3, 672, 576), (1, 64, 168, 144), (1, 64, 168, 144), (1, 128, 84, 72), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 42, 36), (1, 128, 84, 72), (1, 3, 160, 224), (1, 64, 40, 56), (1, 64, 40, 56), (1, 128, 20, 28), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 10, 14), (1, 128, 20, 28), (1, 3, 672, 352), (1, 64, 168, 88), (1, 64, 168, 88), (1, 128, 84, 44), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 42, 22), (1, 128, 84, 44), (1, 3, 256, 512), (1, 64, 64, 128), (1, 64, 64, 128), (1, 128, 32, 64), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 16, 32), (1, 128, 32, 64), (1, 3, 256, 672), (1, 64, 64, 168), (1, 64, 64, 168), (1, 128, 32, 84), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 16, 42), (1, 128, 32, 84), (1, 3, 160, 672), (1, 64, 40, 168), (1, 64, 40, 168), (1, 128, 20, 84), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 10, 42), (1, 128, 20, 84), (1, 3, 320, 416), (1, 64, 80, 104), (1, 64, 80, 104), (1, 128, 40, 52), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 20, 26), (1, 128, 40, 52), (1, 3, 480, 512), (1, 64, 120, 128), (1, 64, 120, 128), (1, 128, 60, 64), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 30, 32), (1, 128, 60, 64), (1, 3, 288, 448), (1, 64, 72, 112), (1, 64, 72, 112), (1, 128, 36, 56), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 18, 28), (1, 128, 36, 56), (1, 3, 192, 288), (1, 64, 48, 72), (1, 64, 48, 72), (1, 128, 24, 36), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 12, 18), (1, 128, 24, 36), (1, 3, 608, 480), (1, 64, 152, 120), (1, 64, 152, 120), (1, 128, 76, 60), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 38, 30), (1, 128, 76, 60), (1, 3, 512, 256), (1, 64, 128, 64), (1, 64, 128, 64), (1, 128, 64, 32), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 32, 16), (1, 128, 64, 32), (1, 3, 480, 640), (1, 64, 120, 160), (1, 64, 120, 160), (1, 128, 60, 80), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 30, 40), (1, 128, 60, 80), (1, 3, 672, 256), (1, 64, 168, 64), (1, 64, 168, 64), (1, 128, 84, 32), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 42, 16), (1, 128, 84, 32), (1, 3, 256, 320), (1, 64, 64, 80), (1, 64, 64, 80), (1, 128, 32, 40), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 256, 16, 20), (1, 512, 8, 10), (1, 256, 16, 20), (1, 128, 32, 40), (1, 3, 448, 544), (1, 64, 112, 136), (1, 64, 112, 136), (1, 128, 56, 68), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 28, 34), (1, 128, 56, 68), (1, 3, 224, 672), (1, 64, 56, 168), (1, 64, 56, 168), (1, 128, 28, 84), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 14, 42), (1, 128, 28, 84), (1, 3, 640, 416), (1, 64, 160, 104), (1, 64, 160, 104), (1, 128, 80, 52), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 40, 26), (1, 128, 80, 52), (1, 3, 416, 576), (1, 64, 104, 144), (1, 64, 104, 144), (1, 128, 52, 72), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 26, 36), (1, 128, 52, 72), (1, 3, 416, 640), (1, 64, 104, 160), (1, 64, 104, 160), (1, 128, 52, 80), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 26, 40), (1, 128, 52, 80), (1, 3, 480, 608), (1, 64, 120, 152), (1, 64, 120, 152), (1, 128, 60, 76), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 30, 38), (1, 128, 60, 76), (1, 3, 320, 320), (1, 64, 80, 80), (1, 64, 80, 80), (1, 128, 40, 40), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 256, 20, 20), (1, 512, 10, 10), (1, 256, 20, 20), (1, 128, 40, 40), (1, 3, 352, 448), (1, 64, 88, 112), (1, 64, 88, 112), (1, 128, 44, 56), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 22, 28), (1, 128, 44, 56), (1, 3, 224, 512), (1, 64, 56, 128), (1, 64, 56, 128), (1, 128, 28, 64), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 14, 32), (1, 128, 28, 64), (1, 3, 480, 416), (1, 64, 120, 104), (1, 64, 120, 104), (1, 128, 60, 52), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 30, 26), (1, 128, 60, 52), (1, 3, 544, 384), (1, 64, 136, 96), (1, 64, 136, 96), (1, 128, 68, 48), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 34, 24), (1, 128, 68, 48), (1, 3, 512, 288), (1, 64, 128, 72), (1, 64, 128, 72), (1, 128, 64, 36), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 32, 18), (1, 128, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1.1920928955078125e-07],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 64, 128, 192), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 64, 256, 336), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 64, 208, 336), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 64, 336, 224), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 64, 256, 192), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 64, 256, 176), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 64, 224, 256), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 64, 240, 336), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 64, 336, 256), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 64, 256, 240), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 64, 336, 320), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 64, 192, 336), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 64, 192, 256), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 64, 336, 304), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 64, 336, 336), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 64, 336, 208), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 64, 160, 240), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 64, 176, 256), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 64, 160, 336), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 64, 160, 256), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 64, 240, 160), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 64, 336, 240), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 64, 176, 240), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 64, 224, 224), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 64, 320, 336), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 64, 320, 320), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 64, 208, 256), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 64, 272, 336), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 64, 336, 272), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 64, 336, 192), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 64, 96, 160), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 64, 176, 336), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 64, 192, 144), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 64, 256, 256), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 64, 256, 208), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 64, 144, 256), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 64, 256, 160), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 64, 288, 336), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 64, 336, 144), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 64, 320, 240), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 64, 144, 336), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 64, 176, 128), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 64, 96, 112), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 64, 304, 336), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 64, 208, 304), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 64, 336, 160), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 64, 128, 176), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 64, 256, 320), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 64, 304, 208), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 64, 96, 336), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 512, 6, 8), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 64, 96, 256), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 64, 208, 160), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 64, 208, 208), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 64, 112, 176), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 64, 240, 176), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 64, 224, 304), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 64, 192, 304), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 64, 256, 224), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 64, 112, 144), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 64, 336, 288), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 64, 80, 112), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 64, 336, 176), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 64, 128, 256), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 64, 128, 336), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 64, 80, 336), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 64, 160, 208), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 64, 240, 256), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 64, 144, 224), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 64, 96, 144), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 64, 304, 240), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 64, 256, 128), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 64, 240, 320), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 64, 336, 128), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 64, 224, 272), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 64, 112, 336), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 64, 320, 208), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 64, 208, 288), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 64, 208, 320), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 64, 240, 304), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 64, 176, 224), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 64, 112, 256), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 64, 240, 208), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 64, 272, 192), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 64, 256, 144), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 64, 128, 192), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 64, 256, 336), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 64, 208, 336), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 64, 336, 224), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 64, 256, 192), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 64, 256, 176), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 64, 224, 256), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 64, 240, 336), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 64, 336, 256), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 64, 256, 240), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 64, 336, 320), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 64, 192, 336), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 64, 192, 256), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 64, 336, 304), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 64, 336, 336), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 64, 336, 208), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 64, 160, 240), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 64, 176, 256), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 64, 160, 336), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 64, 160, 256), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 64, 240, 160), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 64, 336, 240), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 64, 176, 240), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 64, 224, 224), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 64, 320, 336), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 64, 320, 320), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 64, 208, 256), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 64, 272, 336), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 64, 336, 272), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 64, 336, 192), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 64, 96, 160), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 64, 176, 336), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 64, 192, 144), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 64, 256, 256), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 64, 256, 208), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 64, 144, 256), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 64, 256, 160), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 64, 288, 336), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 64, 336, 144), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 64, 320, 240), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 64, 144, 336), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 64, 176, 128), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 64, 96, 112), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 64, 304, 336), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 64, 208, 304), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 64, 336, 160), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 64, 128, 176), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 64, 256, 320), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 64, 304, 208), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 64, 96, 336), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 512, 6, 8), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 64, 96, 256), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 64, 208, 160), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 64, 208, 208), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 64, 112, 176), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 64, 240, 176), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 64, 224, 304), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 64, 192, 304), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 64, 256, 224), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 64, 112, 144), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 64, 336, 288), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 64, 80, 112), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 64, 336, 176), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 64, 128, 256), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 64, 128, 336), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 64, 80, 336), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 64, 160, 208), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 64, 240, 256), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 64, 144, 224), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 64, 96, 144), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 64, 304, 240), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 64, 256, 128), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 64, 240, 320), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 64, 336, 128), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 64, 224, 272), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 64, 112, 336), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 64, 320, 208), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 64, 208, 288), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 64, 208, 320), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 64, 240, 304), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 64, 176, 224), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 64, 112, 256), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 64, 240, 208), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 64, 272, 192), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 64, 256, 144), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (1, 64, 224, 336), (1, 64, 128, 192), (1, 64, 256, 336), (1, 64, 208, 336), (1, 64, 336, 224), (1, 64, 256, 192), (1, 64, 256, 176), (1, 64, 224, 256), (1, 64, 240, 336), (1, 64, 336, 256), (1, 64, 256, 240), (1, 64, 336, 320), (1, 64, 192, 336), (1, 64, 192, 256), (1, 64, 336, 304), (1, 64, 336, 336), (1, 64, 336, 208), (1, 64, 160, 240), (1, 64, 176, 256), (1, 64, 160, 336), (1, 64, 160, 256), (1, 64, 240, 160), (1, 64, 336, 240), (1, 64, 176, 240), (1, 64, 224, 224), (1, 64, 320, 336), (1, 64, 320, 320), (1, 64, 208, 256), (1, 64, 272, 336), (1, 64, 336, 272), (1, 64, 336, 192), (1, 64, 96, 160), (1, 64, 176, 336), (1, 64, 192, 144), (1, 64, 256, 256), (1, 64, 256, 208), (1, 64, 144, 256), (1, 64, 256, 160), (1, 64, 288, 336), (1, 64, 336, 144), (1, 64, 320, 240), (1, 64, 144, 336), (1, 64, 176, 128), (1, 64, 96, 112), (1, 64, 304, 336), (1, 64, 208, 304), (1, 64, 336, 160), (1, 64, 128, 176), (1, 64, 256, 320), (1, 64, 304, 208), (1, 64, 96, 336), (1, 64, 96, 128), (1, 64, 96, 256), (1, 64, 208, 160), (1, 64, 208, 208), (1, 64, 112, 176), (1, 64, 240, 176), (1, 64, 224, 304), (1, 64, 192, 304), (1, 64, 256, 224), (1, 64, 112, 144), (1, 64, 336, 288), (1, 64, 80, 112), (1, 64, 336, 176), (1, 64, 128, 256), (1, 64, 128, 336), (1, 64, 80, 336), (1, 64, 160, 208), (1, 64, 240, 256), (1, 64, 144, 224), (1, 64, 96, 144), (1, 64, 304, 240), (1, 64, 256, 128), (1, 64, 240, 320), (1, 64, 336, 128), (1, 64, 128, 160), (1, 64, 224, 272), (1, 64, 112, 336), (1, 64, 320, 208), (1, 64, 208, 288), (1, 64, 208, 320), (1, 64, 240, 304), (1, 64, 160, 160), (1, 64, 176, 224), (1, 64, 112, 256), (1, 64, 240, 208), (1, 64, 272, 192), (1, 64, 256, 144)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 64, 64, 96), (1, 128, 32, 48), (1, 256, 16, 24), (1, 512, 8, 12), (1, 64, 128, 168), (1, 128, 64, 84), (1, 256, 32, 42), (1, 512, 16, 21), (1, 64, 104, 168), (1, 128, 52, 84), (1, 256, 26, 42), (1, 512, 13, 21), (1, 64, 168, 112), (1, 128, 84, 56), (1, 256, 42, 28), (1, 512, 21, 14), (1, 64, 128, 96), (1, 128, 64, 48), (1, 256, 32, 24), (1, 512, 16, 12), (1, 64, 128, 88), (1, 128, 64, 44), (1, 256, 32, 22), (1, 512, 16, 11), (1, 64, 112, 128), (1, 128, 56, 64), (1, 256, 28, 32), (1, 512, 14, 16), (1, 64, 120, 168), (1, 128, 60, 84), (1, 256, 30, 42), (1, 512, 15, 21), (1, 64, 168, 128), (1, 128, 84, 64), (1, 256, 42, 32), (1, 512, 21, 16), (1, 64, 128, 120), (1, 128, 64, 60), (1, 256, 32, 30), (1, 512, 16, 15), (1, 64, 168, 160), (1, 128, 84, 80), (1, 256, 42, 40), (1, 512, 21, 20), (1, 64, 96, 168), (1, 128, 48, 84), (1, 256, 24, 42), (1, 512, 12, 21), (1, 64, 96, 128), (1, 128, 48, 64), (1, 256, 24, 32), (1, 512, 12, 16), (1, 64, 168, 152), (1, 128, 84, 76), (1, 256, 42, 38), (1, 512, 21, 19), (1, 64, 168, 168), (1, 128, 84, 84), (1, 256, 42, 42), (1, 512, 21, 21), (1, 64, 168, 104), (1, 128, 84, 52), (1, 256, 42, 26), (1, 512, 21, 13), (1, 64, 80, 120), (1, 128, 40, 60), (1, 256, 20, 30), (1, 512, 10, 15), (1, 64, 88, 128), (1, 128, 44, 64), (1, 256, 22, 32), (1, 512, 11, 16), (1, 64, 80, 168), (1, 128, 40, 84), (1, 256, 20, 42), (1, 512, 10, 21), (1, 64, 80, 128), (1, 128, 40, 64), (1, 256, 20, 32), (1, 512, 10, 16), (1, 64, 120, 80), (1, 128, 60, 40), (1, 256, 30, 20), (1, 512, 15, 10), (1, 64, 168, 120), (1, 128, 84, 60), (1, 256, 42, 30), (1, 512, 21, 15), (1, 64, 88, 120), (1, 128, 44, 60), (1, 256, 22, 30), (1, 512, 11, 15), (1, 64, 112, 112), (1, 128, 56, 56), (1, 256, 28, 28), (1, 512, 14, 14), (1, 64, 160, 168), (1, 128, 80, 84), (1, 256, 40, 42), (1, 512, 20, 21), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 64, 104, 128), (1, 128, 52, 64), (1, 256, 26, 32), (1, 512, 13, 16), (1, 64, 136, 168), (1, 128, 68, 84), (1, 256, 34, 42), (1, 512, 17, 21), (1, 64, 168, 136), (1, 128, 84, 68), (1, 256, 42, 34), (1, 512, 21, 17), (1, 64, 168, 96), (1, 128, 84, 48), (1, 256, 42, 24), (1, 512, 21, 12), (1, 64, 48, 80), (1, 128, 24, 40), (1, 256, 12, 20), (1, 512, 6, 10), (1, 64, 88, 168), (1, 128, 44, 84), (1, 256, 22, 42), (1, 512, 11, 21), (1, 64, 96, 72), (1, 128, 48, 36), (1, 256, 24, 18), (1, 512, 12, 9), (1, 64, 128, 128), (1, 128, 64, 64), (1, 256, 32, 32), (1, 512, 16, 16), (1, 64, 128, 104), (1, 128, 64, 52), (1, 256, 32, 26), (1, 512, 16, 13), (1, 64, 72, 128), (1, 128, 36, 64), (1, 256, 18, 32), (1, 512, 9, 16), (1, 64, 128, 80), (1, 128, 64, 40), (1, 256, 32, 20), (1, 512, 16, 10), (1, 64, 144, 168), (1, 128, 72, 84), (1, 256, 36, 42), (1, 512, 18, 21), (1, 64, 168, 72), (1, 128, 84, 36), (1, 256, 42, 18), (1, 512, 21, 9), (1, 64, 160, 120), (1, 128, 80, 60), (1, 256, 40, 30), (1, 512, 20, 15), (1, 64, 72, 168), (1, 128, 36, 84), (1, 256, 18, 42), (1, 512, 9, 21), (1, 64, 88, 64), (1, 128, 44, 32), (1, 256, 22, 16), (1, 512, 11, 8), (1, 64, 48, 56), (1, 128, 24, 28), (1, 256, 12, 14), (1, 512, 6, 7), (1, 64, 152, 168), (1, 128, 76, 84), (1, 256, 38, 42), (1, 512, 19, 21), (1, 64, 104, 152), (1, 128, 52, 76), (1, 256, 26, 38), (1, 512, 13, 19), (1, 64, 168, 80), (1, 128, 84, 40), (1, 256, 42, 20), (1, 512, 21, 10), (1, 64, 64, 88), (1, 128, 32, 44), (1, 256, 16, 22), (1, 512, 8, 11), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 64, 152, 104), (1, 128, 76, 52), (1, 256, 38, 26), (1, 512, 19, 13), (1, 64, 48, 168), (1, 128, 24, 84), (1, 256, 12, 42), (1, 512, 6, 21), (1, 64, 48, 64), (1, 128, 24, 32), (1, 256, 12, 16), (1, 512, 6, 8), (1, 64, 48, 128), (1, 128, 24, 64), (1, 256, 12, 32), (1, 512, 6, 16), (1, 64, 104, 80), (1, 128, 52, 40), (1, 256, 26, 20), (1, 512, 13, 10), (1, 64, 104, 104), (1, 128, 52, 52), (1, 256, 26, 26), (1, 512, 13, 13), (1, 64, 56, 88), (1, 128, 28, 44), (1, 256, 14, 22), (1, 512, 7, 11), (1, 64, 120, 88), (1, 128, 60, 44), (1, 256, 30, 22), (1, 512, 15, 11), (1, 64, 112, 152), (1, 128, 56, 76), (1, 256, 28, 38), (1, 512, 14, 19), (1, 64, 96, 152), (1, 128, 48, 76), (1, 256, 24, 38), (1, 512, 12, 19), (1, 64, 128, 112), (1, 128, 64, 56), (1, 256, 32, 28), (1, 512, 16, 14), (1, 64, 56, 72), (1, 128, 28, 36), (1, 256, 14, 18), (1, 512, 7, 9), (1, 64, 168, 144), (1, 128, 84, 72), (1, 256, 42, 36), (1, 512, 21, 18), (1, 64, 40, 56), (1, 128, 20, 28), (1, 256, 10, 14), (1, 512, 5, 7), (1, 64, 168, 88), (1, 128, 84, 44), (1, 256, 42, 22), (1, 512, 21, 11), (1, 64, 64, 128), (1, 128, 32, 64), (1, 256, 16, 32), (1, 512, 8, 16), (1, 64, 64, 168), (1, 128, 32, 84), (1, 256, 16, 42), (1, 512, 8, 21), (1, 64, 40, 168), (1, 128, 20, 84), (1, 256, 10, 42), (1, 512, 5, 21), (1, 64, 80, 104), (1, 128, 40, 52), (1, 256, 20, 26), (1, 512, 10, 13), (1, 64, 120, 128), (1, 128, 60, 64), (1, 256, 30, 32), (1, 512, 15, 16), (1, 64, 72, 112), (1, 128, 36, 56), (1, 256, 18, 28), (1, 512, 9, 14), (1, 64, 48, 72), (1, 128, 24, 36), (1, 256, 12, 18), (1, 512, 6, 9), (1, 64, 152, 120), (1, 128, 76, 60), (1, 256, 38, 30), (1, 512, 19, 15), (1, 64, 128, 64), (1, 128, 64, 32), (1, 256, 32, 16), (1, 512, 16, 8), (1, 64, 120, 160), (1, 128, 60, 80), (1, 256, 30, 40), (1, 512, 15, 20), (1, 64, 168, 64), (1, 128, 84, 32), (1, 256, 42, 16), (1, 512, 21, 8), (1, 64, 64, 80), (1, 128, 32, 40), (1, 256, 16, 20), (1, 512, 8, 10), (1, 64, 112, 136), (1, 128, 56, 68), (1, 256, 28, 34), (1, 512, 14, 17), (1, 64, 56, 168), (1, 128, 28, 84), (1, 256, 14, 42), (1, 512, 7, 21), (1, 64, 160, 104), (1, 128, 80, 52), (1, 256, 40, 26), (1, 512, 20, 13), (1, 64, 104, 144), (1, 128, 52, 72), (1, 256, 26, 36), (1, 512, 13, 18), (1, 64, 104, 160), (1, 128, 52, 80), (1, 256, 26, 40), (1, 512, 13, 20), (1, 64, 120, 152), (1, 128, 60, 76), (1, 256, 30, 38), (1, 512, 15, 19), (1, 64, 80, 80), (1, 128, 40, 40), (1, 256, 20, 20), (1, 512, 10, 10), (1, 64, 88, 112), (1, 128, 44, 56), (1, 256, 22, 28), (1, 512, 11, 14), (1, 64, 56, 128), (1, 128, 28, 64), (1, 256, 14, 32), (1, 512, 7, 16), (1, 64, 120, 104), (1, 128, 60, 52), (1, 256, 30, 26), (1, 512, 15, 13), (1, 64, 136, 96), (1, 128, 68, 48), (1, 256, 34, 24), (1, 512, 17, 12), (1, 64, 128, 72), (1, 128, 64, 36), (1, 256, 32, 18), (1, 512, 16, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv_transpose2d': dict(
        name=["conv_transpose2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)],
            padding=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            output_padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84), (1, 256, 8, 12), (1, 128, 16, 24), (1, 64, 32, 48), (1, 256, 16, 21), (1, 128, 32, 42), (1, 64, 64, 84), (1, 256, 13, 21), (1, 128, 26, 42), (1, 64, 52, 84), (1, 256, 21, 14), (1, 128, 42, 28), (1, 64, 84, 56), (1, 256, 16, 12), (1, 128, 32, 24), (1, 64, 64, 48), (1, 256, 16, 11), (1, 128, 32, 22), (1, 64, 64, 44), (1, 256, 14, 16), (1, 128, 28, 32), (1, 64, 56, 64), (1, 256, 15, 21), (1, 128, 30, 42), (1, 64, 60, 84), (1, 256, 21, 16), (1, 128, 42, 32), (1, 64, 84, 64), (1, 256, 16, 15), (1, 128, 32, 30), (1, 64, 64, 60), (1, 256, 21, 20), (1, 128, 42, 40), (1, 64, 84, 80), (1, 256, 12, 21), (1, 128, 24, 42), (1, 64, 48, 84), (1, 256, 12, 16), (1, 128, 24, 32), (1, 64, 48, 64), (1, 256, 21, 19), (1, 128, 42, 38), (1, 64, 84, 76), (1, 256, 21, 21), (1, 128, 42, 42), (1, 64, 84, 84), (1, 256, 21, 13), (1, 128, 42, 26), (1, 64, 84, 52), (1, 256, 10, 15), (1, 128, 20, 30), (1, 64, 40, 60), (1, 256, 11, 16), (1, 128, 22, 32), (1, 64, 44, 64), (1, 256, 10, 21), (1, 128, 20, 42), (1, 64, 40, 84), (1, 256, 10, 16), (1, 128, 20, 32), (1, 64, 40, 64), (1, 256, 15, 10), (1, 128, 30, 20), (1, 64, 60, 40), (1, 256, 21, 15), (1, 128, 42, 30), (1, 64, 84, 60), (1, 256, 11, 15), (1, 128, 22, 30), (1, 64, 44, 60), (1, 256, 14, 14), (1, 128, 28, 28), (1, 64, 56, 56), (1, 256, 20, 21), (1, 128, 40, 42), (1, 64, 80, 84), (1, 256, 20, 20), (1, 128, 40, 40), (1, 64, 80, 80), (1, 256, 13, 16), (1, 128, 26, 32), (1, 64, 52, 64), (1, 256, 17, 21), (1, 128, 34, 42), (1, 64, 68, 84), (1, 256, 21, 17), (1, 128, 42, 34), (1, 64, 84, 68), (1, 256, 21, 12), (1, 128, 42, 24), (1, 64, 84, 48), (1, 256, 6, 10), (1, 128, 12, 20), (1, 64, 24, 40), (1, 256, 11, 21), (1, 128, 22, 42), (1, 64, 44, 84), (1, 256, 12, 9), (1, 128, 24, 18), (1, 64, 48, 36), (1, 256, 16, 16), (1, 128, 32, 32), (1, 64, 64, 64), (1, 256, 16, 13), (1, 128, 32, 26), (1, 64, 64, 52), (1, 256, 9, 16), (1, 128, 18, 32), (1, 64, 36, 64), (1, 256, 16, 10), (1, 128, 32, 20), (1, 64, 64, 40), (1, 256, 18, 21), (1, 128, 36, 42), (1, 64, 72, 84), (1, 256, 21, 9), (1, 128, 42, 18), (1, 64, 84, 36), (1, 256, 20, 15), (1, 128, 40, 30), (1, 64, 80, 60), (1, 256, 9, 21), (1, 128, 18, 42), (1, 64, 36, 84), (1, 256, 11, 8), (1, 128, 22, 16), (1, 64, 44, 32), (1, 256, 6, 7), (1, 128, 12, 14), (1, 64, 24, 28), (1, 256, 19, 21), (1, 128, 38, 42), (1, 64, 76, 84), (1, 256, 13, 19), (1, 128, 26, 38), (1, 64, 52, 76), (1, 256, 21, 10), (1, 128, 42, 20), (1, 64, 84, 40), (1, 256, 8, 11), (1, 128, 16, 22), (1, 64, 32, 44), (1, 256, 16, 20), (1, 128, 32, 40), (1, 64, 64, 80), (1, 256, 19, 13), (1, 128, 38, 26), (1, 64, 76, 52), (1, 256, 6, 21), (1, 128, 12, 42), (1, 64, 24, 84), (1, 256, 6, 8), (1, 128, 12, 16), (1, 64, 24, 32), (1, 256, 6, 16), (1, 128, 12, 32), (1, 64, 24, 64), (1, 256, 13, 10), (1, 128, 26, 20), (1, 64, 52, 40), (1, 256, 13, 13), (1, 128, 26, 26), (1, 64, 52, 52), (1, 256, 7, 11), (1, 128, 14, 22), (1, 64, 28, 44), (1, 256, 15, 11), (1, 128, 30, 22), (1, 64, 60, 44), (1, 256, 14, 19), (1, 128, 28, 38), (1, 64, 56, 76), (1, 256, 12, 19), (1, 128, 24, 38), (1, 64, 48, 76), (1, 256, 16, 14), (1, 128, 32, 28), (1, 64, 64, 56), (1, 256, 7, 9), (1, 128, 14, 18), (1, 64, 28, 36), (1, 256, 21, 18), (1, 128, 42, 36), (1, 64, 84, 72), (1, 256, 5, 7), (1, 128, 10, 14), (1, 64, 20, 28), (1, 256, 21, 11), (1, 128, 42, 22), (1, 64, 84, 44), (1, 256, 8, 16), (1, 128, 16, 32), (1, 64, 32, 64), (1, 256, 8, 21), (1, 128, 16, 42), (1, 64, 32, 84), (1, 256, 5, 21), (1, 128, 10, 42), (1, 64, 20, 84), (1, 256, 10, 13), (1, 128, 20, 26), (1, 64, 40, 52), (1, 256, 15, 16), (1, 128, 30, 32), (1, 64, 60, 64), (1, 256, 9, 14), (1, 128, 18, 28), (1, 64, 36, 56), (1, 256, 6, 9), (1, 128, 12, 18), (1, 64, 24, 36), (1, 256, 19, 15), (1, 128, 38, 30), (1, 64, 76, 60), (1, 256, 16, 8), (1, 128, 32, 16), (1, 64, 64, 32), (1, 256, 15, 20), (1, 128, 30, 40), (1, 64, 60, 80), (1, 256, 21, 8), (1, 128, 42, 16), (1, 64, 84, 32), (1, 256, 8, 10), (1, 128, 16, 20), (1, 64, 32, 40), (1, 256, 14, 17), (1, 128, 28, 34), (1, 64, 56, 68), (1, 256, 7, 21), (1, 128, 14, 42), (1, 64, 28, 84), (1, 256, 20, 13), (1, 128, 40, 26), (1, 64, 80, 52), (1, 256, 13, 18), (1, 128, 26, 36), (1, 64, 52, 72), (1, 256, 13, 20), (1, 128, 26, 40), (1, 64, 52, 80), (1, 256, 15, 19), (1, 128, 30, 38), (1, 64, 60, 76), (1, 256, 10, 10), (1, 128, 20, 20), (1, 64, 40, 40), (1, 256, 11, 14), (1, 128, 22, 28), (1, 64, 44, 56), (1, 256, 7, 16), (1, 128, 14, 32), (1, 64, 28, 64), (1, 256, 15, 13), (1, 128, 30, 26), (1, 64, 60, 52), (1, 256, 17, 12), (1, 128, 34, 24), (1, 64, 68, 48), (1, 256, 16, 9), (1, 128, 32, 18), (1, 64, 64, 36)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "shape": [(256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 128, 128), (16, 64, 128, 128), (16, 64, 128, 128), (1, 64, 112, 168), (1, 64, 112, 168), (1, 64, 112, 168), (1, 64, 64, 96), (1, 64, 64, 96), (1, 64, 64, 96), (1, 64, 128, 168), (1, 64, 128, 168), (1, 64, 128, 168), (1, 64, 104, 168), (1, 64, 104, 168), (1, 64, 104, 168), (1, 64, 168, 112), (1, 64, 168, 112), (1, 64, 168, 112), (1, 64, 128, 96), (1, 64, 128, 96), (1, 64, 128, 96), (1, 64, 128, 88), (1, 64, 128, 88), (1, 64, 128, 88), (1, 64, 112, 128), (1, 64, 112, 128), (1, 64, 112, 128), (1, 64, 120, 168), (1, 64, 120, 168), (1, 64, 120, 168), (1, 64, 168, 128), (1, 64, 168, 128), (1, 64, 168, 128), (1, 64, 128, 120), (1, 64, 128, 120), (1, 64, 128, 120), (1, 64, 168, 160), (1, 64, 168, 160), (1, 64, 168, 160), (1, 64, 96, 168), (1, 64, 96, 168), (1, 64, 96, 168), (1, 64, 96, 128), (1, 64, 96, 128), (1, 64, 96, 128), (1, 64, 168, 152), (1, 64, 168, 152), (1, 64, 168, 152), (1, 64, 168, 168), (1, 64, 168, 168), (1, 64, 168, 168), (1, 64, 168, 104), (1, 64, 168, 104), (1, 64, 168, 104), (1, 64, 80, 120), (1, 64, 80, 120), (1, 64, 80, 120), (1, 64, 88, 128), (1, 64, 88, 128), (1, 64, 88, 128), (1, 64, 80, 168), (1, 64, 80, 168), (1, 64, 80, 168), (1, 64, 80, 128), (1, 64, 80, 128), (1, 64, 80, 128), (1, 64, 120, 80), (1, 64, 120, 80), (1, 64, 120, 80), (1, 64, 168, 120), (1, 64, 168, 120), (1, 64, 168, 120), (1, 64, 88, 120), (1, 64, 88, 120), (1, 64, 88, 120), (1, 64, 112, 112), (1, 64, 112, 112), (1, 64, 112, 112), (1, 64, 160, 168), (1, 64, 160, 168), (1, 64, 160, 168), (1, 64, 160, 160), (1, 64, 160, 160), (1, 64, 160, 160), (1, 64, 104, 128), (1, 64, 104, 128), (1, 64, 104, 128), (1, 64, 136, 168), (1, 64, 136, 168), (1, 64, 136, 168), (1, 64, 168, 136), (1, 64, 168, 136), (1, 64, 168, 136), (1, 64, 168, 96), (1, 64, 168, 96), (1, 64, 168, 96), (1, 64, 48, 80), (1, 64, 48, 80), (1, 64, 48, 80), (1, 64, 88, 168), (1, 64, 88, 168), (1, 64, 88, 168), (1, 64, 96, 72), (1, 64, 96, 72), (1, 64, 96, 72), (1, 64, 128, 128), (1, 64, 128, 128), (1, 64, 128, 128), (1, 64, 128, 104), (1, 64, 128, 104), (1, 64, 128, 104), (1, 64, 72, 128), (1, 64, 72, 128), (1, 64, 72, 128), (1, 64, 128, 80), (1, 64, 128, 80), (1, 64, 128, 80), (1, 64, 144, 168), (1, 64, 144, 168), (1, 64, 144, 168), (1, 64, 168, 72), (1, 64, 168, 72), (1, 64, 168, 72), (1, 64, 160, 120), (1, 64, 160, 120), (1, 64, 160, 120), (1, 64, 72, 168), (1, 64, 72, 168), (1, 64, 72, 168), (1, 64, 88, 64), (1, 64, 88, 64), (1, 64, 88, 64), (1, 64, 48, 56), (1, 64, 48, 56), (1, 64, 48, 56), (1, 64, 152, 168), (1, 64, 152, 168), (1, 64, 152, 168), (1, 64, 104, 152), (1, 64, 104, 152), (1, 64, 104, 152), (1, 64, 168, 80), (1, 64, 168, 80), (1, 64, 168, 80), (1, 64, 64, 88), (1, 64, 64, 88), (1, 64, 64, 88), (1, 64, 128, 160), (1, 64, 128, 160), (1, 64, 128, 160), (1, 64, 152, 104), (1, 64, 152, 104), (1, 64, 152, 104), (1, 64, 48, 168), (1, 64, 48, 168), (1, 64, 48, 168), (1, 64, 48, 64), (1, 64, 48, 64), (1, 64, 48, 64), (1, 64, 48, 128), (1, 64, 48, 128), (1, 64, 48, 128), (1, 64, 104, 80), (1, 64, 104, 80), (1, 64, 104, 80), (1, 64, 104, 104), (1, 64, 104, 104), (1, 64, 104, 104), (1, 64, 56, 88), (1, 64, 56, 88), (1, 64, 56, 88), (1, 64, 120, 88), (1, 64, 120, 88), (1, 64, 120, 88), (1, 64, 112, 152), (1, 64, 112, 152), (1, 64, 112, 152), (1, 64, 96, 152), (1, 64, 96, 152), (1, 64, 96, 152), (1, 64, 128, 112), (1, 64, 128, 112), (1, 64, 128, 112), (1, 64, 56, 72), (1, 64, 56, 72), (1, 64, 56, 72), (1, 64, 168, 144), (1, 64, 168, 144), (1, 64, 168, 144), (1, 64, 40, 56), (1, 64, 40, 56), (1, 64, 40, 56), (1, 64, 168, 88), (1, 64, 168, 88), (1, 64, 168, 88), (1, 64, 64, 128), (1, 64, 64, 128), (1, 64, 64, 128), (1, 64, 64, 168), (1, 64, 64, 168), (1, 64, 64, 168), (1, 64, 40, 168), (1, 64, 40, 168), (1, 64, 40, 168), (1, 64, 80, 104), (1, 64, 80, 104), (1, 64, 80, 104), (1, 64, 120, 128), (1, 64, 120, 128), (1, 64, 120, 128), (1, 64, 72, 112), (1, 64, 72, 112), (1, 64, 72, 112), (1, 64, 48, 72), (1, 64, 48, 72), (1, 64, 48, 72), (1, 64, 152, 120), (1, 64, 152, 120), (1, 64, 152, 120), (1, 64, 128, 64), (1, 64, 128, 64), (1, 64, 128, 64), (1, 64, 120, 160), (1, 64, 120, 160), (1, 64, 120, 160), (1, 64, 168, 64), (1, 64, 168, 64), (1, 64, 168, 64), (1, 64, 64, 80), (1, 64, 64, 80), (1, 64, 64, 80), (1, 64, 112, 136), (1, 64, 112, 136), (1, 64, 112, 136), (1, 64, 56, 168), (1, 64, 56, 168), (1, 64, 56, 168), (1, 64, 160, 104), (1, 64, 160, 104), (1, 64, 160, 104), (1, 64, 104, 144), (1, 64, 104, 144), (1, 64, 104, 144), (1, 64, 104, 160), (1, 64, 104, 160), (1, 64, 104, 160), (1, 64, 120, 152), (1, 64, 120, 152), (1, 64, 120, 152), (1, 64, 80, 80), (1, 64, 80, 80), (1, 64, 80, 80), (1, 64, 88, 112), (1, 64, 88, 112), (1, 64, 88, 112), (1, 64, 56, 128), (1, 64, 56, 128), (1, 64, 56, 128), (1, 64, 120, 104), (1, 64, 120, 104), (1, 64, 120, 104), (1, 64, 136, 96), (1, 64, 136, 96), (1, 64, 136, 96), (1, 64, 128, 72), (1, 64, 128, 72), (1, 64, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,), (64,), (80,), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 80, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 1), (), (1, 43), (1, 51), (1, 9), (6, 1), (1, 27), (1, 5), (1, 1), (2, 1), (1, 29), (4, 1), (1, 21), (1, 13), (1, 11), (1, 23), (1, 33), (1, 17), (1, 41), (1, 15), (1, 35), (11, 1), (1, 7), (1, 25), (1, 3), (1, 45), (8, 1), (12, 1), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1), (), (43, 1), (51, 1), (9, 1), (6, 1), (27, 1), (5, 1), (1, 1), (2, 1), (29, 1), (4, 1), (21, 1), (13, 1), (11, 1), (23, 1), (33, 1), (17, 1), (41, 1), (15, 1), (35, 1), (11, 1), (7, 1), (25, 1), (3, 1), (45, 1), (8, 1), (12, 1), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.25, 0.25, 0.7, 1, 1, 1, 0.25, 1, 1, 1, 0.25, 0.25, 1, 0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.25, 1, 1, 1, 1, 0.25, 0.25, 35.0, 4.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 1), (), (), (43, 43), (51, 51), (9, 9), (6, 1), (27, 27), (5, 5), (1, 1), (2, 1), (1, 1), (29, 29), (4, 1), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (11, 1), (7, 7), (25, 25), (3, 3), (45, 45), (8, 1), (12, 1), (), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2, 1.3, 2, 8, 2.4, 102.72222222222223, 144.5, 4.5, 2, 40.5, 1.388888888888889, 0.05555555555555555, 2, 2, 46.722222222222214, 2, 24.5, 9.388888888888888, 6.722222222222221, 29.388888888888893, 60.5, 16.055555555555557, 93.38888888888889, 12.5, 68.05555555555554, 2, 2.7222222222222228, 34.72222222222223, 0.5, 112.5, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 1), (), (), (), (), (43, 43), (51, 51), (9, 9), (6, 1), (27, 27), (5, 5), (1, 1), (2, 1), (1, 1), (29, 29), (4, 1), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (11, 1), (7, 7), (25, 25), (3, 3), (45, 45), (8, 1), (12, 1), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((3, 1), (3, 1)), ((6, 1), (6, 1)), ((2, 1), (2, 1)), ((1, 1), (1, 1)), ((4, 1), (4, 1)), ((11, 1), (11, 1)), ((8, 1), (8, 1)), ((12, 1), (12, 1)), ((1, 100, 4), (1, 100, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1, 43), (43, 1), (1, 51), (51, 1), (1, 9), (9, 1), (1, 27), (27, 1), (1, 5), (5, 1), (1, 1), (1, 29), (29, 1), (1, 21), (21, 1), (1, 13), (13, 1), (1, 11), (11, 1), (1, 23), (23, 1), (1, 33), (33, 1), (1, 17), (17, 1), (1, 41), (41, 1), (1, 15), (15, 1), (1, 35), (35, 1), (1, 7), (7, 1), (1, 25), (25, 1), (1, 3), (3, 1), (1, 45), (45, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (1, 43), (43, 1), (1, 51), (51, 1), (1, 9), (9, 1), (1, 27), (27, 1), (1, 5), (5, 1), (1, 1), (1, 29), (29, 1), (1, 21), (21, 1), (1, 13), (13, 1), (1, 11), (11, 1), (1, 23), (23, 1), (1, 33), (33, 1), (1, 17), (17, 1), (1, 41), (41, 1), (1, 15), (15, 1), (1, 35), (35, 1), (1, 7), (7, 1), (1, 25), (25, 1), (1, 3), (3, 1), (1, 45), (45, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'pow': dict(
        name=["pow"],
        interface=["torch.Tensor"],
        para=dict(
            exponent=[2, 4.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 80, 128, 128), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[4, 2, 0.7, 16, -0.6, -0.7, 4.8, 1.1920928955078125e-07, 1.0, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[131.8334057627277, 212.68159520160648, 154.23408295104556, 248.96181308586262, 31.357426680258897, 51.30903136114294, 106.70559948258338, 183.8889143273732, 17.97435544361136, 30.391729575042287, 3.876386332939129, 6.275117376073223, 8.306234422013233, 14.4268246770962, 6.598430978788513, 11.242686289100003, 1.869427857208099, 3.092052880470352, 35.35978754454433, 64.70077611348646, 3.0640970853558684, 4.941845876565214, 78.82829689029822, 127.29128136875676, 155.06424449844974, 250.4254816806788, 91.23464125881682, 148.5004471794614, 69.40043171245406, 114.13166567335728, 38.489725698879695, 62.56107952932877, 35.769072026988276, 57.82448777740059, 75.1841911418634, 123.13720593051882, 127.84558709875363, 219.63010452235366, 56.14973050984417, 92.36379329856477, 121.67780521216677, 196.23636497219368, 119.15734821156646, 223.14879074846002, 105.09073460586333, 169.9082013176527, 104.29192052838992, 170.12969547157252, 24.589379277285296, 41.46561781690344, 104.06157094179868, 169.8765981344988, 79.65298885046624, 129.65151609217688, 21.12889288973972, 34.21168948277219, 49.062037219154995, 82.57092713426742, 40.23113457824829, 66.59342738072955, 14.660095881503736, 26.28013290952288, 20.532265183710702, 33.10759787585585, 19.257554194515137, 31.42963603805133, 35.474622655344234, 61.60482364941077, 138.92079859131965, 226.94188063797304, 87.3278552174219, 140.87886807023258, 7.690975985060882, 13.013017445883756, 10.61624646595391, 18.011259160396552, 4.034708594632766, 6.505939411001989, 3.583791585201303, 5.815300379675961, 4.970419357383926, 8.027333295309493, 6.815794821700083, 11.098675733047783, 9.383860965437007, 15.686494225103925, 3.030735090116324, 4.932412145714844, 39.569583686526194, 67.0115792815876, 31.057815290599564, 55.71894498353433, 27.48479360290943, 48.86376948977637, 22.876835650390987, 40.955047527365295, 18.014371432969845, 30.831152046646547, 14.575797497243986, 25.58869259975671, 6.829493893907793, 11.014685797727335, 24.99363810654186, 43.95237790424427, 20.948626940759745, 34.65352714168321, 9.335063047436229, 15.800913067280815, 4.579500271716059, 7.912572451195007, 5.7030571084357975, 10.127643381430143, 73.60082237779345, 118.67807032051036, 36.60628888240636, 61.82787030842159, 6.006946357427842, 10.807806330303103, 16.161179283094178, 28.9112896789202, 6.213913460091149, 10.254063242845797, 33.23580009873577, 54.17649650390379, 37.367609728693346, 68.56321928747585, 8.794038955723654, 15.207676926473681, 26.392796591381945, 42.823652744423846],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[212.40431669342317, 248.26748899876117, 49.34411860612798, 151.21416155985523, 26.573523677610602, 6.210870860000199, 11.549160247264394, 9.596292065747729, 2.8857089742695274, 41.88343548431468, 4.938886809852219, 126.81109843976591, 249.40527698406865, 144.86132916517093, 108.24666655519928, 61.25717432472706, 57.4373512307649, 118.11674905046279, 182.50744847813746, 87.53950001285133, 196.14069408207976, 127.7069781399004, 168.7240026270714, 164.97460742111193, 36.55563003032587, 164.40763696905933, 126.46842568527727, 33.84027459360093, 73.23354657361611, 62.01502857800882, 18.649821900854544, 33.106781177893716, 30.437704536017083, 49.34438330815879, 219.21901505686043, 140.70478292332496, 11.35428216624645, 15.583163717778175, 6.50550550439209, 5.719627771603946, 7.994081692230245, 10.814215198811745, 14.197130069040913, 4.813222063069391, 58.30609390053067, 39.411334611992494, 35.865430452770255, 29.225644657801176, 25.93921304584046, 19.71137487747993, 11.008294879423595, 33.64448929849062, 32.32963158040933, 13.770229924650291, 6.449451795834811, 7.467088330941977, 118.6772721369808, 54.242429987395475, 7.551815840269913, 20.693517080716894, 9.63268973588642, 52.64097979622198, 43.792500283207026, 12.359123140607002, 42.127132735328665, 1e-12, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (16, 80, 128, 128), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'lt': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[-21, -25, -4, -13, -2, 0, -14, -10, -6, -5, -11, -16, -8, -20, -7, -17, -3, -12, -1, -22],
            end=[22, 26, 5, 14, 3, 1, 15, 11, 7, 6, 12, 17, 9, 21, 8, 18, 4, 13, 2, 23],
            dtype=['Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32', 'Dtype.float32'],
        ),
    ),

    'neg': dict(
        name=["neg"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[21, 22, 25, 26, 4, 5, 13, 14, 2, 3, 0, 1, 15, 10, 11, 6, 7, 12, 16, 17, 8, 9, 20, 18, 23],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[128],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_3': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[21, 25, 4, 13, 2, 0, 14, 10, 6, 5, 11, 16, 8, 20, 7, 17, 3, 12, 1, 22],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[22, 26, 5, 14, 3, 1, 15, 11, 7, 6, 12, 17, 9, 21, 8, 18, 4, 13, 2, 23],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(43, 43), (51, 51), (9, 9), (27, 27), (5, 5), (1, 1), (29, 29), (21, 21), (13, 13), (11, 11), (23, 23), (33, 33), (17, 17), (41, 41), (15, 15), (35, 35), (7, 7), (25, 25), (3, 3), (45, 45)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_4': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_5': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sum_1': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128), (16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'abs': dict(
        name=["abs"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,), (90,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_5': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(25)],
            lr=[2.000000000000002e-05 for i in range(25)],
            momentum=[0.9 for i in range(25)],
            weight_decay=[0.0001 for i in range(25)],
            dampening=[0 for i in range(25)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_1': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 80, 112, 168), (1, 80, 64, 96), (1, 80, 128, 168), (1, 80, 104, 168), (1, 80, 168, 112), (1, 80, 128, 96), (1, 80, 128, 88), (1, 80, 112, 128), (1, 80, 120, 168), (1, 80, 168, 128), (1, 80, 128, 120), (1, 80, 168, 160), (1, 80, 96, 168), (1, 80, 96, 128), (1, 80, 168, 152), (1, 80, 168, 168), (1, 80, 168, 104), (1, 80, 80, 120), (1, 80, 88, 128), (1, 80, 80, 168), (1, 80, 80, 128), (1, 80, 120, 80), (1, 80, 168, 120), (1, 80, 88, 120), (1, 80, 112, 112), (1, 80, 160, 168), (1, 80, 160, 160), (1, 80, 104, 128), (1, 80, 136, 168), (1, 80, 168, 136), (1, 80, 168, 96), (1, 80, 48, 80), (1, 80, 88, 168), (1, 80, 96, 72), (1, 80, 128, 128), (1, 80, 128, 104), (1, 80, 72, 128), (1, 80, 128, 80), (1, 80, 144, 168), (1, 80, 168, 72), (1, 80, 160, 120), (1, 80, 72, 168), (1, 80, 88, 64), (1, 80, 48, 56), (1, 80, 152, 168), (1, 80, 104, 152), (1, 80, 168, 80), (1, 80, 64, 88), (1, 80, 128, 160), (1, 80, 152, 104), (1, 80, 48, 168), (1, 80, 48, 64), (1, 80, 48, 128), (1, 80, 104, 80), (1, 80, 104, 104), (1, 80, 56, 88), (1, 80, 120, 88), (1, 80, 112, 152), (1, 80, 96, 152), (1, 80, 128, 112), (1, 80, 56, 72), (1, 80, 168, 144), (1, 80, 40, 56), (1, 80, 168, 88), (1, 80, 64, 128), (1, 80, 64, 168), (1, 80, 40, 168), (1, 80, 80, 104), (1, 80, 120, 128), (1, 80, 72, 112), (1, 80, 48, 72), (1, 80, 152, 120), (1, 80, 128, 64), (1, 80, 120, 160), (1, 80, 168, 64), (1, 80, 64, 80), (1, 80, 112, 136), (1, 80, 56, 168), (1, 80, 160, 104), (1, 80, 104, 144), (1, 80, 104, 160), (1, 80, 120, 152), (1, 80, 80, 80), (1, 80, 88, 112), (1, 80, 56, 128), (1, 80, 120, 104), (1, 80, 136, 96), (1, 80, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'topk': dict(
        name=["topk"],
        interface=["torch"],
        para=dict(
            k=[100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 1505280), (1, 491520), (1, 1720320), (1, 1397760), (1, 983040), (1, 901120), (1, 1146880), (1, 1612800), (1, 1228800), (1, 2150400), (1, 1290240), (1, 2042880), (1, 2257920), (1, 768000), (1, 1075200), (1, 819200), (1, 844800), (1, 1003520), (1, 2048000), (1, 1064960), (1, 1827840), (1, 307200), (1, 1182720), (1, 552960), (1, 1310720), (1, 737280), (1, 1935360), (1, 967680), (1, 1536000), (1, 450560), (1, 215040), (1, 1264640), (1, 1638400), (1, 645120), (1, 245760), (1, 665600), (1, 865280), (1, 394240), (1, 1361920), (1, 1167360), (1, 322560), (1, 179200), (1, 655360), (1, 860160), (1, 537600), (1, 276480), (1, 1459200), (1, 409600), (1, 1218560), (1, 752640), (1, 1331200), (1, 1198080), (1, 512000), (1, 788480), (1, 573440), (1, 998400), (1, 1044480)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[18816, 168, 6144, 96, 21504, 17472, 112, 12288, 11264, 88, 14336, 128, 20160, 15360, 120, 26880, 160, 16128, 25536, 152, 28224, 104, 9600, 13440, 10240, 80, 10560, 12544, 25600, 13312, 22848, 136, 3840, 14784, 6912, 72, 16384, 9216, 24192, 12096, 19200, 5632, 64, 2688, 56, 15808, 20480, 8064, 3072, 8320, 10816, 4928, 17024, 14592, 4032, 144, 2240, 8192, 10752, 6720, 3456, 18240, 5120, 15232, 9408, 16640, 14976, 6400, 9856, 7168, 12480, 13056],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        interface=["torch"],
        para=dict(
            other=[18816, 168, 6144, 96, 21504, 17472, 112, 12288, 11264, 88, 14336, 128, 20160, 15360, 120, 26880, 160, 16128, 25536, 152, 28224, 104, 9600, 13440, 10240, 80, 10560, 12544, 25600, 13312, 22848, 136, 3840, 14784, 6912, 72, 16384, 9216, 24192, 12096, 19200, 5632, 64, 2688, 56, 15808, 20480, 8064, 3072, 8320, 10816, 4928, 17024, 14592, 4032, 144, 2240, 8192, 10752, 6720, 3456, 18240, 5120, 15232, 9408, 16640, 14976, 6400, 9856, 7168, 12480, 13056],
            rounding_mode=['trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc', 'trunc'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 2, 112, 168), (1, 2, 64, 96), (1, 2, 128, 168), (1, 2, 104, 168), (1, 2, 168, 112), (1, 2, 128, 96), (1, 2, 128, 88), (1, 2, 112, 128), (1, 2, 120, 168), (1, 2, 168, 128), (1, 2, 128, 120), (1, 2, 168, 160), (1, 2, 96, 168), (1, 2, 96, 128), (1, 2, 168, 152), (1, 2, 168, 168), (1, 2, 168, 104), (1, 2, 80, 120), (1, 2, 88, 128), (1, 2, 80, 168), (1, 2, 80, 128), (1, 2, 120, 80), (1, 2, 168, 120), (1, 2, 88, 120), (1, 2, 112, 112), (1, 2, 160, 168), (1, 2, 160, 160), (1, 2, 104, 128), (1, 2, 136, 168), (1, 2, 168, 136), (1, 2, 168, 96), (1, 2, 48, 80), (1, 2, 88, 168), (1, 2, 96, 72), (1, 2, 128, 128), (1, 2, 128, 104), (1, 2, 72, 128), (1, 2, 128, 80), (1, 2, 144, 168), (1, 2, 168, 72), (1, 2, 160, 120), (1, 2, 72, 168), (1, 2, 88, 64), (1, 2, 48, 56), (1, 2, 152, 168), (1, 2, 104, 152), (1, 2, 168, 80), (1, 2, 64, 88), (1, 2, 128, 160), (1, 2, 152, 104), (1, 2, 48, 168), (1, 2, 48, 64), (1, 2, 48, 128), (1, 2, 104, 80), (1, 2, 104, 104), (1, 2, 56, 88), (1, 2, 120, 88), (1, 2, 112, 152), (1, 2, 96, 152), (1, 2, 128, 112), (1, 2, 56, 72), (1, 2, 168, 144), (1, 2, 40, 56), (1, 2, 168, 88), (1, 2, 64, 128), (1, 2, 64, 168), (1, 2, 40, 168), (1, 2, 80, 104), (1, 2, 120, 128), (1, 2, 72, 112), (1, 2, 48, 72), (1, 2, 152, 120), (1, 2, 128, 64), (1, 2, 120, 160), (1, 2, 168, 64), (1, 2, 64, 80), (1, 2, 112, 136), (1, 2, 56, 168), (1, 2, 160, 104), (1, 2, 104, 144), (1, 2, 104, 160), (1, 2, 120, 152), (1, 2, 80, 80), (1, 2, 88, 112), (1, 2, 56, 128), (1, 2, 120, 104), (1, 2, 136, 96), (1, 2, 128, 72)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gather': dict(
        name=["gather"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            index
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 18816, 2), (1, 6144, 2), (1, 21504, 2), (1, 17472, 2), (1, 12288, 2), (1, 11264, 2), (1, 14336, 2), (1, 20160, 2), (1, 15360, 2), (1, 26880, 2), (1, 16128, 2), (1, 25536, 2), (1, 28224, 2), (1, 9600, 2), (1, 13440, 2), (1, 10240, 2), (1, 10560, 2), (1, 12544, 2), (1, 25600, 2), (1, 13312, 2), (1, 22848, 2), (1, 3840, 2), (1, 14784, 2), (1, 6912, 2), (1, 16384, 2), (1, 9216, 2), (1, 24192, 2), (1, 12096, 2), (1, 19200, 2), (1, 5632, 2), (1, 2688, 2), (1, 15808, 2), (1, 20480, 2), (1, 8064, 2), (1, 3072, 2), (1, 8320, 2), (1, 10816, 2), (1, 4928, 2), (1, 17024, 2), (1, 14592, 2), (1, 4032, 2), (1, 2240, 2), (1, 8192, 2), (1, 10752, 2), (1, 6720, 2), (1, 3456, 2), (1, 18240, 2), (1, 5120, 2), (1, 15232, 2), (1, 9408, 2), (1, 16640, 2), (1, 14976, 2), (1, 6400, 2), (1, 9856, 2), (1, 7168, 2), (1, 12480, 2), (1, 13056, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 100), (1, 100), (1, 100), (1, 100))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub_6': dict(
        name=["sub"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_5': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
