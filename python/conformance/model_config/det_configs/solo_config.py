from ...config import Genfunc
from ...dtype import Dtype

solo_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 3, 800, 1312), (2, 64, 200, 328), (2, 64, 200, 328), (2, 64, 200, 328), (2, 256, 200, 328), (2, 256, 200, 328), (2, 128, 200, 328), (2, 128, 100, 164), (2, 256, 200, 328), (2, 512, 100, 164), (2, 128, 100, 164), (2, 512, 100, 164), (2, 256, 100, 164), (2, 256, 50, 82), (2, 512, 100, 164), (2, 1024, 50, 82), (2, 256, 50, 82), (2, 1024, 50, 82), (2, 512, 50, 82), (2, 512, 25, 41), (2, 1024, 50, 82), (2, 2048, 25, 41), (2, 512, 25, 41), (2, 258, 100, 164), (2, 256, 100, 164), (2, 256, 40, 40), (2, 256, 36, 36), (2, 258, 50, 82), (2, 256, 24, 24), (2, 258, 25, 41), (2, 256, 25, 41), (2, 256, 16, 16), (2, 256, 12, 12), (1, 3, 800, 1216), (1, 64, 200, 304), (1, 64, 200, 304), (1, 64, 200, 304), (1, 256, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 256, 200, 304), (1, 512, 100, 152), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 512, 25, 38), (1, 258, 100, 152), (1, 256, 100, 152), (1, 256, 40, 40), (1, 256, 36, 36), (1, 258, 50, 76), (1, 256, 24, 24), (1, 258, 25, 38), (1, 256, 25, 38), (1, 256, 16, 16), (1, 256, 12, 12), (1, 3, 800, 1248), (1, 64, 200, 312), (1, 64, 200, 312), (1, 64, 200, 312), (1, 256, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 256, 200, 312), (1, 512, 100, 156), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 512, 25, 39), (1, 258, 100, 156), (1, 256, 100, 156), (1, 258, 50, 78), (1, 258, 25, 39), (1, 256, 25, 39), (1, 3, 800, 1088), (1, 64, 200, 272), (1, 64, 200, 272), (1, 64, 200, 272), (1, 256, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 256, 200, 272), (1, 512, 100, 136), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 512, 25, 34), (1, 258, 100, 136), (1, 256, 100, 136), (1, 258, 50, 68), (1, 258, 25, 34), (1, 256, 25, 34), (1, 3, 800, 1344), (1, 64, 200, 336), (1, 64, 200, 336), (1, 64, 200, 336), (1, 256, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 256, 200, 336), (1, 512, 100, 168), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 512, 25, 42), (1, 258, 100, 168), (1, 256, 100, 168), (1, 258, 50, 84), (1, 258, 25, 42), (1, 256, 25, 42), (1, 3, 800, 1024), (1, 64, 200, 256), (1, 64, 200, 256), (1, 64, 200, 256), (1, 256, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 256, 200, 256), (1, 512, 100, 128), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 512, 25, 32), (1, 258, 100, 128), (1, 256, 100, 128), (1, 258, 50, 64), (1, 258, 25, 32), (1, 256, 25, 32), (1, 3, 1216, 800), (1, 64, 304, 200), (1, 64, 304, 200), (1, 64, 304, 200), (1, 256, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 256, 304, 200), (1, 512, 152, 100), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 512, 38, 25), (1, 258, 152, 100), (1, 256, 152, 100), (1, 258, 76, 50), (1, 258, 38, 25), (1, 256, 38, 25), (1, 3, 1088, 800), (1, 64, 272, 200), (1, 64, 272, 200), (1, 64, 272, 200), (1, 256, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 256, 272, 200), (1, 512, 136, 100), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 512, 34, 25), (1, 258, 136, 100), (1, 256, 136, 100), (1, 258, 68, 50), (1, 258, 34, 25), (1, 256, 34, 25), (1, 3, 1152, 800), (1, 64, 288, 200), (1, 64, 288, 200), (1, 64, 288, 200), (1, 256, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 256, 288, 200), (1, 512, 144, 100), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 512, 36, 25), (1, 258, 144, 100), (1, 256, 144, 100), (1, 258, 72, 50), (1, 258, 36, 25), (1, 256, 36, 25), (1, 3, 800, 960), (1, 64, 200, 240), (1, 64, 200, 240), (1, 64, 200, 240), (1, 256, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 256, 200, 240), (1, 512, 100, 120), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 512, 25, 30), (1, 258, 100, 120), (1, 256, 100, 120), (1, 258, 50, 60), (1, 258, 25, 30), (1, 256, 25, 30), (1, 3, 800, 1120), (1, 64, 200, 280), (1, 64, 200, 280), (1, 64, 200, 280), (1, 256, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 256, 200, 280), (1, 512, 100, 140), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 512, 25, 35), (1, 258, 100, 140), (1, 256, 100, 140), (1, 258, 50, 70), (1, 258, 25, 35), (1, 256, 25, 35), (1, 3, 896, 800), (1, 64, 224, 200), (1, 64, 224, 200), (1, 64, 224, 200), (1, 256, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 256, 224, 200), (1, 512, 112, 100), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 512, 28, 25), (1, 258, 112, 100), (1, 256, 112, 100), (1, 258, 56, 50), (1, 258, 28, 25), (1, 256, 28, 25), (1, 3, 832, 800), (1, 64, 208, 200), (1, 64, 208, 200), (1, 64, 208, 200), (1, 256, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 256, 208, 200), (1, 512, 104, 100), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 512, 26, 25), (1, 258, 104, 100), (1, 256, 104, 100), (1, 258, 52, 50), (1, 258, 26, 25), (1, 256, 26, 25), (1, 3, 800, 1280), (1, 64, 200, 320), (1, 64, 200, 320), (1, 64, 200, 320), (1, 256, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 256, 200, 320), (1, 512, 100, 160), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 512, 25, 40), (1, 258, 100, 160), (1, 256, 100, 160), (1, 258, 50, 80), (1, 258, 25, 40), (1, 256, 25, 40), (1, 3, 800, 1152), (1, 64, 200, 288), (1, 64, 200, 288), (1, 64, 200, 288), (1, 256, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 256, 200, 288), (1, 512, 100, 144), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 512, 25, 36), (1, 258, 100, 144), (1, 256, 100, 144), (1, 258, 50, 72), (1, 258, 25, 36), (1, 256, 25, 36), (1, 3, 768, 1344), (1, 64, 192, 336), (1, 64, 192, 336), (1, 64, 192, 336), (1, 256, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 256, 192, 336), (1, 512, 96, 168), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 512, 24, 42), (1, 258, 96, 168), (1, 256, 96, 168), (1, 258, 48, 84), (1, 258, 24, 42), (1, 256, 24, 42), (1, 3, 800, 800), (1, 64, 200, 200), (1, 64, 200, 200), (1, 64, 200, 200), (1, 256, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 256, 200, 200), (1, 512, 100, 100), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 512, 25, 25), (1, 258, 100, 100), (1, 256, 100, 100), (1, 258, 50, 50), (1, 258, 25, 25), (1, 256, 25, 25), (1, 3, 1312, 800), (1, 64, 328, 200), (1, 64, 328, 200), (1, 64, 328, 200), (1, 256, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 256, 328, 200), (1, 512, 164, 100), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 512, 41, 25), (1, 258, 164, 100), (1, 256, 164, 100), (1, 258, 82, 50), (1, 258, 41, 25), (1, 256, 41, 25), (1, 3, 800, 1184), (1, 64, 200, 296), (1, 64, 200, 296), (1, 64, 200, 296), (1, 256, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 256, 200, 296), (1, 512, 100, 148), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 512, 25, 37), (1, 258, 100, 148), (1, 256, 100, 148), (1, 258, 50, 74), (1, 258, 25, 37), (1, 256, 25, 37), (1, 3, 800, 1312), (1, 64, 200, 328), (1, 64, 200, 328), (1, 64, 200, 328), (1, 256, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 256, 200, 328), (1, 512, 100, 164), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 512, 25, 41), (1, 258, 100, 164), (1, 256, 100, 164), (1, 258, 50, 82), (1, 258, 25, 41), (1, 256, 25, 41), (1, 3, 608, 1344), (1, 64, 152, 336), (1, 64, 152, 336), (1, 64, 152, 336), (1, 256, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 256, 152, 336), (1, 512, 76, 168), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 512, 19, 42), (1, 258, 76, 168), (1, 256, 76, 168), (1, 258, 38, 84), (1, 258, 19, 42), (1, 256, 19, 42), (1, 3, 1248, 800), (1, 64, 312, 200), (1, 64, 312, 200), (1, 64, 312, 200), (1, 256, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 256, 312, 200), (1, 512, 156, 100), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 512, 39, 25), (1, 258, 156, 100), (1, 256, 156, 100), (1, 258, 78, 50), (1, 258, 39, 25), (1, 256, 39, 25), (1, 3, 1120, 800), (1, 64, 280, 200), (1, 64, 280, 200), (1, 64, 280, 200), (1, 256, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 256, 280, 200), (1, 512, 140, 100), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 512, 35, 25), (1, 258, 140, 100), (1, 256, 140, 100), (1, 258, 70, 50), (1, 258, 35, 25), (1, 256, 35, 25), (1, 3, 800, 832), (1, 64, 200, 208), (1, 64, 200, 208), (1, 64, 200, 208), (1, 256, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 256, 200, 208), (1, 512, 100, 104), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 512, 25, 26), (1, 258, 100, 104), (1, 256, 100, 104), (1, 258, 50, 52), (1, 258, 25, 26), (1, 256, 25, 26), (1, 3, 800, 1056), (1, 64, 200, 264), (1, 64, 200, 264), (1, 64, 200, 264), (1, 256, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 256, 200, 264), (1, 512, 100, 132), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 512, 25, 33), (1, 258, 100, 132), (1, 256, 100, 132), (1, 258, 50, 66), (1, 258, 25, 33), (1, 256, 25, 33), (1, 3, 992, 800), (1, 64, 248, 200), (1, 64, 248, 200), (1, 64, 248, 200), (1, 256, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 256, 248, 200), (1, 512, 124, 100), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 512, 31, 25), (1, 258, 124, 100), (1, 256, 124, 100), (1, 258, 62, 50), (1, 258, 31, 25), (1, 256, 31, 25), (1, 3, 1344, 768), (1, 64, 336, 192), (1, 64, 336, 192), (1, 64, 336, 192), (1, 256, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 256, 336, 192), (1, 512, 168, 96), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 512, 42, 24), (1, 258, 168, 96), (1, 256, 168, 96), (1, 258, 84, 48), (1, 258, 42, 24), (1, 256, 42, 24), (1, 3, 1184, 800), (1, 64, 296, 200), (1, 64, 296, 200), (1, 64, 296, 200), (1, 256, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 256, 296, 200), (1, 512, 148, 100), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 512, 37, 25), (1, 258, 148, 100), (1, 256, 148, 100), (1, 258, 74, 50), (1, 258, 37, 25), (1, 256, 37, 25), (1, 3, 800, 992), (1, 64, 200, 248), (1, 64, 200, 248), (1, 64, 200, 248), (1, 256, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 256, 200, 248), (1, 512, 100, 124), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 512, 25, 31), (1, 258, 100, 124), (1, 256, 100, 124), (1, 258, 50, 62), (1, 258, 25, 31), (1, 256, 25, 31), (1, 3, 1280, 800), (1, 64, 320, 200), (1, 64, 320, 200), (1, 64, 320, 200), (1, 256, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 256, 320, 200), (1, 512, 160, 100), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 512, 40, 25), (1, 258, 160, 100), (1, 256, 160, 100), (1, 258, 80, 50), (1, 258, 40, 25), (1, 256, 40, 25), (1, 3, 704, 1344), (1, 64, 176, 336), (1, 64, 176, 336), (1, 64, 176, 336), (1, 256, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 256, 176, 336), (1, 512, 88, 168), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 512, 22, 42), (1, 258, 88, 168), (1, 256, 88, 168), (1, 258, 44, 84), (1, 258, 22, 42), (1, 256, 22, 42), (1, 3, 864, 800), (1, 64, 216, 200), (1, 64, 216, 200), (1, 64, 216, 200), (1, 256, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 256, 216, 200), (1, 512, 108, 100), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 512, 27, 25), (1, 258, 108, 100), (1, 256, 108, 100), (1, 258, 54, 50), (1, 258, 27, 25), (1, 256, 27, 25), (1, 3, 800, 864), (1, 64, 200, 216), (1, 64, 200, 216), (1, 64, 200, 216), (1, 256, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 256, 200, 216), (1, 512, 100, 108), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 512, 25, 27), (1, 258, 100, 108), (1, 256, 100, 108), (1, 258, 50, 54), (1, 258, 25, 27), (1, 256, 25, 27), (1, 3, 1056, 800), (1, 64, 264, 200), (1, 64, 264, 200), (1, 64, 264, 200), (1, 256, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 256, 264, 200), (1, 512, 132, 100), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 512, 33, 25), (1, 258, 132, 100), (1, 256, 132, 100), (1, 258, 66, 50), (1, 258, 33, 25), (1, 256, 33, 25), (1, 3, 640, 1344), (1, 64, 160, 336), (1, 64, 160, 336), (1, 64, 160, 336), (1, 256, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 256, 160, 336), (1, 512, 80, 168), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 512, 20, 42), (1, 258, 80, 168), (1, 256, 80, 168), (1, 258, 40, 84), (1, 258, 20, 42), (1, 256, 20, 42), (1, 3, 1344, 800), (1, 64, 336, 200), (1, 64, 336, 200), (1, 64, 336, 200), (1, 256, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 256, 336, 200), (1, 512, 168, 100), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 512, 42, 25), (1, 258, 168, 100), (1, 256, 168, 100), (1, 258, 84, 50), (1, 258, 42, 25), (1, 256, 42, 25), (1, 3, 736, 1344), (1, 64, 184, 336), (1, 64, 184, 336), (1, 64, 184, 336), (1, 256, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 256, 184, 336), (1, 512, 92, 168), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 512, 23, 42), (1, 258, 92, 168), (1, 256, 92, 168), (1, 258, 46, 84), (1, 258, 23, 42), (1, 256, 23, 42), (1, 3, 672, 1344), (1, 64, 168, 336), (1, 64, 168, 336), (1, 64, 168, 336), (1, 256, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 256, 168, 336), (1, 512, 84, 168), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 512, 21, 42), (1, 258, 84, 168), (1, 256, 84, 168), (1, 258, 42, 84), (1, 258, 21, 42), (1, 256, 21, 42), (1, 3, 1024, 800), (1, 64, 256, 200), (1, 64, 256, 200), (1, 64, 256, 200), (1, 256, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 256, 256, 200), (1, 512, 128, 100), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 512, 32, 25), (1, 258, 128, 100), (1, 256, 128, 100), (1, 258, 64, 50), (1, 258, 32, 25), (1, 256, 32, 25), (1, 3, 800, 928), (1, 64, 200, 232), (1, 64, 200, 232), (1, 64, 200, 232), (1, 256, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 256, 200, 232), (1, 512, 100, 116), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 512, 25, 29), (1, 258, 100, 116), (1, 256, 100, 116), (1, 258, 50, 58), (1, 258, 25, 29), (1, 256, 25, 29), (1, 3, 1344, 608), (1, 64, 336, 152), (1, 64, 336, 152), (1, 64, 336, 152), (1, 256, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 256, 336, 152), (1, 512, 168, 76), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 512, 42, 19), (1, 258, 168, 76), (1, 256, 168, 76), (1, 258, 84, 38), (1, 258, 42, 19), (1, 256, 42, 19), (1, 3, 800, 896), (1, 64, 200, 224), (1, 64, 200, 224), (1, 64, 200, 224), (1, 256, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 256, 200, 224), (1, 512, 100, 112), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 512, 25, 28), (1, 258, 100, 112), (1, 256, 100, 112), (1, 258, 50, 56), (1, 258, 25, 28), (1, 256, 25, 28), (1, 3, 576, 1344), (1, 64, 144, 336), (1, 64, 144, 336), (1, 64, 144, 336), (1, 256, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 256, 144, 336), (1, 512, 72, 168), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 512, 18, 42), (1, 258, 72, 168), (1, 256, 72, 168), (1, 258, 36, 84), (1, 258, 18, 42), (1, 256, 18, 42), (1, 3, 1344, 640), (1, 64, 336, 160), (1, 64, 336, 160), (1, 64, 336, 160), (1, 256, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 256, 336, 160), (1, 512, 168, 80), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 512, 42, 20), (1, 258, 168, 80), (1, 256, 168, 80), (1, 258, 84, 40), (1, 258, 42, 20), (1, 256, 42, 20), (1, 3, 960, 800), (1, 64, 240, 200), (1, 64, 240, 200), (1, 64, 240, 200), (1, 256, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 256, 240, 200), (1, 512, 120, 100), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 512, 30, 25), (1, 258, 120, 100), (1, 256, 120, 100), (1, 258, 60, 50), (1, 258, 30, 25), (1, 256, 30, 25), (1, 3, 352, 1344), (1, 64, 88, 336), (1, 64, 88, 336), (1, 64, 88, 336), (1, 256, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 256, 88, 336), (1, 512, 44, 168), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 512, 11, 42), (1, 258, 44, 168), (1, 256, 44, 168), (1, 258, 22, 84), (1, 258, 11, 42), (1, 256, 11, 42), (1, 3, 416, 1344), (1, 64, 104, 336), (1, 64, 104, 336), (1, 64, 104, 336), (1, 256, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 256, 104, 336), (1, 512, 52, 168), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 512, 13, 42), (1, 258, 52, 168), (1, 256, 52, 168), (1, 258, 26, 84), (1, 258, 13, 42), (1, 256, 13, 42), (1, 3, 480, 1344), (1, 64, 120, 336), (1, 64, 120, 336), (1, 64, 120, 336), (1, 256, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 256, 120, 336), (1, 512, 60, 168), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 512, 15, 42), (1, 258, 60, 168), (1, 256, 60, 168), (1, 258, 30, 84), (1, 258, 15, 42), (1, 256, 15, 42), (1, 3, 928, 800), (1, 64, 232, 200), (1, 64, 232, 200), (1, 64, 232, 200), (1, 256, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 256, 232, 200), (1, 512, 116, 100), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 512, 29, 25), (1, 258, 116, 100), (1, 256, 116, 100), (1, 258, 58, 50), (1, 258, 29, 25), (1, 256, 29, 25), (1, 3, 1344, 704), (1, 64, 336, 176), (1, 64, 336, 176), (1, 64, 336, 176), (1, 256, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 256, 336, 176), (1, 512, 168, 88), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 512, 42, 22), (1, 258, 168, 88), (1, 256, 168, 88), (1, 258, 84, 44), (1, 258, 42, 22), (1, 256, 42, 22), (1, 3, 512, 1344), (1, 64, 128, 336), (1, 64, 128, 336), (1, 64, 128, 336), (1, 256, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 256, 128, 336), (1, 512, 64, 168), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 512, 16, 42), (1, 258, 64, 168), (1, 256, 64, 168), (1, 258, 32, 84), (1, 258, 16, 42), (1, 256, 16, 42), (1, 3, 384, 1344), (1, 64, 96, 336), (1, 64, 96, 336), (1, 64, 96, 336), (1, 256, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 256, 96, 336), (1, 512, 48, 168), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 512, 12, 42), (1, 258, 48, 168), (1, 256, 48, 168), (1, 258, 24, 84), (1, 258, 12, 42), (1, 256, 12, 42), (1, 3, 1344, 512), (1, 64, 336, 128), (1, 64, 336, 128), (1, 64, 336, 128), (1, 256, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 256, 336, 128), (1, 512, 168, 64), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 512, 42, 16), (1, 258, 168, 64), (1, 256, 168, 64), (1, 258, 84, 32), (1, 258, 42, 16), (1, 256, 42, 16), (1, 3, 448, 1344), (1, 64, 112, 336), (1, 64, 112, 336), (1, 64, 112, 336), (1, 256, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 256, 112, 336), (1, 512, 56, 168), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 512, 14, 42), (1, 258, 56, 168), (1, 256, 56, 168), (1, 258, 28, 84), (1, 258, 14, 42), (1, 256, 14, 42), (1, 3, 544, 1344), (1, 64, 136, 336), (1, 64, 136, 336), (1, 64, 136, 336), (1, 256, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 256, 136, 336), (1, 512, 68, 168), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 512, 17, 42), (1, 258, 68, 168), (1, 256, 68, 168), (1, 258, 34, 84), (1, 258, 17, 42), (1, 256, 17, 42), (1, 3, 1344, 736), (1, 64, 336, 184), (1, 64, 336, 184), (1, 64, 336, 184), (1, 256, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 256, 336, 184), (1, 512, 168, 92), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 512, 42, 23), (1, 258, 168, 92), (1, 256, 168, 92), (1, 258, 84, 46), (1, 258, 42, 23), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3), (256, 258, 3, 3), (256, 258, 3, 3), (256, 256, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 400, 656), (2, 64, 200, 328), (2, 256, 200, 328), (2, 128, 200, 328), (2, 128, 100, 164), (2, 512, 100, 164), (2, 256, 100, 164), (2, 256, 50, 82), (2, 1024, 50, 82), (2, 512, 50, 82), (2, 512, 25, 41), (2, 2048, 25, 41), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 64, 400, 656), (2, 64, 200, 328), (2, 256, 200, 328), (2, 128, 200, 328), (2, 128, 100, 164), (2, 512, 100, 164), (2, 256, 100, 164), (2, 256, 50, 82), (2, 1024, 50, 82), (2, 512, 50, 82), (2, 512, 25, 41), (2, 2048, 25, 41), (2, 256, 40, 40), (2, 256, 36, 36), (2, 256, 24, 24), (2, 256, 25, 41), (2, 256, 16, 16), (2, 256, 12, 12), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 256, 40, 40), (1, 256, 36, 36), (1, 256, 24, 24), (1, 256, 25, 38), (1, 256, 16, 16), (1, 256, 12, 12), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 256, 25, 39), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 256, 25, 34), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 256, 25, 42), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 256, 25, 32), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 256, 38, 25), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 256, 34, 25), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 256, 36, 25), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 256, 25, 30), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 256, 25, 35), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 256, 28, 25), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 256, 26, 25), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 256, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 256, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 256, 24, 42), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 256, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 256, 41, 25), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 256, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 256, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 256, 19, 42), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 256, 39, 25), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 256, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 256, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 256, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 256, 31, 25), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 256, 42, 24), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 256, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 256, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 256, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 256, 22, 42), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 256, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 256, 25, 27), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 256, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 256, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 256, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 256, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 256, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 256, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 256, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 256, 42, 19), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 256, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 256, 18, 42), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 256, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 256, 30, 25), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 256, 11, 42), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 256, 13, 42), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 256, 15, 42), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 256, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 256, 42, 22), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 256, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 256, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 256, 42, 16), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 256, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 256, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 400, 656), (1, 64, 400, 608), (1, 64, 400, 624), (1, 64, 400, 544), (1, 64, 400, 672), (1, 64, 400, 512), (1, 64, 608, 400), (1, 64, 544, 400), (1, 64, 576, 400), (1, 64, 400, 480), (1, 64, 400, 560), (1, 64, 448, 400), (1, 64, 416, 400), (1, 64, 400, 640), (1, 64, 400, 576), (1, 64, 384, 672), (1, 64, 400, 400), (1, 64, 656, 400), (1, 64, 400, 592), (1, 64, 400, 656), (1, 64, 304, 672), (1, 64, 624, 400), (1, 64, 560, 400), (1, 64, 400, 416), (1, 64, 400, 528), (1, 64, 496, 400), (1, 64, 672, 384), (1, 64, 592, 400), (1, 64, 400, 496), (1, 64, 640, 400), (1, 64, 352, 672), (1, 64, 432, 400), (1, 64, 400, 432), (1, 64, 528, 400), (1, 64, 320, 672), (1, 64, 672, 400), (1, 64, 368, 672), (1, 64, 336, 672), (1, 64, 512, 400), (1, 64, 400, 464), (1, 64, 672, 304), (1, 64, 400, 448), (1, 64, 288, 672), (1, 64, 672, 320), (1, 64, 480, 400), (1, 64, 176, 672), (1, 64, 208, 672), (1, 64, 240, 672), (1, 64, 464, 400), (1, 64, 672, 352), (1, 64, 256, 672), (1, 64, 192, 672), (1, 64, 672, 256), (1, 64, 224, 672), (1, 64, 272, 672), (1, 64, 672, 368)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 200, 328), (2, 512, 100, 164), (2, 1024, 50, 82), (2, 2048, 25, 41), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 200, 328), (2, 512, 100, 164), (2, 1024, 50, 82), (2, 2048, 25, 41), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 256, 200, 328), (2, 512, 100, 164), (2, 1024, 50, 82), (2, 2048, 25, 41), (2, 256, 200, 328), (2, 256, 100, 164), (2, 256, 50, 82), (2, 256, 25, 41), (2, 256, 200, 328), (2, 256, 40, 40), (2, 256, 200, 328), (2, 256, 36, 36), (2, 256, 100, 164), (2, 256, 24, 24), (2, 256, 50, 82), (2, 256, 16, 16), (2, 256, 50, 82), (2, 256, 12, 12), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 304), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 200, 304), (1, 256, 40, 40), (1, 256, 200, 304), (1, 256, 36, 36), (1, 256, 100, 152), (1, 256, 24, 24), (1, 256, 50, 76), (1, 256, 16, 16), (1, 256, 50, 76), (1, 256, 12, 12), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 312), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 200, 312), (1, 256, 200, 312), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 50, 78), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 272), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 200, 272), (1, 256, 200, 272), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 50, 68), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 336), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 200, 336), (1, 256, 200, 336), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 50, 84), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 200, 256), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 200, 256), (1, 256, 200, 256), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 50, 64), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 304, 200), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 304, 200), (1, 256, 304, 200), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 76, 50), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 272, 200), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 272, 200), (1, 256, 272, 200), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 68, 50), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 288, 200), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 288, 200), (1, 256, 288, 200), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 72, 50), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 240), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 200, 240), (1, 256, 200, 240), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 50, 60), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 200, 280), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 200, 280), (1, 256, 200, 280), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 50, 70), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 224, 200), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 224, 200), (1, 256, 224, 200), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 56, 50), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 208, 200), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 208, 200), (1, 256, 208, 200), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 52, 50), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 320), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 200, 320), (1, 256, 200, 320), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 50, 80), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 200, 288), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 200, 288), (1, 256, 200, 288), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 50, 72), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 192, 336), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 192, 336), (1, 256, 192, 336), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 48, 84), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 200, 200), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 200, 200), (1, 256, 200, 200), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 50, 50), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 328, 200), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 328, 200), (1, 256, 328, 200), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 82, 50), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 296), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 200, 296), (1, 256, 200, 296), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 50, 74), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 200, 328), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 200, 328), (1, 256, 200, 328), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 50, 82), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 152, 336), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 152, 336), (1, 256, 152, 336), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 38, 84), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 312, 200), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 312, 200), (1, 256, 312, 200), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 78, 50), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 280, 200), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 280, 200), (1, 256, 280, 200), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 70, 50), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 208), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 200, 208), (1, 256, 200, 208), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 50, 52), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 200, 264), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 200, 264), (1, 256, 200, 264), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 50, 66), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 248, 200), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 248, 200), (1, 256, 248, 200), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 62, 50), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 336, 192), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 336, 192), (1, 256, 336, 192), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 84, 48), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 296, 200), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 296, 200), (1, 256, 296, 200), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 74, 50), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 200, 248), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 200, 248), (1, 256, 200, 248), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 50, 62), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 320, 200), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 320, 200), (1, 256, 320, 200), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 80, 50), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 176, 336), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 176, 336), (1, 256, 176, 336), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 44, 84), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 216, 200), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 216, 200), (1, 256, 216, 200), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 54, 50), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 200, 216), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 200, 216), (1, 256, 200, 216), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 50, 54), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 264, 200), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 264, 200), (1, 256, 264, 200), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 66, 50), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 160, 336), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 160, 336), (1, 256, 160, 336), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 40, 84), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 336, 200), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 336, 200), (1, 256, 336, 200), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 84, 50), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 184, 336), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 184, 336), (1, 256, 184, 336), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 46, 84), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 168, 336), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 168, 336), (1, 256, 168, 336), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 42, 84), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 256, 200), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 256, 200), (1, 256, 256, 200), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 64, 50), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 200, 232), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 200, 232), (1, 256, 200, 232), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 50, 58), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 336, 152), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 336, 152), (1, 256, 336, 152), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 84, 38), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 200, 224), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 200, 224), (1, 256, 200, 224), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 50, 56), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 144, 336), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 144, 336), (1, 256, 144, 336), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 36, 84), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 336, 160), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 336, 160), (1, 256, 336, 160), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 84, 40), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 240, 200), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 240, 200), (1, 256, 240, 200), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 60, 50), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 88, 336), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 88, 336), (1, 256, 88, 336), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 22, 84), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 104, 336), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 104, 336), (1, 256, 104, 336), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 26, 84), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 120, 336), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 120, 336), (1, 256, 120, 336), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 30, 84), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 232, 200), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 232, 200), (1, 256, 232, 200), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 58, 50), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 336, 176), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 336, 176), (1, 256, 336, 176), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 84, 44), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 128, 336), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 128, 336), (1, 256, 128, 336), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 32, 84), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 96, 336), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 96, 336), (1, 256, 96, 336), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 24, 84), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 336, 128), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 336, 128), (1, 256, 336, 128), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 84, 32), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 112, 336), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 112, 336), (1, 256, 112, 336), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 28, 84), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 136, 336), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 136, 336), (1, 256, 136, 336), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 34, 84), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 256, 336, 184), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23), (1, 256, 336, 184), (1, 256, 336, 184), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 84, 46)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (80, 256, 3, 3), (1296, 256, 1, 1), (80, 256, 3, 3), (576, 256, 1, 1), (80, 256, 3, 3), (256, 256, 1, 1), (80, 256, 3, 3), (144, 256, 1, 1), (80, 256, 3, 3), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (80, 256, 3, 3), (1296, 256, 1, 1), (80, 256, 3, 3), (576, 256, 1, 1), (80, 256, 3, 3), (256, 256, 1, 1), (80, 256, 3, 3), (144, 256, 1, 1), (80, 256, 3, 3), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (1600, 256, 1, 1), (1296, 256, 1, 1), (576, 256, 1, 1), (256, 256, 1, 1), (144, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (80,), (1296,), (80,), (576,), (80,), (256,), (80,), (144,), (80,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (80,), (1296,), (80,), (576,), (80,), (256,), (80,), (144,), (80,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (1600,), (1296,), (576,), (256,), (144,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            size=[(50, 82), (100, 164), (200, 328), 40, 36, 24, 16, 12, (50, 76), (100, 152), (200, 304), 40, (200, 304), 36, (200, 304), 24, (200, 304), 16, (200, 304), 12, (200, 304), (50, 78), (100, 156), (200, 312), 40, (200, 312), 36, (200, 312), 24, (200, 312), 16, (200, 312), 12, (200, 312), (50, 68), (100, 136), (200, 272), 40, (200, 272), 36, (200, 272), 24, (200, 272), 16, (200, 272), 12, (200, 272), (50, 84), (100, 168), (200, 336), 40, (200, 336), 36, (200, 336), 24, (200, 336), 16, (200, 336), 12, (200, 336), (50, 64), (100, 128), (200, 256), 40, (200, 256), 36, (200, 256), 24, (200, 256), 16, (200, 256), 12, (200, 256), (76, 50), (152, 100), (304, 200), 40, (304, 200), 36, (304, 200), 24, (304, 200), 16, (304, 200), 12, (304, 200), (68, 50), (136, 100), (272, 200), 40, (272, 200), 36, (272, 200), 24, (272, 200), 16, (272, 200), 12, (272, 200), (72, 50), (144, 100), (288, 200), 40, (288, 200), 36, (288, 200), 24, (288, 200), 16, (288, 200), 12, (288, 200), (50, 60), (100, 120), (200, 240), 40, (200, 240), 36, (200, 240), 24, (200, 240), 16, (200, 240), 12, (200, 240), (50, 70), (100, 140), (200, 280), 40, (200, 280), 36, (200, 280), 24, (200, 280), 16, (200, 280), 12, (200, 280), (56, 50), (112, 100), (224, 200), 40, (224, 200), 36, (224, 200), 24, (224, 200), 16, (224, 200), 12, (224, 200), (52, 50), (104, 100), (208, 200), 40, (208, 200), 36, (208, 200), 24, (208, 200), 16, (208, 200), 12, (208, 200), (50, 80), (100, 160), (200, 320), 40, (200, 320), 36, (200, 320), 24, (200, 320), 16, (200, 320), 12, (200, 320), (50, 72), (100, 144), (200, 288), 40, (200, 288), 36, (200, 288), 24, (200, 288), 16, (200, 288), 12, (200, 288), (48, 84), (96, 168), (192, 336), 40, (192, 336), 36, (192, 336), 24, (192, 336), 16, (192, 336), 12, (192, 336), (50, 50), (100, 100), (200, 200), 40, (200, 200), 36, (200, 200), 24, (200, 200), 16, (200, 200), 12, (200, 200), (82, 50), (164, 100), (328, 200), 40, (328, 200), 36, (328, 200), 24, (328, 200), 16, (328, 200), 12, (328, 200), (50, 74), (100, 148), (200, 296), 40, (200, 296), 36, (200, 296), 24, (200, 296), 16, (200, 296), 12, (200, 296), (50, 82), (100, 164), (200, 328), 40, (200, 328), 36, (200, 328), 24, (200, 328), 16, (200, 328), 12, (200, 328), (38, 84), (76, 168), (152, 336), 40, (152, 336), 36, (152, 336), 24, (152, 336), 16, (152, 336), 12, (152, 336), (78, 50), (156, 100), (312, 200), 40, (312, 200), 36, (312, 200), 24, (312, 200), 16, (312, 200), 12, (312, 200), (70, 50), (140, 100), (280, 200), 40, (280, 200), 36, (280, 200), 24, (280, 200), 16, (280, 200), 12, (280, 200), (50, 52), (100, 104), (200, 208), 40, (200, 208), 36, (200, 208), 24, (200, 208), 16, (200, 208), 12, (200, 208), (50, 66), (100, 132), (200, 264), 40, (200, 264), 36, (200, 264), 24, (200, 264), 16, (200, 264), 12, (200, 264), (62, 50), (124, 100), (248, 200), 40, (248, 200), 36, (248, 200), 24, (248, 200), 16, (248, 200), 12, (248, 200), (84, 48), (168, 96), (336, 192), 40, (336, 192), 36, (336, 192), 24, (336, 192), 16, (336, 192), 12, (336, 192), (74, 50), (148, 100), (296, 200), 40, (296, 200), 36, (296, 200), 24, (296, 200), 16, (296, 200), 12, (296, 200), (50, 62), (100, 124), (200, 248), 40, (200, 248), 36, (200, 248), 24, (200, 248), 16, (200, 248), 12, (200, 248), (80, 50), (160, 100), (320, 200), 40, (320, 200), 36, (320, 200), 24, (320, 200), 16, (320, 200), 12, (320, 200), (44, 84), (88, 168), (176, 336), 40, (176, 336), 36, (176, 336), 24, (176, 336), 16, (176, 336), 12, (176, 336), (54, 50), (108, 100), (216, 200), 40, (216, 200), 36, (216, 200), 24, (216, 200), 16, (216, 200), 12, (216, 200), (50, 54), (100, 108), (200, 216), 40, (200, 216), 36, (200, 216), 24, (200, 216), 16, (200, 216), 12, (200, 216), (66, 50), (132, 100), (264, 200), 40, (264, 200), 36, (264, 200), 24, (264, 200), 16, (264, 200), 12, (264, 200), (40, 84), (80, 168), (160, 336), 40, (160, 336), 36, (160, 336), 24, (160, 336), 16, (160, 336), 12, (160, 336), (84, 50), (168, 100), (336, 200), 40, (336, 200), 36, (336, 200), 24, (336, 200), 16, (336, 200), 12, (336, 200), (46, 84), (92, 168), (184, 336), 40, (184, 336), 36, (184, 336), 24, (184, 336), 16, (184, 336), 12, (184, 336), (42, 84), (84, 168), (168, 336), 40, (168, 336), 36, (168, 336), 24, (168, 336), 16, (168, 336), 12, (168, 336), (64, 50), (128, 100), (256, 200), 40, (256, 200), 36, (256, 200), 24, (256, 200), 16, (256, 200), 12, (256, 200), (50, 58), (100, 116), (200, 232), 40, (200, 232), 36, (200, 232), 24, (200, 232), 16, (200, 232), 12, (200, 232), (84, 38), (168, 76), (336, 152), 40, (336, 152), 36, (336, 152), 24, (336, 152), 16, (336, 152), 12, (336, 152), (50, 56), (100, 112), (200, 224), 40, (200, 224), 36, (200, 224), 24, (200, 224), 16, (200, 224), 12, (200, 224), (36, 84), (72, 168), (144, 336), 40, (144, 336), 36, (144, 336), 24, (144, 336), 16, (144, 336), 12, (144, 336), (84, 40), (168, 80), (336, 160), 40, (336, 160), 36, (336, 160), 24, (336, 160), 16, (336, 160), 12, (336, 160), (60, 50), (120, 100), (240, 200), 40, (240, 200), 36, (240, 200), 24, (240, 200), 16, (240, 200), 12, (240, 200), (22, 84), (44, 168), (88, 336), 40, (88, 336), 36, (88, 336), 24, (88, 336), 16, (88, 336), 12, (88, 336), (26, 84), (52, 168), (104, 336), 40, (104, 336), 36, (104, 336), 24, (104, 336), 16, (104, 336), 12, (104, 336), (30, 84), (60, 168), (120, 336), 40, (120, 336), 36, (120, 336), 24, (120, 336), 16, (120, 336), 12, (120, 336), (58, 50), (116, 100), (232, 200), 40, (232, 200), 36, (232, 200), 24, (232, 200), 16, (232, 200), 12, (232, 200), (84, 44), (168, 88), (336, 176), 40, (336, 176), 36, (336, 176), 24, (336, 176), 16, (336, 176), 12, (336, 176), (32, 84), (64, 168), (128, 336), 40, (128, 336), 36, (128, 336), 24, (128, 336), 16, (128, 336), 12, (128, 336), (24, 84), (48, 168), (96, 336), 40, (96, 336), 36, (96, 336), 24, (96, 336), 16, (96, 336), 12, (96, 336), (84, 32), (168, 64), (336, 128), 40, (336, 128), 36, (336, 128), 24, (336, 128), 16, (336, 128), 12, (336, 128), (28, 84), (56, 168), (112, 336), 40, (112, 336), 36, (112, 336), 24, (112, 336), 16, (112, 336), 12, (112, 336), (34, 84), (68, 168), (136, 336), 40, (136, 336), 36, (136, 336), 24, (136, 336), 16, (136, 336), 12, (136, 336), (84, 46), (168, 92), (336, 184), 40, (336, 184), 36, (336, 184), 24, (336, 184), 16, (336, 184), 12, (336, 184)],
            mode=['nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'nearest', 'nearest', 'nearest', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 25, 41), (2, 256, 50, 82), (2, 256, 100, 164), (2, 256, 100, 164), (2, 256, 100, 164), (2, 256, 50, 82), (2, 256, 25, 41), (2, 256, 25, 41), (1, 256, 25, 38), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 100, 152), (1, 1600, 200, 304), (1, 256, 100, 152), (1, 1296, 200, 304), (1, 256, 50, 76), (1, 576, 100, 152), (1, 256, 25, 38), (1, 256, 50, 76), (1, 256, 25, 38), (1, 144, 50, 76), (1, 256, 25, 39), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 100, 156), (1, 1600, 200, 312), (1, 256, 100, 156), (1, 1296, 200, 312), (1, 256, 50, 78), (1, 576, 100, 156), (1, 256, 25, 39), (1, 256, 50, 78), (1, 256, 25, 39), (1, 144, 50, 78), (1, 256, 25, 34), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 100, 136), (1, 1600, 200, 272), (1, 256, 100, 136), (1, 1296, 200, 272), (1, 256, 50, 68), (1, 576, 100, 136), (1, 256, 25, 34), (1, 256, 50, 68), (1, 256, 25, 34), (1, 144, 50, 68), (1, 256, 25, 42), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 100, 168), (1, 1600, 200, 336), (1, 256, 100, 168), (1, 1296, 200, 336), (1, 256, 50, 84), (1, 576, 100, 168), (1, 256, 25, 42), (1, 256, 50, 84), (1, 256, 25, 42), (1, 144, 50, 84), (1, 256, 25, 32), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 100, 128), (1, 1600, 200, 256), (1, 256, 100, 128), (1, 1296, 200, 256), (1, 256, 50, 64), (1, 576, 100, 128), (1, 256, 25, 32), (1, 256, 50, 64), (1, 256, 25, 32), (1, 144, 50, 64), (1, 256, 38, 25), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 152, 100), (1, 1600, 304, 200), (1, 256, 152, 100), (1, 1296, 304, 200), (1, 256, 76, 50), (1, 576, 152, 100), (1, 256, 38, 25), (1, 256, 76, 50), (1, 256, 38, 25), (1, 144, 76, 50), (1, 256, 34, 25), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 136, 100), (1, 1600, 272, 200), (1, 256, 136, 100), (1, 1296, 272, 200), (1, 256, 68, 50), (1, 576, 136, 100), (1, 256, 34, 25), (1, 256, 68, 50), (1, 256, 34, 25), (1, 144, 68, 50), (1, 256, 36, 25), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 144, 100), (1, 1600, 288, 200), (1, 256, 144, 100), (1, 1296, 288, 200), (1, 256, 72, 50), (1, 576, 144, 100), (1, 256, 36, 25), (1, 256, 72, 50), (1, 256, 36, 25), (1, 144, 72, 50), (1, 256, 25, 30), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 100, 120), (1, 1600, 200, 240), (1, 256, 100, 120), (1, 1296, 200, 240), (1, 256, 50, 60), (1, 576, 100, 120), (1, 256, 25, 30), (1, 256, 50, 60), (1, 256, 25, 30), (1, 144, 50, 60), (1, 256, 25, 35), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 100, 140), (1, 1600, 200, 280), (1, 256, 100, 140), (1, 1296, 200, 280), (1, 256, 50, 70), (1, 576, 100, 140), (1, 256, 25, 35), (1, 256, 50, 70), (1, 256, 25, 35), (1, 144, 50, 70), (1, 256, 28, 25), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 112, 100), (1, 1600, 224, 200), (1, 256, 112, 100), (1, 1296, 224, 200), (1, 256, 56, 50), (1, 576, 112, 100), (1, 256, 28, 25), (1, 256, 56, 50), (1, 256, 28, 25), (1, 144, 56, 50), (1, 256, 26, 25), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 104, 100), (1, 1600, 208, 200), (1, 256, 104, 100), (1, 1296, 208, 200), (1, 256, 52, 50), (1, 576, 104, 100), (1, 256, 26, 25), (1, 256, 52, 50), (1, 256, 26, 25), (1, 144, 52, 50), (1, 256, 25, 40), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 100, 160), (1, 1600, 200, 320), (1, 256, 100, 160), (1, 1296, 200, 320), (1, 256, 50, 80), (1, 576, 100, 160), (1, 256, 25, 40), (1, 256, 50, 80), (1, 256, 25, 40), (1, 144, 50, 80), (1, 256, 25, 36), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 100, 144), (1, 1600, 200, 288), (1, 256, 100, 144), (1, 1296, 200, 288), (1, 256, 50, 72), (1, 576, 100, 144), (1, 256, 25, 36), (1, 256, 50, 72), (1, 256, 25, 36), (1, 144, 50, 72), (1, 256, 24, 42), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 96, 168), (1, 1600, 192, 336), (1, 256, 96, 168), (1, 1296, 192, 336), (1, 256, 48, 84), (1, 576, 96, 168), (1, 256, 24, 42), (1, 256, 48, 84), (1, 256, 24, 42), (1, 144, 48, 84), (1, 256, 25, 25), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 100, 100), (1, 1600, 200, 200), (1, 256, 100, 100), (1, 1296, 200, 200), (1, 256, 50, 50), (1, 576, 100, 100), (1, 256, 25, 25), (1, 256, 50, 50), (1, 256, 25, 25), (1, 144, 50, 50), (1, 256, 41, 25), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 164, 100), (1, 1600, 328, 200), (1, 256, 164, 100), (1, 1296, 328, 200), (1, 256, 82, 50), (1, 576, 164, 100), (1, 256, 41, 25), (1, 256, 82, 50), (1, 256, 41, 25), (1, 144, 82, 50), (1, 256, 25, 37), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 100, 148), (1, 1600, 200, 296), (1, 256, 100, 148), (1, 1296, 200, 296), (1, 256, 50, 74), (1, 576, 100, 148), (1, 256, 25, 37), (1, 256, 50, 74), (1, 256, 25, 37), (1, 144, 50, 74), (1, 256, 25, 41), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 100, 164), (1, 1600, 200, 328), (1, 256, 100, 164), (1, 1296, 200, 328), (1, 256, 50, 82), (1, 576, 100, 164), (1, 256, 25, 41), (1, 256, 50, 82), (1, 256, 25, 41), (1, 144, 50, 82), (1, 256, 19, 42), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 76, 168), (1, 1600, 152, 336), (1, 256, 76, 168), (1, 1296, 152, 336), (1, 256, 38, 84), (1, 576, 76, 168), (1, 256, 19, 42), (1, 256, 38, 84), (1, 256, 19, 42), (1, 144, 38, 84), (1, 256, 39, 25), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 156, 100), (1, 1600, 312, 200), (1, 256, 156, 100), (1, 1296, 312, 200), (1, 256, 78, 50), (1, 576, 156, 100), (1, 256, 39, 25), (1, 256, 78, 50), (1, 256, 39, 25), (1, 144, 78, 50), (1, 256, 35, 25), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 140, 100), (1, 1600, 280, 200), (1, 256, 140, 100), (1, 1296, 280, 200), (1, 256, 70, 50), (1, 576, 140, 100), (1, 256, 35, 25), (1, 256, 70, 50), (1, 256, 35, 25), (1, 144, 70, 50), (1, 256, 25, 26), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 100, 104), (1, 1600, 200, 208), (1, 256, 100, 104), (1, 1296, 200, 208), (1, 256, 50, 52), (1, 576, 100, 104), (1, 256, 25, 26), (1, 256, 50, 52), (1, 256, 25, 26), (1, 144, 50, 52), (1, 256, 25, 33), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 100, 132), (1, 1600, 200, 264), (1, 256, 100, 132), (1, 1296, 200, 264), (1, 256, 50, 66), (1, 576, 100, 132), (1, 256, 25, 33), (1, 256, 50, 66), (1, 256, 25, 33), (1, 144, 50, 66), (1, 256, 31, 25), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 124, 100), (1, 1600, 248, 200), (1, 256, 124, 100), (1, 1296, 248, 200), (1, 256, 62, 50), (1, 576, 124, 100), (1, 256, 31, 25), (1, 256, 62, 50), (1, 256, 31, 25), (1, 144, 62, 50), (1, 256, 42, 24), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 168, 96), (1, 1600, 336, 192), (1, 256, 168, 96), (1, 1296, 336, 192), (1, 256, 84, 48), (1, 576, 168, 96), (1, 256, 42, 24), (1, 256, 84, 48), (1, 256, 42, 24), (1, 144, 84, 48), (1, 256, 37, 25), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 148, 100), (1, 1600, 296, 200), (1, 256, 148, 100), (1, 1296, 296, 200), (1, 256, 74, 50), (1, 576, 148, 100), (1, 256, 37, 25), (1, 256, 74, 50), (1, 256, 37, 25), (1, 144, 74, 50), (1, 256, 25, 31), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 100, 124), (1, 1600, 200, 248), (1, 256, 100, 124), (1, 1296, 200, 248), (1, 256, 50, 62), (1, 576, 100, 124), (1, 256, 25, 31), (1, 256, 50, 62), (1, 256, 25, 31), (1, 144, 50, 62), (1, 256, 40, 25), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 160, 100), (1, 1600, 320, 200), (1, 256, 160, 100), (1, 1296, 320, 200), (1, 256, 80, 50), (1, 576, 160, 100), (1, 256, 40, 25), (1, 256, 80, 50), (1, 256, 40, 25), (1, 144, 80, 50), (1, 256, 22, 42), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 88, 168), (1, 1600, 176, 336), (1, 256, 88, 168), (1, 1296, 176, 336), (1, 256, 44, 84), (1, 576, 88, 168), (1, 256, 22, 42), (1, 256, 44, 84), (1, 256, 22, 42), (1, 144, 44, 84), (1, 256, 27, 25), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 108, 100), (1, 1600, 216, 200), (1, 256, 108, 100), (1, 1296, 216, 200), (1, 256, 54, 50), (1, 576, 108, 100), (1, 256, 27, 25), (1, 256, 54, 50), (1, 256, 27, 25), (1, 144, 54, 50), (1, 256, 25, 27), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 100, 108), (1, 1600, 200, 216), (1, 256, 100, 108), (1, 1296, 200, 216), (1, 256, 50, 54), (1, 576, 100, 108), (1, 256, 25, 27), (1, 256, 50, 54), (1, 256, 25, 27), (1, 144, 50, 54), (1, 256, 33, 25), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 132, 100), (1, 1600, 264, 200), (1, 256, 132, 100), (1, 1296, 264, 200), (1, 256, 66, 50), (1, 576, 132, 100), (1, 256, 33, 25), (1, 256, 66, 50), (1, 256, 33, 25), (1, 144, 66, 50), (1, 256, 20, 42), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 80, 168), (1, 1600, 160, 336), (1, 256, 80, 168), (1, 1296, 160, 336), (1, 256, 40, 84), (1, 576, 80, 168), (1, 256, 20, 42), (1, 256, 40, 84), (1, 256, 20, 42), (1, 144, 40, 84), (1, 256, 42, 25), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 168, 100), (1, 1600, 336, 200), (1, 256, 168, 100), (1, 1296, 336, 200), (1, 256, 84, 50), (1, 576, 168, 100), (1, 256, 42, 25), (1, 256, 84, 50), (1, 256, 42, 25), (1, 144, 84, 50), (1, 256, 23, 42), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 92, 168), (1, 1600, 184, 336), (1, 256, 92, 168), (1, 1296, 184, 336), (1, 256, 46, 84), (1, 576, 92, 168), (1, 256, 23, 42), (1, 256, 46, 84), (1, 256, 23, 42), (1, 144, 46, 84), (1, 256, 21, 42), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 84, 168), (1, 1600, 168, 336), (1, 256, 84, 168), (1, 1296, 168, 336), (1, 256, 42, 84), (1, 576, 84, 168), (1, 256, 21, 42), (1, 256, 42, 84), (1, 256, 21, 42), (1, 144, 42, 84), (1, 256, 32, 25), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 128, 100), (1, 1600, 256, 200), (1, 256, 128, 100), (1, 1296, 256, 200), (1, 256, 64, 50), (1, 576, 128, 100), (1, 256, 32, 25), (1, 256, 64, 50), (1, 256, 32, 25), (1, 144, 64, 50), (1, 256, 25, 29), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 100, 116), (1, 1600, 200, 232), (1, 256, 100, 116), (1, 1296, 200, 232), (1, 256, 50, 58), (1, 576, 100, 116), (1, 256, 25, 29), (1, 256, 50, 58), (1, 256, 25, 29), (1, 144, 50, 58), (1, 256, 42, 19), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 168, 76), (1, 1600, 336, 152), (1, 256, 168, 76), (1, 1296, 336, 152), (1, 256, 84, 38), (1, 576, 168, 76), (1, 256, 42, 19), (1, 256, 84, 38), (1, 256, 42, 19), (1, 144, 84, 38), (1, 256, 25, 28), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 100, 112), (1, 1600, 200, 224), (1, 256, 100, 112), (1, 1296, 200, 224), (1, 256, 50, 56), (1, 576, 100, 112), (1, 256, 25, 28), (1, 256, 50, 56), (1, 256, 25, 28), (1, 144, 50, 56), (1, 256, 18, 42), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 72, 168), (1, 1600, 144, 336), (1, 256, 72, 168), (1, 1296, 144, 336), (1, 256, 36, 84), (1, 576, 72, 168), (1, 256, 18, 42), (1, 256, 36, 84), (1, 256, 18, 42), (1, 144, 36, 84), (1, 256, 42, 20), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 168, 80), (1, 1600, 336, 160), (1, 256, 168, 80), (1, 1296, 336, 160), (1, 256, 84, 40), (1, 576, 168, 80), (1, 256, 42, 20), (1, 256, 84, 40), (1, 256, 42, 20), (1, 144, 84, 40), (1, 256, 30, 25), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 120, 100), (1, 1600, 240, 200), (1, 256, 120, 100), (1, 1296, 240, 200), (1, 256, 60, 50), (1, 576, 120, 100), (1, 256, 30, 25), (1, 256, 60, 50), (1, 256, 30, 25), (1, 144, 60, 50), (1, 256, 11, 42), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 44, 168), (1, 1600, 88, 336), (1, 256, 44, 168), (1, 1296, 88, 336), (1, 256, 22, 84), (1, 576, 44, 168), (1, 256, 11, 42), (1, 256, 22, 84), (1, 256, 11, 42), (1, 144, 22, 84), (1, 256, 13, 42), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 52, 168), (1, 1600, 104, 336), (1, 256, 52, 168), (1, 1296, 104, 336), (1, 256, 26, 84), (1, 576, 52, 168), (1, 256, 13, 42), (1, 256, 26, 84), (1, 256, 13, 42), (1, 144, 26, 84), (1, 256, 15, 42), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 60, 168), (1, 1600, 120, 336), (1, 256, 60, 168), (1, 1296, 120, 336), (1, 256, 30, 84), (1, 576, 60, 168), (1, 256, 15, 42), (1, 256, 30, 84), (1, 256, 15, 42), (1, 144, 30, 84), (1, 256, 29, 25), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 116, 100), (1, 1600, 232, 200), (1, 256, 116, 100), (1, 1296, 232, 200), (1, 256, 58, 50), (1, 576, 116, 100), (1, 256, 29, 25), (1, 256, 58, 50), (1, 256, 29, 25), (1, 144, 58, 50), (1, 256, 42, 22), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 168, 88), (1, 1600, 336, 176), (1, 256, 168, 88), (1, 1296, 336, 176), (1, 256, 84, 44), (1, 576, 168, 88), (1, 256, 42, 22), (1, 256, 84, 44), (1, 256, 42, 22), (1, 144, 84, 44), (1, 256, 16, 42), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 64, 168), (1, 1600, 128, 336), (1, 256, 64, 168), (1, 1296, 128, 336), (1, 256, 32, 84), (1, 576, 64, 168), (1, 256, 16, 42), (1, 256, 32, 84), (1, 256, 16, 42), (1, 144, 32, 84), (1, 256, 12, 42), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 48, 168), (1, 1600, 96, 336), (1, 256, 48, 168), (1, 1296, 96, 336), (1, 256, 24, 84), (1, 576, 48, 168), (1, 256, 12, 42), (1, 256, 24, 84), (1, 256, 12, 42), (1, 144, 24, 84), (1, 256, 42, 16), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 168, 64), (1, 1600, 336, 128), (1, 256, 168, 64), (1, 1296, 336, 128), (1, 256, 84, 32), (1, 576, 168, 64), (1, 256, 42, 16), (1, 256, 84, 32), (1, 256, 42, 16), (1, 144, 84, 32), (1, 256, 14, 42), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 56, 168), (1, 1600, 112, 336), (1, 256, 56, 168), (1, 1296, 112, 336), (1, 256, 28, 84), (1, 576, 56, 168), (1, 256, 14, 42), (1, 256, 28, 84), (1, 256, 14, 42), (1, 144, 28, 84), (1, 256, 17, 42), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 68, 168), (1, 1600, 136, 336), (1, 256, 68, 168), (1, 1296, 136, 336), (1, 256, 34, 84), (1, 576, 68, 168), (1, 256, 17, 42), (1, 256, 34, 84), (1, 256, 17, 42), (1, 144, 34, 84), (1, 256, 42, 23), (1, 256, 84, 46), (1, 256, 168, 92), (1, 256, 168, 92), (1, 1600, 336, 184), (1, 256, 168, 92), (1, 1296, 336, 184), (1, 256, 84, 46), (1, 576, 168, 92), (1, 256, 42, 23), (1, 256, 84, 46), (1, 256, 42, 23), (1, 144, 84, 46)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 50, 82), (2, 256, 100, 164), (2, 256, 200, 328), (), (9,), (10,), (8,), (13,), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 200, 304), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 200, 312), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 200, 272), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 200, 336), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 200, 256), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 304, 200), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 272, 200), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 288, 200), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 200, 240), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 200, 280), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 224, 200), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 208, 200), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 200, 320), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 200, 288), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 192, 336), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 200, 200), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 328, 200), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 200, 296), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 200, 328), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 152, 336), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 312, 200), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 280, 200), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 200, 208), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 200, 264), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 248, 200), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 336, 192), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 296, 200), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 200, 248), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 320, 200), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 176, 336), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 216, 200), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 200, 216), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 264, 200), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 160, 336), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 336, 200), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 184, 336), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 168, 336), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 256, 200), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 200, 232), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 336, 152), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 200, 224), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 144, 336), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 336, 160), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 240, 200), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 88, 336), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 104, 336), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 120, 336), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 232, 200), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 336, 176), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 128, 336), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 96, 336), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 336, 128), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 112, 336), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 136, 336), (1, 256, 84, 46), (1, 256, 168, 92), (1, 256, 336, 184)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 50, 82), (2, 256, 100, 164), (2, 256, 200, 328), (), (9,), (10,), (8,), (13,), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 200, 304), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 200, 312), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 200, 272), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 200, 336), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 200, 256), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 304, 200), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 272, 200), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 288, 200), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 200, 240), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 200, 280), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 224, 200), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 208, 200), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 200, 320), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 200, 288), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 192, 336), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 200, 200), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 328, 200), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 200, 296), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 200, 328), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 152, 336), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 312, 200), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 280, 200), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 200, 208), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 200, 264), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 248, 200), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 336, 192), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 296, 200), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 200, 248), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 320, 200), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 176, 336), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 216, 200), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 200, 216), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 264, 200), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 160, 336), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 336, 200), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 184, 336), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 168, 336), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 256, 200), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 200, 232), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 336, 152), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 200, 224), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 144, 336), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 336, 160), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 240, 200), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 88, 336), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 104, 336), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 120, 336), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 232, 200), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 336, 176), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 128, 336), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 96, 336), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 336, 128), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 112, 336), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 136, 336), (1, 256, 84, 46), (1, 256, 168, 92), (1, 256, 336, 184)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_1': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 256, 25, 41), (1, 256, 25, 38), (1, 256, 25, 39), (1, 256, 25, 34), (1, 256, 25, 42), (1, 256, 25, 32), (1, 256, 38, 25), (1, 256, 34, 25), (1, 256, 36, 25), (1, 256, 25, 30), (1, 256, 25, 35), (1, 256, 28, 25), (1, 256, 26, 25), (1, 256, 25, 40), (1, 256, 25, 36), (1, 256, 24, 42), (1, 256, 25, 25), (1, 256, 41, 25), (1, 256, 25, 37), (1, 256, 25, 41), (1, 256, 19, 42), (1, 256, 39, 25), (1, 256, 35, 25), (1, 256, 25, 26), (1, 256, 25, 33), (1, 256, 31, 25), (1, 256, 42, 24), (1, 256, 37, 25), (1, 256, 25, 31), (1, 256, 40, 25), (1, 256, 22, 42), (1, 256, 27, 25), (1, 256, 25, 27), (1, 256, 33, 25), (1, 256, 20, 42), (1, 256, 42, 25), (1, 256, 23, 42), (1, 256, 21, 42), (1, 256, 32, 25), (1, 256, 25, 29), (1, 256, 42, 19), (1, 256, 25, 28), (1, 256, 18, 42), (1, 256, 42, 20), (1, 256, 30, 25), (1, 256, 11, 42), (1, 256, 13, 42), (1, 256, 15, 42), (1, 256, 29, 25), (1, 256, 42, 22), (1, 256, 16, 42), (1, 256, 12, 42), (1, 256, 42, 16), (1, 256, 14, 42), (1, 256, 17, 42), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate_1': dict(
        name=["interpolate"],
        para=dict(
            size=[(100, 164), (25, 41), (100, 152), (25, 38), (100, 156), (25, 39), (100, 136), (25, 34), (100, 168), (25, 42), (100, 128), (25, 32), (152, 100), (38, 25), (136, 100), (34, 25), (144, 100), (36, 25), (100, 120), (25, 30), (100, 140), (25, 35), (112, 100), (28, 25), (104, 100), (26, 25), (100, 160), (25, 40), (100, 144), (25, 36), (96, 168), (24, 42), (100, 100), (25, 25), (164, 100), (41, 25), (100, 148), (25, 37), (100, 164), (25, 41), (76, 168), (19, 42), (156, 100), (39, 25), (140, 100), (35, 25), (100, 104), (25, 26), (100, 132), (25, 33), (124, 100), (31, 25), (168, 96), (42, 24), (148, 100), (37, 25), (100, 124), (25, 31), (160, 100), (40, 25), (88, 168), (22, 42), (108, 100), (27, 25), (100, 108), (25, 27), (132, 100), (33, 25), (80, 168), (20, 42), (168, 100), (42, 25), (92, 168), (23, 42), (84, 168), (21, 42), (128, 100), (32, 25), (100, 116), (25, 29), (168, 76), (42, 19), (100, 112), (25, 28), (72, 168), (18, 42), (168, 80), (42, 20), (120, 100), (30, 25), (44, 168), (11, 42), (52, 168), (13, 42), (60, 168), (15, 42), (116, 100), (29, 25), (168, 88), (42, 22), (64, 168), (16, 42), (48, 168), (12, 42), (168, 64), (42, 16), (56, 168), (14, 42), (68, 168), (17, 42), (168, 92), (42, 23)],
            mode=['bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear'],
            align_corners=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 200, 328), (2, 256, 13, 21), (1, 256, 200, 304), (1, 256, 13, 19), (1, 256, 200, 312), (1, 256, 13, 20), (1, 256, 200, 272), (1, 256, 13, 17), (1, 256, 200, 336), (1, 256, 13, 21), (1, 256, 200, 256), (1, 256, 13, 16), (1, 256, 304, 200), (1, 256, 19, 13), (1, 256, 272, 200), (1, 256, 17, 13), (1, 256, 288, 200), (1, 256, 18, 13), (1, 256, 200, 240), (1, 256, 13, 15), (1, 256, 200, 280), (1, 256, 13, 18), (1, 256, 224, 200), (1, 256, 14, 13), (1, 256, 208, 200), (1, 256, 13, 13), (1, 256, 200, 320), (1, 256, 13, 20), (1, 256, 200, 288), (1, 256, 13, 18), (1, 256, 192, 336), (1, 256, 12, 21), (1, 256, 200, 200), (1, 256, 13, 13), (1, 256, 328, 200), (1, 256, 21, 13), (1, 256, 200, 296), (1, 256, 13, 19), (1, 256, 200, 328), (1, 256, 13, 21), (1, 256, 152, 336), (1, 256, 10, 21), (1, 256, 312, 200), (1, 256, 20, 13), (1, 256, 280, 200), (1, 256, 18, 13), (1, 256, 200, 208), (1, 256, 13, 13), (1, 256, 200, 264), (1, 256, 13, 17), (1, 256, 248, 200), (1, 256, 16, 13), (1, 256, 336, 192), (1, 256, 21, 12), (1, 256, 296, 200), (1, 256, 19, 13), (1, 256, 200, 248), (1, 256, 13, 16), (1, 256, 320, 200), (1, 256, 20, 13), (1, 256, 176, 336), (1, 256, 11, 21), (1, 256, 216, 200), (1, 256, 14, 13), (1, 256, 200, 216), (1, 256, 13, 14), (1, 256, 264, 200), (1, 256, 17, 13), (1, 256, 160, 336), (1, 256, 10, 21), (1, 256, 336, 200), (1, 256, 21, 13), (1, 256, 184, 336), (1, 256, 12, 21), (1, 256, 168, 336), (1, 256, 11, 21), (1, 256, 256, 200), (1, 256, 16, 13), (1, 256, 200, 232), (1, 256, 13, 15), (1, 256, 336, 152), (1, 256, 21, 10), (1, 256, 200, 224), (1, 256, 13, 14), (1, 256, 144, 336), (1, 256, 9, 21), (1, 256, 336, 160), (1, 256, 21, 10), (1, 256, 240, 200), (1, 256, 15, 13), (1, 256, 88, 336), (1, 256, 6, 21), (1, 256, 104, 336), (1, 256, 7, 21), (1, 256, 120, 336), (1, 256, 8, 21), (1, 256, 232, 200), (1, 256, 15, 13), (1, 256, 336, 176), (1, 256, 21, 11), (1, 256, 128, 336), (1, 256, 8, 21), (1, 256, 96, 336), (1, 256, 6, 21), (1, 256, 336, 128), (1, 256, 21, 8), (1, 256, 112, 336), (1, 256, 7, 21), (1, 256, 136, 336), (1, 256, 9, 21), (1, 256, 336, 184), (1, 256, 21, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'linspace': dict(
        name=["linspace"],
        interface=["torch"],
        para=dict(
            start=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            end=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            steps=[164, 100, 82, 50, 41, 25, 152, 76, 38, 156, 78, 39, 136, 68, 34, 168, 84, 42, 128, 64, 32, 144, 72, 36, 120, 60, 30, 140, 70, 35, 112, 56, 28, 104, 52, 26, 160, 80, 40, 96, 48, 24, 148, 74, 37, 19, 132, 66, 33, 124, 62, 31, 88, 44, 22, 108, 54, 27, 20, 92, 46, 23, 21, 116, 58, 29, 18, 11, 13, 15, 16, 12, 14, 17],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[[2, 1, -1, -1], [2, 1, -1, -1], [2, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1], [1, 1, -1, -1]],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 164), (50, 82), (25, 41), (100, 152), (50, 76), (25, 38), (100, 156), (50, 78), (25, 39), (100, 136), (50, 68), (25, 34), (100, 168), (50, 84), (25, 42), (100, 128), (50, 64), (25, 32), (152, 100), (76, 50), (38, 25), (136, 100), (68, 50), (34, 25), (144, 100), (72, 50), (36, 25), (100, 120), (50, 60), (25, 30), (100, 140), (50, 70), (25, 35), (112, 100), (56, 50), (28, 25), (104, 100), (52, 50), (26, 25), (100, 160), (50, 80), (25, 40), (100, 144), (50, 72), (25, 36), (96, 168), (48, 84), (24, 42), (100, 100), (50, 50), (25, 25), (164, 100), (82, 50), (41, 25), (100, 148), (50, 74), (25, 37), (100, 164), (50, 82), (25, 41), (76, 168), (38, 84), (19, 42), (156, 100), (78, 50), (39, 25), (140, 100), (70, 50), (35, 25), (100, 104), (50, 52), (25, 26), (100, 132), (50, 66), (25, 33), (124, 100), (62, 50), (31, 25), (168, 96), (84, 48), (42, 24), (148, 100), (74, 50), (37, 25), (100, 124), (50, 62), (25, 31), (160, 100), (80, 50), (40, 25), (88, 168), (44, 84), (22, 42), (108, 100), (54, 50), (27, 25), (100, 108), (50, 54), (25, 27), (132, 100), (66, 50), (33, 25), (80, 168), (40, 84), (20, 42), (168, 100), (84, 50), (42, 25), (92, 168), (46, 84), (23, 42), (84, 168), (42, 84), (21, 42), (128, 100), (64, 50), (32, 25), (100, 116), (50, 58), (25, 29), (168, 76), (84, 38), (42, 19), (100, 112), (50, 56), (25, 28), (72, 168), (36, 84), (18, 42), (168, 80), (84, 40), (42, 20), (120, 100), (60, 50), (30, 25), (44, 168), (22, 84), (11, 42), (52, 168), (26, 84), (13, 42), (60, 168), (30, 84), (15, 42), (116, 100), (58, 50), (29, 25), (168, 88), (84, 44), (42, 22), (64, 168), (32, 84), (16, 42), (48, 168), (24, 84), (12, 42), (168, 64), (84, 32), (42, 16), (56, 168), (28, 84), (14, 42), (68, 168), (34, 84), (17, 42), (168, 92), (84, 46), (42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((2, 1, 100, 164), (2, 1, 100, 164)), ((2, 256, 100, 164), (2, 2, 100, 164)), ((2, 1, 50, 82), (2, 1, 50, 82)), ((2, 256, 50, 82), (2, 2, 50, 82)), ((2, 1, 25, 41), (2, 1, 25, 41)), ((2, 256, 25, 41), (2, 2, 25, 41)), ((1, 1, 100, 152), (1, 1, 100, 152)), ((1, 256, 100, 152), (1, 2, 100, 152)), ((1, 1, 50, 76), (1, 1, 50, 76)), ((1, 256, 50, 76), (1, 2, 50, 76)), ((1, 1, 25, 38), (1, 1, 25, 38)), ((1, 256, 25, 38), (1, 2, 25, 38)), ((1, 1, 100, 156), (1, 1, 100, 156)), ((1, 256, 100, 156), (1, 2, 100, 156)), ((1, 1, 50, 78), (1, 1, 50, 78)), ((1, 256, 50, 78), (1, 2, 50, 78)), ((1, 1, 25, 39), (1, 1, 25, 39)), ((1, 256, 25, 39), (1, 2, 25, 39)), ((1, 1, 100, 136), (1, 1, 100, 136)), ((1, 256, 100, 136), (1, 2, 100, 136)), ((1, 1, 50, 68), (1, 1, 50, 68)), ((1, 256, 50, 68), (1, 2, 50, 68)), ((1, 1, 25, 34), (1, 1, 25, 34)), ((1, 256, 25, 34), (1, 2, 25, 34)), ((1, 1, 100, 168), (1, 1, 100, 168)), ((1, 256, 100, 168), (1, 2, 100, 168)), ((1, 1, 50, 84), (1, 1, 50, 84)), ((1, 256, 50, 84), (1, 2, 50, 84)), ((1, 1, 25, 42), (1, 1, 25, 42)), ((1, 256, 25, 42), (1, 2, 25, 42)), ((1, 1, 100, 128), (1, 1, 100, 128)), ((1, 256, 100, 128), (1, 2, 100, 128)), ((1, 1, 50, 64), (1, 1, 50, 64)), ((1, 256, 50, 64), (1, 2, 50, 64)), ((1, 1, 25, 32), (1, 1, 25, 32)), ((1, 256, 25, 32), (1, 2, 25, 32)), ((1, 1, 152, 100), (1, 1, 152, 100)), ((1, 256, 152, 100), (1, 2, 152, 100)), ((1, 1, 76, 50), (1, 1, 76, 50)), ((1, 256, 76, 50), (1, 2, 76, 50)), ((1, 1, 38, 25), (1, 1, 38, 25)), ((1, 256, 38, 25), (1, 2, 38, 25)), ((1, 1, 136, 100), (1, 1, 136, 100)), ((1, 256, 136, 100), (1, 2, 136, 100)), ((1, 1, 68, 50), (1, 1, 68, 50)), ((1, 256, 68, 50), (1, 2, 68, 50)), ((1, 1, 34, 25), (1, 1, 34, 25)), ((1, 256, 34, 25), (1, 2, 34, 25)), ((1, 1, 144, 100), (1, 1, 144, 100)), ((1, 256, 144, 100), (1, 2, 144, 100)), ((1, 1, 72, 50), (1, 1, 72, 50)), ((1, 256, 72, 50), (1, 2, 72, 50)), ((1, 1, 36, 25), (1, 1, 36, 25)), ((1, 256, 36, 25), (1, 2, 36, 25)), ((1, 1, 100, 120), (1, 1, 100, 120)), ((1, 256, 100, 120), (1, 2, 100, 120)), ((1, 1, 50, 60), (1, 1, 50, 60)), ((1, 256, 50, 60), (1, 2, 50, 60)), ((1, 1, 25, 30), (1, 1, 25, 30)), ((1, 256, 25, 30), (1, 2, 25, 30)), ((1, 1, 100, 140), (1, 1, 100, 140)), ((1, 256, 100, 140), (1, 2, 100, 140)), ((1, 1, 50, 70), (1, 1, 50, 70)), ((1, 256, 50, 70), (1, 2, 50, 70)), ((1, 1, 25, 35), (1, 1, 25, 35)), ((1, 256, 25, 35), (1, 2, 25, 35)), ((1, 1, 112, 100), (1, 1, 112, 100)), ((1, 256, 112, 100), (1, 2, 112, 100)), ((1, 1, 56, 50), (1, 1, 56, 50)), ((1, 256, 56, 50), (1, 2, 56, 50)), ((1, 1, 28, 25), (1, 1, 28, 25)), ((1, 256, 28, 25), (1, 2, 28, 25)), ((1, 1, 104, 100), (1, 1, 104, 100)), ((1, 256, 104, 100), (1, 2, 104, 100)), ((1, 1, 52, 50), (1, 1, 52, 50)), ((1, 256, 52, 50), (1, 2, 52, 50)), ((1, 1, 26, 25), (1, 1, 26, 25)), ((1, 256, 26, 25), (1, 2, 26, 25)), ((1, 1, 100, 160), (1, 1, 100, 160)), ((1, 256, 100, 160), (1, 2, 100, 160)), ((1, 1, 50, 80), (1, 1, 50, 80)), ((1, 256, 50, 80), (1, 2, 50, 80)), ((1, 1, 25, 40), (1, 1, 25, 40)), ((1, 256, 25, 40), (1, 2, 25, 40)), ((1, 1, 100, 144), (1, 1, 100, 144)), ((1, 256, 100, 144), (1, 2, 100, 144)), ((1, 1, 50, 72), (1, 1, 50, 72)), ((1, 256, 50, 72), (1, 2, 50, 72)), ((1, 1, 25, 36), (1, 1, 25, 36)), ((1, 256, 25, 36), (1, 2, 25, 36)), ((1, 1, 96, 168), (1, 1, 96, 168)), ((1, 256, 96, 168), (1, 2, 96, 168)), ((1, 1, 48, 84), (1, 1, 48, 84)), ((1, 256, 48, 84), (1, 2, 48, 84)), ((1, 1, 24, 42), (1, 1, 24, 42)), ((1, 256, 24, 42), (1, 2, 24, 42)), ((1, 1, 100, 100), (1, 1, 100, 100)), ((1, 256, 100, 100), (1, 2, 100, 100)), ((1, 1, 50, 50), (1, 1, 50, 50)), ((1, 256, 50, 50), (1, 2, 50, 50)), ((1, 1, 25, 25), (1, 1, 25, 25)), ((1, 256, 25, 25), (1, 2, 25, 25)), ((1, 1, 164, 100), (1, 1, 164, 100)), ((1, 256, 164, 100), (1, 2, 164, 100)), ((1, 1, 82, 50), (1, 1, 82, 50)), ((1, 256, 82, 50), (1, 2, 82, 50)), ((1, 1, 41, 25), (1, 1, 41, 25)), ((1, 256, 41, 25), (1, 2, 41, 25)), ((1, 1, 100, 148), (1, 1, 100, 148)), ((1, 256, 100, 148), (1, 2, 100, 148)), ((1, 1, 50, 74), (1, 1, 50, 74)), ((1, 256, 50, 74), (1, 2, 50, 74)), ((1, 1, 25, 37), (1, 1, 25, 37)), ((1, 256, 25, 37), (1, 2, 25, 37)), ((1, 1, 100, 164), (1, 1, 100, 164)), ((1, 256, 100, 164), (1, 2, 100, 164)), ((1, 1, 50, 82), (1, 1, 50, 82)), ((1, 256, 50, 82), (1, 2, 50, 82)), ((1, 1, 25, 41), (1, 1, 25, 41)), ((1, 256, 25, 41), (1, 2, 25, 41)), ((1, 1, 76, 168), (1, 1, 76, 168)), ((1, 256, 76, 168), (1, 2, 76, 168)), ((1, 1, 38, 84), (1, 1, 38, 84)), ((1, 256, 38, 84), (1, 2, 38, 84)), ((1, 1, 19, 42), (1, 1, 19, 42)), ((1, 256, 19, 42), (1, 2, 19, 42)), ((1, 1, 156, 100), (1, 1, 156, 100)), ((1, 256, 156, 100), (1, 2, 156, 100)), ((1, 1, 78, 50), (1, 1, 78, 50)), ((1, 256, 78, 50), (1, 2, 78, 50)), ((1, 1, 39, 25), (1, 1, 39, 25)), ((1, 256, 39, 25), (1, 2, 39, 25)), ((1, 1, 140, 100), (1, 1, 140, 100)), ((1, 256, 140, 100), (1, 2, 140, 100)), ((1, 1, 70, 50), (1, 1, 70, 50)), ((1, 256, 70, 50), (1, 2, 70, 50)), ((1, 1, 35, 25), (1, 1, 35, 25)), ((1, 256, 35, 25), (1, 2, 35, 25)), ((1, 1, 100, 104), (1, 1, 100, 104)), ((1, 256, 100, 104), (1, 2, 100, 104)), ((1, 1, 50, 52), (1, 1, 50, 52)), ((1, 256, 50, 52), (1, 2, 50, 52)), ((1, 1, 25, 26), (1, 1, 25, 26)), ((1, 256, 25, 26), (1, 2, 25, 26)), ((1, 1, 100, 132), (1, 1, 100, 132)), ((1, 256, 100, 132), (1, 2, 100, 132)), ((1, 1, 50, 66), (1, 1, 50, 66)), ((1, 256, 50, 66), (1, 2, 50, 66)), ((1, 1, 25, 33), (1, 1, 25, 33)), ((1, 256, 25, 33), (1, 2, 25, 33)), ((1, 1, 124, 100), (1, 1, 124, 100)), ((1, 256, 124, 100), (1, 2, 124, 100)), ((1, 1, 62, 50), (1, 1, 62, 50)), ((1, 256, 62, 50), (1, 2, 62, 50)), ((1, 1, 31, 25), (1, 1, 31, 25)), ((1, 256, 31, 25), (1, 2, 31, 25)), ((1, 1, 168, 96), (1, 1, 168, 96)), ((1, 256, 168, 96), (1, 2, 168, 96)), ((1, 1, 84, 48), (1, 1, 84, 48)), ((1, 256, 84, 48), (1, 2, 84, 48)), ((1, 1, 42, 24), (1, 1, 42, 24)), ((1, 256, 42, 24), (1, 2, 42, 24)), ((1, 1, 148, 100), (1, 1, 148, 100)), ((1, 256, 148, 100), (1, 2, 148, 100)), ((1, 1, 74, 50), (1, 1, 74, 50)), ((1, 256, 74, 50), (1, 2, 74, 50)), ((1, 1, 37, 25), (1, 1, 37, 25)), ((1, 256, 37, 25), (1, 2, 37, 25)), ((1, 1, 100, 124), (1, 1, 100, 124)), ((1, 256, 100, 124), (1, 2, 100, 124)), ((1, 1, 50, 62), (1, 1, 50, 62)), ((1, 256, 50, 62), (1, 2, 50, 62)), ((1, 1, 25, 31), (1, 1, 25, 31)), ((1, 256, 25, 31), (1, 2, 25, 31)), ((1, 1, 160, 100), (1, 1, 160, 100)), ((1, 256, 160, 100), (1, 2, 160, 100)), ((1, 1, 80, 50), (1, 1, 80, 50)), ((1, 256, 80, 50), (1, 2, 80, 50)), ((1, 1, 40, 25), (1, 1, 40, 25)), ((1, 256, 40, 25), (1, 2, 40, 25)), ((1, 1, 88, 168), (1, 1, 88, 168)), ((1, 256, 88, 168), (1, 2, 88, 168)), ((1, 1, 44, 84), (1, 1, 44, 84)), ((1, 256, 44, 84), (1, 2, 44, 84)), ((1, 1, 22, 42), (1, 1, 22, 42)), ((1, 256, 22, 42), (1, 2, 22, 42)), ((1, 1, 108, 100), (1, 1, 108, 100)), ((1, 256, 108, 100), (1, 2, 108, 100)), ((1, 1, 54, 50), (1, 1, 54, 50)), ((1, 256, 54, 50), (1, 2, 54, 50)), ((1, 1, 27, 25), (1, 1, 27, 25)), ((1, 256, 27, 25), (1, 2, 27, 25)), ((1, 1, 100, 108), (1, 1, 100, 108)), ((1, 256, 100, 108), (1, 2, 100, 108)), ((1, 1, 50, 54), (1, 1, 50, 54)), ((1, 256, 50, 54), (1, 2, 50, 54)), ((1, 1, 25, 27), (1, 1, 25, 27)), ((1, 256, 25, 27), (1, 2, 25, 27)), ((1, 1, 132, 100), (1, 1, 132, 100)), ((1, 256, 132, 100), (1, 2, 132, 100)), ((1, 1, 66, 50), (1, 1, 66, 50)), ((1, 256, 66, 50), (1, 2, 66, 50)), ((1, 1, 33, 25), (1, 1, 33, 25)), ((1, 256, 33, 25), (1, 2, 33, 25)), ((1, 1, 80, 168), (1, 1, 80, 168)), ((1, 256, 80, 168), (1, 2, 80, 168)), ((1, 1, 40, 84), (1, 1, 40, 84)), ((1, 256, 40, 84), (1, 2, 40, 84)), ((1, 1, 20, 42), (1, 1, 20, 42)), ((1, 256, 20, 42), (1, 2, 20, 42)), ((1, 1, 168, 100), (1, 1, 168, 100)), ((1, 256, 168, 100), (1, 2, 168, 100)), ((1, 1, 84, 50), (1, 1, 84, 50)), ((1, 256, 84, 50), (1, 2, 84, 50)), ((1, 1, 42, 25), (1, 1, 42, 25)), ((1, 256, 42, 25), (1, 2, 42, 25)), ((1, 1, 92, 168), (1, 1, 92, 168)), ((1, 256, 92, 168), (1, 2, 92, 168)), ((1, 1, 46, 84), (1, 1, 46, 84)), ((1, 256, 46, 84), (1, 2, 46, 84)), ((1, 1, 23, 42), (1, 1, 23, 42)), ((1, 256, 23, 42), (1, 2, 23, 42)), ((1, 1, 84, 168), (1, 1, 84, 168)), ((1, 256, 84, 168), (1, 2, 84, 168)), ((1, 1, 42, 84), (1, 1, 42, 84)), ((1, 256, 42, 84), (1, 2, 42, 84)), ((1, 1, 21, 42), (1, 1, 21, 42)), ((1, 256, 21, 42), (1, 2, 21, 42)), ((1, 1, 128, 100), (1, 1, 128, 100)), ((1, 256, 128, 100), (1, 2, 128, 100)), ((1, 1, 64, 50), (1, 1, 64, 50)), ((1, 256, 64, 50), (1, 2, 64, 50)), ((1, 1, 32, 25), (1, 1, 32, 25)), ((1, 256, 32, 25), (1, 2, 32, 25)), ((1, 1, 100, 116), (1, 1, 100, 116)), ((1, 256, 100, 116), (1, 2, 100, 116)), ((1, 1, 50, 58), (1, 1, 50, 58)), ((1, 256, 50, 58), (1, 2, 50, 58)), ((1, 1, 25, 29), (1, 1, 25, 29)), ((1, 256, 25, 29), (1, 2, 25, 29)), ((1, 1, 168, 76), (1, 1, 168, 76)), ((1, 256, 168, 76), (1, 2, 168, 76)), ((1, 1, 84, 38), (1, 1, 84, 38)), ((1, 256, 84, 38), (1, 2, 84, 38)), ((1, 1, 42, 19), (1, 1, 42, 19)), ((1, 256, 42, 19), (1, 2, 42, 19)), ((1, 1, 100, 112), (1, 1, 100, 112)), ((1, 256, 100, 112), (1, 2, 100, 112)), ((1, 1, 50, 56), (1, 1, 50, 56)), ((1, 256, 50, 56), (1, 2, 50, 56)), ((1, 1, 25, 28), (1, 1, 25, 28)), ((1, 256, 25, 28), (1, 2, 25, 28)), ((1, 1, 72, 168), (1, 1, 72, 168)), ((1, 256, 72, 168), (1, 2, 72, 168)), ((1, 1, 36, 84), (1, 1, 36, 84)), ((1, 256, 36, 84), (1, 2, 36, 84)), ((1, 1, 18, 42), (1, 1, 18, 42)), ((1, 256, 18, 42), (1, 2, 18, 42)), ((1, 1, 168, 80), (1, 1, 168, 80)), ((1, 256, 168, 80), (1, 2, 168, 80)), ((1, 1, 84, 40), (1, 1, 84, 40)), ((1, 256, 84, 40), (1, 2, 84, 40)), ((1, 1, 42, 20), (1, 1, 42, 20)), ((1, 256, 42, 20), (1, 2, 42, 20)), ((1, 1, 120, 100), (1, 1, 120, 100)), ((1, 256, 120, 100), (1, 2, 120, 100)), ((1, 1, 60, 50), (1, 1, 60, 50)), ((1, 256, 60, 50), (1, 2, 60, 50)), ((1, 1, 30, 25), (1, 1, 30, 25)), ((1, 256, 30, 25), (1, 2, 30, 25)), ((1, 1, 44, 168), (1, 1, 44, 168)), ((1, 256, 44, 168), (1, 2, 44, 168)), ((1, 1, 22, 84), (1, 1, 22, 84)), ((1, 256, 22, 84), (1, 2, 22, 84)), ((1, 1, 11, 42), (1, 1, 11, 42)), ((1, 256, 11, 42), (1, 2, 11, 42)), ((1, 1, 52, 168), (1, 1, 52, 168)), ((1, 256, 52, 168), (1, 2, 52, 168)), ((1, 1, 26, 84), (1, 1, 26, 84)), ((1, 256, 26, 84), (1, 2, 26, 84)), ((1, 1, 13, 42), (1, 1, 13, 42)), ((1, 256, 13, 42), (1, 2, 13, 42)), ((1, 1, 60, 168), (1, 1, 60, 168)), ((1, 256, 60, 168), (1, 2, 60, 168)), ((1, 1, 30, 84), (1, 1, 30, 84)), ((1, 256, 30, 84), (1, 2, 30, 84)), ((1, 1, 15, 42), (1, 1, 15, 42)), ((1, 256, 15, 42), (1, 2, 15, 42)), ((1, 1, 116, 100), (1, 1, 116, 100)), ((1, 256, 116, 100), (1, 2, 116, 100)), ((1, 1, 58, 50), (1, 1, 58, 50)), ((1, 256, 58, 50), (1, 2, 58, 50)), ((1, 1, 29, 25), (1, 1, 29, 25)), ((1, 256, 29, 25), (1, 2, 29, 25)), ((1, 1, 168, 88), (1, 1, 168, 88)), ((1, 256, 168, 88), (1, 2, 168, 88)), ((1, 1, 84, 44), (1, 1, 84, 44)), ((1, 256, 84, 44), (1, 2, 84, 44)), ((1, 1, 42, 22), (1, 1, 42, 22)), ((1, 256, 42, 22), (1, 2, 42, 22)), ((1, 1, 64, 168), (1, 1, 64, 168)), ((1, 256, 64, 168), (1, 2, 64, 168)), ((1, 1, 32, 84), (1, 1, 32, 84)), ((1, 256, 32, 84), (1, 2, 32, 84)), ((1, 1, 16, 42), (1, 1, 16, 42)), ((1, 256, 16, 42), (1, 2, 16, 42)), ((1, 1, 48, 168), (1, 1, 48, 168)), ((1, 256, 48, 168), (1, 2, 48, 168)), ((1, 1, 24, 84), (1, 1, 24, 84)), ((1, 256, 24, 84), (1, 2, 24, 84)), ((1, 1, 12, 42), (1, 1, 12, 42)), ((1, 256, 12, 42), (1, 2, 12, 42)), ((1, 1, 168, 64), (1, 1, 168, 64)), ((1, 256, 168, 64), (1, 2, 168, 64)), ((1, 1, 84, 32), (1, 1, 84, 32)), ((1, 256, 84, 32), (1, 2, 84, 32)), ((1, 1, 42, 16), (1, 1, 42, 16)), ((1, 256, 42, 16), (1, 2, 42, 16)), ((1, 1, 56, 168), (1, 1, 56, 168)), ((1, 256, 56, 168), (1, 2, 56, 168)), ((1, 1, 28, 84), (1, 1, 28, 84)), ((1, 256, 28, 84), (1, 2, 28, 84)), ((1, 1, 14, 42), (1, 1, 14, 42)), ((1, 256, 14, 42), (1, 2, 14, 42)), ((1, 1, 68, 168), (1, 1, 68, 168)), ((1, 256, 68, 168), (1, 2, 68, 168)), ((1, 1, 34, 84), (1, 1, 34, 84)), ((1, 256, 34, 84), (1, 2, 34, 84)), ((1, 1, 17, 42), (1, 1, 17, 42)), ((1, 256, 17, 42), (1, 2, 17, 42)), ((1, 1, 168, 92), (1, 1, 168, 92)), ((1, 256, 168, 92), (1, 2, 168, 92)), ((1, 1, 84, 46), (1, 1, 84, 46)), ((1, 256, 84, 46), (1, 2, 84, 46)), ((1, 1, 42, 23), (1, 1, 42, 23)), ((1, 256, 42, 23), (1, 2, 42, 23))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'group_norm': dict(
        name=["group_norm"],
        para=dict(
            num_groups
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 256, 100, 164), (2, 256, 40, 40), (2, 256, 36, 36), (2, 256, 50, 82), (2, 256, 24, 24), (2, 256, 25, 41), (2, 256, 16, 16), (2, 256, 12, 12), (1, 256, 100, 152), (1, 256, 40, 40), (1, 256, 36, 36), (1, 256, 50, 76), (1, 256, 24, 24), (1, 256, 25, 38), (1, 256, 16, 16), (1, 256, 12, 12), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate_2': dict(
        name=["interpolate"],
        para=dict(
            scale_factor=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            mode=['bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear', 'bilinear'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 100, 164), (2, 256, 50, 82), (2, 256, 25, 41), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (), (2,), (4,), (1,), (3,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (), (2,), (4,), (1,), (3,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (4,), (9, 65600), (10, 65600), (8, 16400), (13, 4100), (10, 4100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (4,), (9, 65600), (10, 65600), (8, 16400), (13, 4100), (10, 4100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sqrt': dict(
        name=["sqrt"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[80, 80, 80, 80, 80, 1, 1.1920928955078125e-07],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(40, 40), (36, 36), (24, 24), (16, 16), (12, 12), (), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 48, 96, 192, 384, 1, 48, 96, 192, 384],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (5,), (5,), (5,), (5,), (4,), (4,), (4,), (4,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'le': dict(
        name=["le"],
        interface=["torch.Tensor"],
        para=dict(
            other=[96, 192, 384, 768, 2048, 96, 192, 384, 768, 2048],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (5,), (5,), (5,), (5,), (4,), (4,), (4,), (4,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (4,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (4,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (4,), (3872, 80)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 2, 3.0, 2, 3.0, 2, 3.0, 2, 3.0, 1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (9,), (9,), (10,), (10,), (8,), (8,), (13,), (13,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.2, 0.2, 0.2, 0.2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[-1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 800, 1312), (2, 800, 1312), (1, 800, 1088), (2, 800, 1088), (3, 800, 1088)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sum_1': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[-1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5, 800), (2, 800), (1, 800), (3, 800)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[800, 1312, 1088],
        ),
    ),

    'sum_2': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(800, 1312), (800, 1088), (3200,), (2592,), (1152,), (512,), (288,), (1,), (2,), (3,), (9,), (5,), (6,), (10,), (12,), (13,), (7,), (4,), (8,), (18,), (11,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(800, 1312), (800, 1312), (800, 1088), (800, 1088)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(800, 1), (1312,), (800, 1), (1088,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sum_3': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(800, 1312), (800, 1088)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1312, 800],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.025, 0.027777777777777776, 0.041666666666666664, 0.0625, 0.08333333333333333],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch"],
        para=dict(
            other=[0.025, 0.027777777777777776, 0.041666666666666664, 0.0625, 0.08333333333333333],
            rounding_mode=['trunc', 'trunc', 'trunc', 'trunc', 'trunc'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((9, 200, 328), (0, 200, 328)), ((8, 200, 328), (2, 200, 328)), ((0, 100, 164), (8, 100, 164)), ((0, 50, 82), (13, 50, 82)), ((0, 50, 82), (10, 50, 82))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((9, 200, 328), (0, 200, 328)), ((8, 200, 328), (2, 200, 328)), ((0, 100, 164), (8, 100, 164)), ((0, 50, 82), (13, 50, 82)), ((0, 50, 82), (10, 50, 82)), ((1600, 80), (1296, 80), (576, 80), (256, 80), (144, 80)), ((1600, 200, 304), (1296, 200, 304), (576, 200, 304), (256, 200, 304), (144, 200, 304)), ((1600, 200, 312), (1296, 200, 312), (576, 200, 312), (256, 200, 312), (144, 200, 312)), ((1600, 200, 272), (1296, 200, 272), (576, 200, 272), (256, 200, 272), (144, 200, 272)), ((1600, 200, 336), (1296, 200, 336), (576, 200, 336), (256, 200, 336), (144, 200, 336)), ((1600, 200, 256), (1296, 200, 256), (576, 200, 256), (256, 200, 256), (144, 200, 256)), ((1600, 304, 200), (1296, 304, 200), (576, 304, 200), (256, 304, 200), (144, 304, 200)), ((1600, 272, 200), (1296, 272, 200), (576, 272, 200), (256, 272, 200), (144, 272, 200)), ((1600, 288, 200), (1296, 288, 200), (576, 288, 200), (256, 288, 200), (144, 288, 200)), ((1600, 200, 240), (1296, 200, 240), (576, 200, 240), (256, 200, 240), (144, 200, 240)), ((1600, 200, 280), (1296, 200, 280), (576, 200, 280), (256, 200, 280), (144, 200, 280)), ((1600, 224, 200), (1296, 224, 200), (576, 224, 200), (256, 224, 200), (144, 224, 200)), ((1600, 208, 200), (1296, 208, 200), (576, 208, 200), (256, 208, 200), (144, 208, 200)), ((1600, 200, 320), (1296, 200, 320), (576, 200, 320), (256, 200, 320), (144, 200, 320)), ((1600, 200, 288), (1296, 200, 288), (576, 200, 288), (256, 200, 288), (144, 200, 288)), ((1600, 192, 336), (1296, 192, 336), (576, 192, 336), (256, 192, 336), (144, 192, 336)), ((1600, 200, 200), (1296, 200, 200), (576, 200, 200), (256, 200, 200), (144, 200, 200)), ((1600, 328, 200), (1296, 328, 200), (576, 328, 200), (256, 328, 200), (144, 328, 200)), ((1600, 200, 296), (1296, 200, 296), (576, 200, 296), (256, 200, 296), (144, 200, 296)), ((1600, 200, 328), (1296, 200, 328), (576, 200, 328), (256, 200, 328), (144, 200, 328)), ((1600, 152, 336), (1296, 152, 336), (576, 152, 336), (256, 152, 336), (144, 152, 336)), ((1600, 312, 200), (1296, 312, 200), (576, 312, 200), (256, 312, 200), (144, 312, 200)), ((1600, 280, 200), (1296, 280, 200), (576, 280, 200), (256, 280, 200), (144, 280, 200)), ((1600, 200, 208), (1296, 200, 208), (576, 200, 208), (256, 200, 208), (144, 200, 208)), ((1600, 200, 264), (1296, 200, 264), (576, 200, 264), (256, 200, 264), (144, 200, 264)), ((1600, 248, 200), (1296, 248, 200), (576, 248, 200), (256, 248, 200), (144, 248, 200)), ((1600, 336, 192), (1296, 336, 192), (576, 336, 192), (256, 336, 192), (144, 336, 192)), ((1600, 296, 200), (1296, 296, 200), (576, 296, 200), (256, 296, 200), (144, 296, 200)), ((1600, 200, 248), (1296, 200, 248), (576, 200, 248), (256, 200, 248), (144, 200, 248)), ((1600, 320, 200), (1296, 320, 200), (576, 320, 200), (256, 320, 200), (144, 320, 200)), ((1600, 176, 336), (1296, 176, 336), (576, 176, 336), (256, 176, 336), (144, 176, 336)), ((1600, 216, 200), (1296, 216, 200), (576, 216, 200), (256, 216, 200), (144, 216, 200)), ((1600, 200, 216), (1296, 200, 216), (576, 200, 216), (256, 200, 216), (144, 200, 216)), ((1600, 264, 200), (1296, 264, 200), (576, 264, 200), (256, 264, 200), (144, 264, 200)), ((1600, 160, 336), (1296, 160, 336), (576, 160, 336), (256, 160, 336), (144, 160, 336)), ((1600, 336, 200), (1296, 336, 200), (576, 336, 200), (256, 336, 200), (144, 336, 200)), ((1600, 184, 336), (1296, 184, 336), (576, 184, 336), (256, 184, 336), (144, 184, 336)), ((1600, 168, 336), (1296, 168, 336), (576, 168, 336), (256, 168, 336), (144, 168, 336)), ((1600, 256, 200), (1296, 256, 200), (576, 256, 200), (256, 256, 200), (144, 256, 200)), ((1600, 200, 232), (1296, 200, 232), (576, 200, 232), (256, 200, 232), (144, 200, 232)), ((1600, 336, 152), (1296, 336, 152), (576, 336, 152), (256, 336, 152), (144, 336, 152)), ((1600, 200, 224), (1296, 200, 224), (576, 200, 224), (256, 200, 224), (144, 200, 224)), ((1600, 144, 336), (1296, 144, 336), (576, 144, 336), (256, 144, 336), (144, 144, 336)), ((1600, 336, 160), (1296, 336, 160), (576, 336, 160), (256, 336, 160), (144, 336, 160)), ((1600, 240, 200), (1296, 240, 200), (576, 240, 200), (256, 240, 200), (144, 240, 200)), ((1600, 88, 336), (1296, 88, 336), (576, 88, 336), (256, 88, 336), (144, 88, 336)), ((1600, 104, 336), (1296, 104, 336), (576, 104, 336), (256, 104, 336), (144, 104, 336)), ((1600, 120, 336), (1296, 120, 336), (576, 120, 336), (256, 120, 336), (144, 120, 336)), ((1600, 232, 200), (1296, 232, 200), (576, 232, 200), (256, 232, 200), (144, 232, 200)), ((1600, 336, 176), (1296, 336, 176), (576, 336, 176), (256, 336, 176), (144, 336, 176)), ((1600, 128, 336), (1296, 128, 336), (576, 128, 336), (256, 128, 336), (144, 128, 336)), ((1600, 96, 336), (1296, 96, 336), (576, 96, 336), (256, 96, 336), (144, 96, 336)), ((1600, 336, 128), (1296, 336, 128), (576, 336, 128), (256, 336, 128), (144, 336, 128)), ((1600, 112, 336), (1296, 112, 336), (576, 112, 336), (256, 112, 336), (144, 112, 336)), ((1600, 136, 336), (1296, 136, 336), (576, 136, 336), (256, 136, 336), (144, 136, 336)), ((1600, 336, 184), (1296, 336, 184), (576, 336, 184), (256, 336, 184), (144, 336, 184))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1600,), (1600,)), ((1296,), (1296,)), ((576,), (576,)), ((256,), (256,)), ((144,), (144,))],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_4': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1600,), (1600,)), ((1296,), (1296,)), ((576,), (576,)), ((256,), (256,)), ((144,), (144,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 80, 40, 40), (2, 80, 36, 36), (2, 80, 24, 24), (2, 80, 16, 16), (2, 80, 12, 12), (1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(9, 200, 328), (10, 200, 328), (8, 100, 164), (13, 50, 82), (10, 50, 82), (1, 1600, 200, 304), (1, 80, 40, 40), (1, 1296, 200, 304), (1, 80, 36, 36), (1, 576, 100, 152), (1, 80, 24, 24), (1, 256, 50, 76), (1, 80, 16, 16), (1, 144, 50, 76), (1, 80, 12, 12), (1, 1600, 200, 312), (1, 1296, 200, 312), (1, 576, 100, 156), (1, 256, 50, 78), (1, 144, 50, 78), (1, 1600, 200, 272), (1, 1296, 200, 272), (1, 576, 100, 136), (1, 256, 50, 68), (1, 144, 50, 68), (1, 1600, 200, 336), (1, 1296, 200, 336), (1, 576, 100, 168), (1, 256, 50, 84), (1, 144, 50, 84), (1, 1600, 200, 256), (1, 1296, 200, 256), (1, 576, 100, 128), (1, 256, 50, 64), (1, 144, 50, 64), (1, 1600, 304, 200), (1, 1296, 304, 200), (1, 576, 152, 100), (1, 256, 76, 50), (1, 144, 76, 50), (1, 1600, 272, 200), (1, 1296, 272, 200), (1, 576, 136, 100), (1, 256, 68, 50), (1, 144, 68, 50), (1, 1600, 288, 200), (1, 1296, 288, 200), (1, 576, 144, 100), (1, 256, 72, 50), (1, 144, 72, 50), (1, 1600, 200, 240), (1, 1296, 200, 240), (1, 576, 100, 120), (1, 256, 50, 60), (1, 144, 50, 60), (1, 1600, 200, 280), (1, 1296, 200, 280), (1, 576, 100, 140), (1, 256, 50, 70), (1, 144, 50, 70), (1, 1600, 224, 200), (1, 1296, 224, 200), (1, 576, 112, 100), (1, 256, 56, 50), (1, 144, 56, 50), (1, 1600, 208, 200), (1, 1296, 208, 200), (1, 576, 104, 100), (1, 256, 52, 50), (1, 144, 52, 50), (1, 1600, 200, 320), (1, 1296, 200, 320), (1, 576, 100, 160), (1, 256, 50, 80), (1, 144, 50, 80), (1, 1600, 200, 288), (1, 1296, 200, 288), (1, 576, 100, 144), (1, 256, 50, 72), (1, 144, 50, 72), (1, 1600, 192, 336), (1, 1296, 192, 336), (1, 576, 96, 168), (1, 256, 48, 84), (1, 144, 48, 84), (1, 1600, 200, 200), (1, 1296, 200, 200), (1, 576, 100, 100), (1, 256, 50, 50), (1, 144, 50, 50), (1, 1600, 328, 200), (1, 1296, 328, 200), (1, 576, 164, 100), (1, 256, 82, 50), (1, 144, 82, 50), (1, 1600, 200, 296), (1, 1296, 200, 296), (1, 576, 100, 148), (1, 256, 50, 74), (1, 144, 50, 74), (1, 1600, 200, 328), (1, 1296, 200, 328), (1, 576, 100, 164), (1, 256, 50, 82), (1, 144, 50, 82), (1, 1600, 152, 336), (1, 1296, 152, 336), (1, 576, 76, 168), (1, 256, 38, 84), (1, 144, 38, 84), (1, 1600, 312, 200), (1, 1296, 312, 200), (1, 576, 156, 100), (1, 256, 78, 50), (1, 144, 78, 50), (1, 1600, 280, 200), (1, 1296, 280, 200), (1, 576, 140, 100), (1, 256, 70, 50), (1, 144, 70, 50), (1, 1600, 200, 208), (1, 1296, 200, 208), (1, 576, 100, 104), (1, 256, 50, 52), (1, 144, 50, 52), (1, 1600, 200, 264), (1, 1296, 200, 264), (1, 576, 100, 132), (1, 256, 50, 66), (1, 144, 50, 66), (1, 1600, 248, 200), (1, 1296, 248, 200), (1, 576, 124, 100), (1, 256, 62, 50), (1, 144, 62, 50), (1, 1600, 336, 192), (1, 1296, 336, 192), (1, 576, 168, 96), (1, 256, 84, 48), (1, 144, 84, 48), (1, 1600, 296, 200), (1, 1296, 296, 200), (1, 576, 148, 100), (1, 256, 74, 50), (1, 144, 74, 50), (1, 1600, 200, 248), (1, 1296, 200, 248), (1, 576, 100, 124), (1, 256, 50, 62), (1, 144, 50, 62), (1, 1600, 320, 200), (1, 1296, 320, 200), (1, 576, 160, 100), (1, 256, 80, 50), (1, 144, 80, 50), (1, 1600, 176, 336), (1, 1296, 176, 336), (1, 576, 88, 168), (1, 256, 44, 84), (1, 144, 44, 84), (1, 1600, 216, 200), (1, 1296, 216, 200), (1, 576, 108, 100), (1, 256, 54, 50), (1, 144, 54, 50), (1, 1600, 200, 216), (1, 1296, 200, 216), (1, 576, 100, 108), (1, 256, 50, 54), (1, 144, 50, 54), (1, 1600, 264, 200), (1, 1296, 264, 200), (1, 576, 132, 100), (1, 256, 66, 50), (1, 144, 66, 50), (1, 1600, 160, 336), (1, 1296, 160, 336), (1, 576, 80, 168), (1, 256, 40, 84), (1, 144, 40, 84), (1, 1600, 336, 200), (1, 1296, 336, 200), (1, 576, 168, 100), (1, 256, 84, 50), (1, 144, 84, 50), (1, 1600, 184, 336), (1, 1296, 184, 336), (1, 576, 92, 168), (1, 256, 46, 84), (1, 144, 46, 84), (1, 1600, 168, 336), (1, 1296, 168, 336), (1, 576, 84, 168), (1, 256, 42, 84), (1, 144, 42, 84), (1, 1600, 256, 200), (1, 1296, 256, 200), (1, 576, 128, 100), (1, 256, 64, 50), (1, 144, 64, 50), (1, 1600, 200, 232), (1, 1296, 200, 232), (1, 576, 100, 116), (1, 256, 50, 58), (1, 144, 50, 58), (1, 1600, 336, 152), (1, 1296, 336, 152), (1, 576, 168, 76), (1, 256, 84, 38), (1, 144, 84, 38), (1, 1600, 200, 224), (1, 1296, 200, 224), (1, 576, 100, 112), (1, 256, 50, 56), (1, 144, 50, 56), (1, 1600, 144, 336), (1, 1296, 144, 336), (1, 576, 72, 168), (1, 256, 36, 84), (1, 144, 36, 84), (1, 1600, 336, 160), (1, 1296, 336, 160), (1, 576, 168, 80), (1, 256, 84, 40), (1, 144, 84, 40), (1, 1600, 240, 200), (1, 1296, 240, 200), (1, 576, 120, 100), (1, 256, 60, 50), (1, 144, 60, 50), (1, 1600, 88, 336), (1, 1296, 88, 336), (1, 576, 44, 168), (1, 256, 22, 84), (1, 144, 22, 84), (1, 1600, 104, 336), (1, 1296, 104, 336), (1, 576, 52, 168), (1, 256, 26, 84), (1, 144, 26, 84), (1, 1600, 120, 336), (1, 1296, 120, 336), (1, 576, 60, 168), (1, 256, 30, 84), (1, 144, 30, 84), (1, 1600, 232, 200), (1, 1296, 232, 200), (1, 576, 116, 100), (1, 256, 58, 50), (1, 144, 58, 50), (1, 1600, 336, 176), (1, 1296, 336, 176), (1, 576, 168, 88), (1, 256, 84, 44), (1, 144, 84, 44), (1, 1600, 128, 336), (1, 1296, 128, 336), (1, 576, 64, 168), (1, 256, 32, 84), (1, 144, 32, 84), (1, 1600, 96, 336), (1, 1296, 96, 336), (1, 576, 48, 168), (1, 256, 24, 84), (1, 144, 24, 84), (1, 1600, 336, 128), (1, 1296, 336, 128), (1, 576, 168, 64), (1, 256, 84, 32), (1, 144, 84, 32), (1, 1600, 112, 336), (1, 1296, 112, 336), (1, 576, 56, 168), (1, 256, 28, 84), (1, 144, 28, 84), (1, 1600, 136, 336), (1, 1296, 136, 336), (1, 576, 68, 168), (1, 256, 34, 84), (1, 144, 34, 84), (1, 1600, 336, 184), (1, 1296, 336, 184), (1, 576, 168, 92), (1, 256, 84, 46), (1, 144, 84, 46)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum_4': dict(
        name=["sum"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(9, 65600), (10, 65600), (8, 16400), (13, 4100), (10, 4100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.001, 0.001, 0.001, 0.001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(9,), (10,), (8,), (13,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(9,), (10,), (8,), (13,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(9,), (10,), (8,), (13,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(9,), (10,), (8,), (13,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_5': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((9,), (10,), (8,), (13,), (10,)), ((3200, 80), (2592, 80), (1152, 80), (512, 80), (288, 80))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sum_5': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(50,), (7744, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_5': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'cat_6': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((3200,), (2592,), (1152,), (512,), (288,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(7744, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(7744, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(33)],
            lr=[1.000000000000001e-05 for i in range(33)],
            momentum=[0.9 for i in range(33)],
            weight_decay=[0.0001 for i in range(33)],
            dampening=[0 for i in range(33)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (256, 258, 3, 3), (1600, 256, 1, 1), (1600,), (1296, 256, 1, 1), (1296,), (576, 256, 1, 1), (576,), (144, 256, 1, 1), (144,), (80, 256, 3, 3), (80,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (256, 258, 3, 3), (1600, 256, 1, 1), (1600,), (1296, 256, 1, 1), (1296,), (576, 256, 1, 1), (576,), (144, 256, 1, 1), (144,), (80, 256, 3, 3), (80,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_2': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[2, 2, 2, 2, 2],
            stride=[1, 1, 1, 1, 1],
            padding=[1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_5': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 80, 40, 40), (1, 80, 36, 36), (1, 80, 24, 24), (1, 80, 16, 16), (1, 80, 12, 12)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3872, 80), (1, 200, 272), (2, 328, 200), (2, 200, 304), (1, 200, 304), (3, 200, 200), (1, 304, 200), (2, 272, 200), (1, 200, 288), (2, 200, 272), (9, 200, 272), (3, 288, 200), (5, 200, 272), (1, 248, 200), (3, 200, 304), (6, 200, 272), (10, 200, 304), (12, 200, 304), (3, 200, 272), (5, 200, 304), (1, 168, 336), (2, 256, 200), (1, 280, 200), (13, 200, 272), (5, 208, 200), (1, 272, 200), (1, 200, 256), (3, 104, 336), (1, 200, 280), (2, 200, 288), (7, 336, 160), (7, 200, 304), (1, 200, 200), (1, 200, 336), (2, 200, 264), (1, 200, 296), (3, 272, 200), (2, 200, 328), (2, 88, 336), (4, 200, 304), (1, 160, 336), (6, 200, 304), (1, 200, 328), (5, 200, 200), (4, 272, 200), (2, 304, 200), (1, 192, 336), (5, 200, 336), (8, 200, 304), (5, 304, 200), (4, 200, 272), (18, 200, 272), (1, 336, 152), (7, 200, 240), (5, 200, 264), (2, 200, 200), (11, 200, 304), (1, 200, 320), (3, 200, 248), (6, 304, 200), (1, 200, 264), (5, 256, 200), (1, 208, 200)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'pow': dict(
        name=["pow"],
        interface=["torch.Tensor"],
        para=dict(
            exponent=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'cumsum': dict(
        name=["cumsum"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'mul_6': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[8, 8, 16, 32, 32],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1600,), (1296,), (576,), (256,), (144,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum_6': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 200, 272), (2, 328, 200), (2, 200, 304), (1, 200, 304), (3, 200, 200), (1, 304, 200), (2, 272, 200), (1, 200, 288), (2, 200, 272), (9, 200, 272), (3, 288, 200), (5, 200, 272), (1, 248, 200), (3, 200, 304), (6, 200, 272), (10, 200, 304), (12, 200, 304), (3, 200, 272), (5, 200, 304), (1, 168, 336), (2, 256, 200), (1, 280, 200), (13, 200, 272), (5, 208, 200), (1, 272, 200), (1, 200, 256), (3, 104, 336), (1, 200, 280), (2, 200, 288), (7, 336, 160), (7, 200, 304), (1, 200, 200), (1, 200, 336), (2, 200, 264), (1, 200, 296), (3, 272, 200), (2, 200, 328), (2, 88, 336), (4, 200, 304), (1, 160, 336), (6, 200, 304), (1, 200, 328), (5, 200, 200), (4, 272, 200), (2, 304, 200), (1, 192, 336), (5, 200, 336), (8, 200, 304), (5, 304, 200), (4, 200, 272), (18, 200, 272), (1, 336, 152), (7, 200, 240), (5, 200, 264), (2, 200, 200), (11, 200, 304), (1, 200, 320), (3, 200, 248), (6, 304, 200), (1, 200, 264), (5, 256, 200), (1, 208, 200)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt_2': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1,), (2,), (3,), (9,), (5,), (6,), (10,), (12,), (13,), (7,), (4,), (8,), (18,), (11,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1,), (2,), (3,), (9,), (5,), (6,), (10,), (12,), (13,), (7,), (4,), (8,), (18,), (11,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

}
