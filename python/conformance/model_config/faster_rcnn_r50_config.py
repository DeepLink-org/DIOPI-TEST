from ..config import Genfunc
from ..dtype import Dtype

faster_rcnn_r50_config = {
    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[117266],
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)],
            padding=[(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 3, 1344, 800), (2, 64, 336, 200), (2, 64, 336, 200), (2, 64, 336, 200), (2, 256, 336, 200), (2, 256, 336, 200), (2, 128, 336, 200), (2, 128, 168, 100), (2, 256, 336, 200), (2, 512, 168, 100), (2, 128, 168, 100), (2, 512, 168, 100), (2, 256, 168, 100), (2, 256, 84, 50), (2, 512, 168, 100), (2, 1024, 84, 50), (2, 256, 84, 50), (2, 1024, 84, 50), (2, 512, 84, 50), (2, 512, 42, 25), (2, 1024, 84, 50), (2, 2048, 42, 25), (2, 512, 42, 25), (1, 3, 800, 1216), (1, 64, 200, 304), (1, 64, 200, 304), (1, 64, 200, 304), (1, 256, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 256, 200, 304), (1, 512, 100, 152), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 512, 25, 38), (1, 3, 800, 1248), (1, 64, 200, 312), (1, 64, 200, 312), (1, 64, 200, 312), (1, 256, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 256, 200, 312), (1, 512, 100, 156), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 512, 25, 39), (1, 3, 800, 1088), (1, 64, 200, 272), (1, 64, 200, 272), (1, 64, 200, 272), (1, 256, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 256, 200, 272), (1, 512, 100, 136), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 512, 25, 34), (1, 3, 800, 1344), (1, 64, 200, 336), (1, 64, 200, 336), (1, 64, 200, 336), (1, 256, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 256, 200, 336), (1, 512, 100, 168), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 512, 25, 42), (1, 3, 800, 1024), (1, 64, 200, 256), (1, 64, 200, 256), (1, 64, 200, 256), (1, 256, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 256, 200, 256), (1, 512, 100, 128), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 512, 25, 32), (1, 3, 1216, 800), (1, 64, 304, 200), (1, 64, 304, 200), (1, 64, 304, 200), (1, 256, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 256, 304, 200), (1, 512, 152, 100), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 512, 38, 25), (1, 3, 1088, 800), (1, 64, 272, 200), (1, 64, 272, 200), (1, 64, 272, 200), (1, 256, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 256, 272, 200), (1, 512, 136, 100), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 512, 34, 25), (1, 3, 1152, 800), (1, 64, 288, 200), (1, 64, 288, 200), (1, 64, 288, 200), (1, 256, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 256, 288, 200), (1, 512, 144, 100), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 512, 36, 25), (1, 3, 800, 960), (1, 64, 200, 240), (1, 64, 200, 240), (1, 64, 200, 240), (1, 256, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 256, 200, 240), (1, 512, 100, 120), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 512, 25, 30), (1, 3, 800, 1120), (1, 64, 200, 280), (1, 64, 200, 280), (1, 64, 200, 280), (1, 256, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 256, 200, 280), (1, 512, 100, 140), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 512, 25, 35), (1, 3, 896, 800), (1, 64, 224, 200), (1, 64, 224, 200), (1, 64, 224, 200), (1, 256, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 256, 224, 200), (1, 512, 112, 100), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 512, 28, 25), (1, 3, 832, 800), (1, 64, 208, 200), (1, 64, 208, 200), (1, 64, 208, 200), (1, 256, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 256, 208, 200), (1, 512, 104, 100), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 512, 26, 25), (1, 3, 800, 1280), (1, 64, 200, 320), (1, 64, 200, 320), (1, 64, 200, 320), (1, 256, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 256, 200, 320), (1, 512, 100, 160), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 512, 25, 40), (1, 3, 800, 1152), (1, 64, 200, 288), (1, 64, 200, 288), (1, 64, 200, 288), (1, 256, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 256, 200, 288), (1, 512, 100, 144), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 512, 25, 36), (1, 3, 768, 1344), (1, 64, 192, 336), (1, 64, 192, 336), (1, 64, 192, 336), (1, 256, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 256, 192, 336), (1, 512, 96, 168), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 512, 24, 42), (1, 3, 800, 800), (1, 64, 200, 200), (1, 64, 200, 200), (1, 64, 200, 200), (1, 256, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 256, 200, 200), (1, 512, 100, 100), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 512, 25, 25), (1, 3, 1312, 800), (1, 64, 328, 200), (1, 64, 328, 200), (1, 64, 328, 200), (1, 256, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 256, 328, 200), (1, 512, 164, 100), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 512, 41, 25), (1, 3, 800, 1184), (1, 64, 200, 296), (1, 64, 200, 296), (1, 64, 200, 296), (1, 256, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 256, 200, 296), (1, 512, 100, 148), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 512, 25, 37), (1, 3, 800, 1312), (1, 64, 200, 328), (1, 64, 200, 328), (1, 64, 200, 328), (1, 256, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 256, 200, 328), (1, 512, 100, 164), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 512, 25, 41), (1, 3, 608, 1344), (1, 64, 152, 336), (1, 64, 152, 336), (1, 64, 152, 336), (1, 256, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 256, 152, 336), (1, 512, 76, 168), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 512, 19, 42), (1, 3, 1248, 800), (1, 64, 312, 200), (1, 64, 312, 200), (1, 64, 312, 200), (1, 256, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 256, 312, 200), (1, 512, 156, 100), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 512, 39, 25), (1, 3, 1120, 800), (1, 64, 280, 200), (1, 64, 280, 200), (1, 64, 280, 200), (1, 256, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 256, 280, 200), (1, 512, 140, 100), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 512, 35, 25), (1, 3, 800, 832), (1, 64, 200, 208), (1, 64, 200, 208), (1, 64, 200, 208), (1, 256, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 256, 200, 208), (1, 512, 100, 104), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 512, 25, 26), (1, 3, 800, 1056), (1, 64, 200, 264), (1, 64, 200, 264), (1, 64, 200, 264), (1, 256, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 256, 200, 264), (1, 512, 100, 132), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 512, 25, 33), (1, 3, 992, 800), (1, 64, 248, 200), (1, 64, 248, 200), (1, 64, 248, 200), (1, 256, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 256, 248, 200), (1, 512, 124, 100), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 512, 31, 25), (1, 3, 1344, 768), (1, 64, 336, 192), (1, 64, 336, 192), (1, 64, 336, 192), (1, 256, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 256, 336, 192), (1, 512, 168, 96), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 512, 42, 24), (1, 3, 1184, 800), (1, 64, 296, 200), (1, 64, 296, 200), (1, 64, 296, 200), (1, 256, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 256, 296, 200), (1, 512, 148, 100), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 512, 37, 25), (1, 3, 800, 992), (1, 64, 200, 248), (1, 64, 200, 248), (1, 64, 200, 248), (1, 256, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 256, 200, 248), (1, 512, 100, 124), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 512, 25, 31), (1, 3, 1280, 800), (1, 64, 320, 200), (1, 64, 320, 200), (1, 64, 320, 200), (1, 256, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 256, 320, 200), (1, 512, 160, 100), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 512, 40, 25), (1, 3, 704, 1344), (1, 64, 176, 336), (1, 64, 176, 336), (1, 64, 176, 336), (1, 256, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 256, 176, 336), (1, 512, 88, 168), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 512, 22, 42), (1, 3, 864, 800), (1, 64, 216, 200), (1, 64, 216, 200), (1, 64, 216, 200), (1, 256, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 256, 216, 200), (1, 512, 108, 100), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 512, 27, 25), (1, 3, 800, 864), (1, 64, 200, 216), (1, 64, 200, 216), (1, 64, 200, 216), (1, 256, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 256, 200, 216), (1, 512, 100, 108), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 512, 25, 27), (1, 3, 1056, 800), (1, 64, 264, 200), (1, 64, 264, 200), (1, 64, 264, 200), (1, 256, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 256, 264, 200), (1, 512, 132, 100), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 512, 33, 25), (1, 3, 640, 1344), (1, 64, 160, 336), (1, 64, 160, 336), (1, 64, 160, 336), (1, 256, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 256, 160, 336), (1, 512, 80, 168), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 512, 20, 42), (1, 3, 1344, 800), (1, 64, 336, 200), (1, 64, 336, 200), (1, 64, 336, 200), (1, 256, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 256, 336, 200), (1, 512, 168, 100), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 512, 42, 25), (1, 3, 736, 1344), (1, 64, 184, 336), (1, 64, 184, 336), (1, 64, 184, 336), (1, 256, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 256, 184, 336), (1, 512, 92, 168), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 512, 23, 42), (1, 3, 672, 1344), (1, 64, 168, 336), (1, 64, 168, 336), (1, 64, 168, 336), (1, 256, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 256, 168, 336), (1, 512, 84, 168), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 512, 21, 42), (1, 3, 1024, 800), (1, 64, 256, 200), (1, 64, 256, 200), (1, 64, 256, 200), (1, 256, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 256, 256, 200), (1, 512, 128, 100), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 512, 32, 25), (1, 3, 800, 928), (1, 64, 200, 232), (1, 64, 200, 232), (1, 64, 200, 232), (1, 256, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 256, 200, 232), (1, 512, 100, 116), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 512, 25, 29), (1, 3, 1344, 608), (1, 64, 336, 152), (1, 64, 336, 152), (1, 64, 336, 152), (1, 256, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 256, 336, 152), (1, 512, 168, 76), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 512, 42, 19), (1, 3, 800, 896), (1, 64, 200, 224), (1, 64, 200, 224), (1, 64, 200, 224), (1, 256, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 256, 200, 224), (1, 512, 100, 112), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 512, 25, 28), (1, 3, 576, 1344), (1, 64, 144, 336), (1, 64, 144, 336), (1, 64, 144, 336), (1, 256, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 256, 144, 336), (1, 512, 72, 168), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 512, 18, 42), (1, 3, 1344, 640), (1, 64, 336, 160), (1, 64, 336, 160), (1, 64, 336, 160), (1, 256, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 256, 336, 160), (1, 512, 168, 80), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 512, 42, 20), (1, 3, 960, 800), (1, 64, 240, 200), (1, 64, 240, 200), (1, 64, 240, 200), (1, 256, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 256, 240, 200), (1, 512, 120, 100), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 512, 30, 25), (1, 3, 352, 1344), (1, 64, 88, 336), (1, 64, 88, 336), (1, 64, 88, 336), (1, 256, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 256, 88, 336), (1, 512, 44, 168), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 512, 11, 42), (1, 3, 416, 1344), (1, 64, 104, 336), (1, 64, 104, 336), (1, 64, 104, 336), (1, 256, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 256, 104, 336), (1, 512, 52, 168), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 512, 13, 42), (1, 3, 480, 1344), (1, 64, 120, 336), (1, 64, 120, 336), (1, 64, 120, 336), (1, 256, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 256, 120, 336), (1, 512, 60, 168), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 512, 15, 42), (1, 3, 928, 800), (1, 64, 232, 200), (1, 64, 232, 200), (1, 64, 232, 200), (1, 256, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 256, 232, 200), (1, 512, 116, 100), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 512, 29, 25), (1, 3, 1344, 704), (1, 64, 336, 176), (1, 64, 336, 176), (1, 64, 336, 176), (1, 256, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 256, 336, 176), (1, 512, 168, 88), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 512, 42, 22), (1, 3, 512, 1344), (1, 64, 128, 336), (1, 64, 128, 336), (1, 64, 128, 336), (1, 256, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 256, 128, 336), (1, 512, 64, 168), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 512, 16, 42), (1, 3, 384, 1344), (1, 64, 96, 336), (1, 64, 96, 336), (1, 64, 96, 336), (1, 256, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 256, 96, 336), (1, 512, 48, 168), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 512, 12, 42), (1, 3, 1344, 512), (1, 64, 336, 128), (1, 64, 336, 128), (1, 64, 336, 128), (1, 256, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 256, 336, 128), (1, 512, 168, 64), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 512, 42, 16), (1, 3, 448, 1344), (1, 64, 112, 336), (1, 64, 112, 336), (1, 64, 112, 336), (1, 256, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 256, 112, 336), (1, 512, 56, 168), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 512, 14, 42), (1, 3, 544, 1344), (1, 64, 136, 336), (1, 64, 136, 336), (1, 64, 136, 336), (1, 256, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 256, 136, 336), (1, 512, 68, 168), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 512, 17, 42), (1, 3, 1344, 736), (1, 64, 336, 184), (1, 64, 336, 184), (1, 64, 336, 184), (1, 256, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 256, 336, 184), (1, 512, 168, 92), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 512, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3), (64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 672, 400), (2, 64, 336, 200), (2, 256, 336, 200), (2, 128, 336, 200), (2, 128, 168, 100), (2, 512, 168, 100), (2, 256, 168, 100), (2, 256, 84, 50), (2, 1024, 84, 50), (2, 512, 84, 50), (2, 512, 42, 25), (2, 2048, 42, 25), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,), (64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 64, 672, 400), (2, 64, 336, 200), (2, 256, 336, 200), (2, 128, 336, 200), (2, 128, 168, 100), (2, 512, 168, 100), (2, 256, 168, 100), (2, 256, 84, 50), (2, 1024, 84, 50), (2, 512, 84, 50), (2, 512, 42, 25), (2, 2048, 42, 25), (2, 256, 336, 200), (2, 256, 168, 100), (2, 256, 84, 50), (2, 256, 42, 25), (2, 256, 21, 13), (1024, 1024), (1, 64, 400, 608), (1, 64, 200, 304), (1, 256, 200, 304), (1, 128, 200, 304), (1, 128, 100, 152), (1, 512, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 1024, 50, 76), (1, 512, 50, 76), (1, 512, 25, 38), (1, 2048, 25, 38), (1, 256, 200, 304), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 13, 19), (1000, 1024), (1, 64, 400, 624), (1, 64, 200, 312), (1, 256, 200, 312), (1, 128, 200, 312), (1, 128, 100, 156), (1, 512, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 1024, 50, 78), (1, 512, 50, 78), (1, 512, 25, 39), (1, 2048, 25, 39), (1, 256, 200, 312), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 13, 20), (1, 64, 400, 544), (1, 64, 200, 272), (1, 256, 200, 272), (1, 128, 200, 272), (1, 128, 100, 136), (1, 512, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 1024, 50, 68), (1, 512, 50, 68), (1, 512, 25, 34), (1, 2048, 25, 34), (1, 256, 200, 272), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 13, 17), (1, 64, 400, 672), (1, 64, 200, 336), (1, 256, 200, 336), (1, 128, 200, 336), (1, 128, 100, 168), (1, 512, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 1024, 50, 84), (1, 512, 50, 84), (1, 512, 25, 42), (1, 2048, 25, 42), (1, 256, 200, 336), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 13, 21), (1, 64, 400, 512), (1, 64, 200, 256), (1, 256, 200, 256), (1, 128, 200, 256), (1, 128, 100, 128), (1, 512, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 1024, 50, 64), (1, 512, 50, 64), (1, 512, 25, 32), (1, 2048, 25, 32), (1, 256, 200, 256), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 13, 16), (1, 64, 608, 400), (1, 64, 304, 200), (1, 256, 304, 200), (1, 128, 304, 200), (1, 128, 152, 100), (1, 512, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 1024, 76, 50), (1, 512, 76, 50), (1, 512, 38, 25), (1, 2048, 38, 25), (1, 256, 304, 200), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 19, 13), (1, 64, 544, 400), (1, 64, 272, 200), (1, 256, 272, 200), (1, 128, 272, 200), (1, 128, 136, 100), (1, 512, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 1024, 68, 50), (1, 512, 68, 50), (1, 512, 34, 25), (1, 2048, 34, 25), (1, 256, 272, 200), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 17, 13), (1, 64, 576, 400), (1, 64, 288, 200), (1, 256, 288, 200), (1, 128, 288, 200), (1, 128, 144, 100), (1, 512, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 1024, 72, 50), (1, 512, 72, 50), (1, 512, 36, 25), (1, 2048, 36, 25), (1, 256, 288, 200), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 18, 13), (1, 64, 400, 480), (1, 64, 200, 240), (1, 256, 200, 240), (1, 128, 200, 240), (1, 128, 100, 120), (1, 512, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 1024, 50, 60), (1, 512, 50, 60), (1, 512, 25, 30), (1, 2048, 25, 30), (1, 256, 200, 240), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 13, 15), (1, 64, 400, 560), (1, 64, 200, 280), (1, 256, 200, 280), (1, 128, 200, 280), (1, 128, 100, 140), (1, 512, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 1024, 50, 70), (1, 512, 50, 70), (1, 512, 25, 35), (1, 2048, 25, 35), (1, 256, 200, 280), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 13, 18), (1, 64, 448, 400), (1, 64, 224, 200), (1, 256, 224, 200), (1, 128, 224, 200), (1, 128, 112, 100), (1, 512, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 1024, 56, 50), (1, 512, 56, 50), (1, 512, 28, 25), (1, 2048, 28, 25), (1, 256, 224, 200), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 14, 13), (1, 64, 416, 400), (1, 64, 208, 200), (1, 256, 208, 200), (1, 128, 208, 200), (1, 128, 104, 100), (1, 512, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 1024, 52, 50), (1, 512, 52, 50), (1, 512, 26, 25), (1, 2048, 26, 25), (1, 256, 208, 200), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 13, 13), (1, 64, 400, 640), (1, 64, 200, 320), (1, 256, 200, 320), (1, 128, 200, 320), (1, 128, 100, 160), (1, 512, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 1024, 50, 80), (1, 512, 50, 80), (1, 512, 25, 40), (1, 2048, 25, 40), (1, 256, 200, 320), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 64, 400, 576), (1, 64, 200, 288), (1, 256, 200, 288), (1, 128, 200, 288), (1, 128, 100, 144), (1, 512, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 1024, 50, 72), (1, 512, 50, 72), (1, 512, 25, 36), (1, 2048, 25, 36), (1, 256, 200, 288), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 64, 384, 672), (1, 64, 192, 336), (1, 256, 192, 336), (1, 128, 192, 336), (1, 128, 96, 168), (1, 512, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 1024, 48, 84), (1, 512, 48, 84), (1, 512, 24, 42), (1, 2048, 24, 42), (1, 256, 192, 336), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 12, 21), (1, 64, 400, 400), (1, 64, 200, 200), (1, 256, 200, 200), (1, 128, 200, 200), (1, 128, 100, 100), (1, 512, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 1024, 50, 50), (1, 512, 50, 50), (1, 512, 25, 25), (1, 2048, 25, 25), (1, 256, 200, 200), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 64, 656, 400), (1, 64, 328, 200), (1, 256, 328, 200), (1, 128, 328, 200), (1, 128, 164, 100), (1, 512, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 1024, 82, 50), (1, 512, 82, 50), (1, 512, 41, 25), (1, 2048, 41, 25), (1, 256, 328, 200), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 21, 13), (1, 64, 400, 592), (1, 64, 200, 296), (1, 256, 200, 296), (1, 128, 200, 296), (1, 128, 100, 148), (1, 512, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 1024, 50, 74), (1, 512, 50, 74), (1, 512, 25, 37), (1, 2048, 25, 37), (1, 256, 200, 296), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 64, 400, 656), (1, 64, 200, 328), (1, 256, 200, 328), (1, 128, 200, 328), (1, 128, 100, 164), (1, 512, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 1024, 50, 82), (1, 512, 50, 82), (1, 512, 25, 41), (1, 2048, 25, 41), (1, 256, 200, 328), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 64, 304, 672), (1, 64, 152, 336), (1, 256, 152, 336), (1, 128, 152, 336), (1, 128, 76, 168), (1, 512, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 1024, 38, 84), (1, 512, 38, 84), (1, 512, 19, 42), (1, 2048, 19, 42), (1, 256, 152, 336), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 10, 21), (1, 64, 624, 400), (1, 64, 312, 200), (1, 256, 312, 200), (1, 128, 312, 200), (1, 128, 156, 100), (1, 512, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 1024, 78, 50), (1, 512, 78, 50), (1, 512, 39, 25), (1, 2048, 39, 25), (1, 256, 312, 200), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 20, 13), (1, 64, 560, 400), (1, 64, 280, 200), (1, 256, 280, 200), (1, 128, 280, 200), (1, 128, 140, 100), (1, 512, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 1024, 70, 50), (1, 512, 70, 50), (1, 512, 35, 25), (1, 2048, 35, 25), (1, 256, 280, 200), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 64, 400, 416), (1, 64, 200, 208), (1, 256, 200, 208), (1, 128, 200, 208), (1, 128, 100, 104), (1, 512, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 1024, 50, 52), (1, 512, 50, 52), (1, 512, 25, 26), (1, 2048, 25, 26), (1, 256, 200, 208), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 64, 400, 528), (1, 64, 200, 264), (1, 256, 200, 264), (1, 128, 200, 264), (1, 128, 100, 132), (1, 512, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 1024, 50, 66), (1, 512, 50, 66), (1, 512, 25, 33), (1, 2048, 25, 33), (1, 256, 200, 264), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 64, 496, 400), (1, 64, 248, 200), (1, 256, 248, 200), (1, 128, 248, 200), (1, 128, 124, 100), (1, 512, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 1024, 62, 50), (1, 512, 62, 50), (1, 512, 31, 25), (1, 2048, 31, 25), (1, 256, 248, 200), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 16, 13), (1, 64, 672, 384), (1, 64, 336, 192), (1, 256, 336, 192), (1, 128, 336, 192), (1, 128, 168, 96), (1, 512, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 1024, 84, 48), (1, 512, 84, 48), (1, 512, 42, 24), (1, 2048, 42, 24), (1, 256, 336, 192), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 21, 12), (1, 64, 592, 400), (1, 64, 296, 200), (1, 256, 296, 200), (1, 128, 296, 200), (1, 128, 148, 100), (1, 512, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 1024, 74, 50), (1, 512, 74, 50), (1, 512, 37, 25), (1, 2048, 37, 25), (1, 256, 296, 200), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 64, 400, 496), (1, 64, 200, 248), (1, 256, 200, 248), (1, 128, 200, 248), (1, 128, 100, 124), (1, 512, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 1024, 50, 62), (1, 512, 50, 62), (1, 512, 25, 31), (1, 2048, 25, 31), (1, 256, 200, 248), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 64, 640, 400), (1, 64, 320, 200), (1, 256, 320, 200), (1, 128, 320, 200), (1, 128, 160, 100), (1, 512, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 1024, 80, 50), (1, 512, 80, 50), (1, 512, 40, 25), (1, 2048, 40, 25), (1, 256, 320, 200), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 64, 352, 672), (1, 64, 176, 336), (1, 256, 176, 336), (1, 128, 176, 336), (1, 128, 88, 168), (1, 512, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 1024, 44, 84), (1, 512, 44, 84), (1, 512, 22, 42), (1, 2048, 22, 42), (1, 256, 176, 336), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 11, 21), (1, 64, 432, 400), (1, 64, 216, 200), (1, 256, 216, 200), (1, 128, 216, 200), (1, 128, 108, 100), (1, 512, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 1024, 54, 50), (1, 512, 54, 50), (1, 512, 27, 25), (1, 2048, 27, 25), (1, 256, 216, 200), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 64, 400, 432), (1, 64, 200, 216), (1, 256, 200, 216), (1, 128, 200, 216), (1, 128, 100, 108), (1, 512, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 1024, 50, 54), (1, 512, 50, 54), (1, 512, 25, 27), (1, 2048, 25, 27), (1, 256, 200, 216), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 13, 14), (1, 64, 528, 400), (1, 64, 264, 200), (1, 256, 264, 200), (1, 128, 264, 200), (1, 128, 132, 100), (1, 512, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 1024, 66, 50), (1, 512, 66, 50), (1, 512, 33, 25), (1, 2048, 33, 25), (1, 256, 264, 200), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 64, 320, 672), (1, 64, 160, 336), (1, 256, 160, 336), (1, 128, 160, 336), (1, 128, 80, 168), (1, 512, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 1024, 40, 84), (1, 512, 40, 84), (1, 512, 20, 42), (1, 2048, 20, 42), (1, 256, 160, 336), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 64, 672, 400), (1, 64, 336, 200), (1, 256, 336, 200), (1, 128, 336, 200), (1, 128, 168, 100), (1, 512, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 1024, 84, 50), (1, 512, 84, 50), (1, 512, 42, 25), (1, 2048, 42, 25), (1, 256, 336, 200), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 64, 368, 672), (1, 64, 184, 336), (1, 256, 184, 336), (1, 128, 184, 336), (1, 128, 92, 168), (1, 512, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 1024, 46, 84), (1, 512, 46, 84), (1, 512, 23, 42), (1, 2048, 23, 42), (1, 256, 184, 336), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 64, 336, 672), (1, 64, 168, 336), (1, 256, 168, 336), (1, 128, 168, 336), (1, 128, 84, 168), (1, 512, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 1024, 42, 84), (1, 512, 42, 84), (1, 512, 21, 42), (1, 2048, 21, 42), (1, 256, 168, 336), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 64, 512, 400), (1, 64, 256, 200), (1, 256, 256, 200), (1, 128, 256, 200), (1, 128, 128, 100), (1, 512, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 1024, 64, 50), (1, 512, 64, 50), (1, 512, 32, 25), (1, 2048, 32, 25), (1, 256, 256, 200), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 64, 400, 464), (1, 64, 200, 232), (1, 256, 200, 232), (1, 128, 200, 232), (1, 128, 100, 116), (1, 512, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 1024, 50, 58), (1, 512, 50, 58), (1, 512, 25, 29), (1, 2048, 25, 29), (1, 256, 200, 232), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 64, 672, 304), (1, 64, 336, 152), (1, 256, 336, 152), (1, 128, 336, 152), (1, 128, 168, 76), (1, 512, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 1024, 84, 38), (1, 512, 84, 38), (1, 512, 42, 19), (1, 2048, 42, 19), (1, 256, 336, 152), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 21, 10), (1, 64, 400, 448), (1, 64, 200, 224), (1, 256, 200, 224), (1, 128, 200, 224), (1, 128, 100, 112), (1, 512, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 1024, 50, 56), (1, 512, 50, 56), (1, 512, 25, 28), (1, 2048, 25, 28), (1, 256, 200, 224), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 64, 288, 672), (1, 64, 144, 336), (1, 256, 144, 336), (1, 128, 144, 336), (1, 128, 72, 168), (1, 512, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 1024, 36, 84), (1, 512, 36, 84), (1, 512, 18, 42), (1, 2048, 18, 42), (1, 256, 144, 336), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 9, 21), (1, 64, 672, 320), (1, 64, 336, 160), (1, 256, 336, 160), (1, 128, 336, 160), (1, 128, 168, 80), (1, 512, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 1024, 84, 40), (1, 512, 84, 40), (1, 512, 42, 20), (1, 2048, 42, 20), (1, 256, 336, 160), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 64, 480, 400), (1, 64, 240, 200), (1, 256, 240, 200), (1, 128, 240, 200), (1, 128, 120, 100), (1, 512, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 1024, 60, 50), (1, 512, 60, 50), (1, 512, 30, 25), (1, 2048, 30, 25), (1, 256, 240, 200), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 15, 13), (1, 64, 176, 672), (1, 64, 88, 336), (1, 256, 88, 336), (1, 128, 88, 336), (1, 128, 44, 168), (1, 512, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 1024, 22, 84), (1, 512, 22, 84), (1, 512, 11, 42), (1, 2048, 11, 42), (1, 256, 88, 336), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 6, 21), (1, 64, 208, 672), (1, 64, 104, 336), (1, 256, 104, 336), (1, 128, 104, 336), (1, 128, 52, 168), (1, 512, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 1024, 26, 84), (1, 512, 26, 84), (1, 512, 13, 42), (1, 2048, 13, 42), (1, 256, 104, 336), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 7, 21), (1, 64, 240, 672), (1, 64, 120, 336), (1, 256, 120, 336), (1, 128, 120, 336), (1, 128, 60, 168), (1, 512, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 1024, 30, 84), (1, 512, 30, 84), (1, 512, 15, 42), (1, 2048, 15, 42), (1, 256, 120, 336), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 8, 21), (1, 64, 464, 400), (1, 64, 232, 200), (1, 256, 232, 200), (1, 128, 232, 200), (1, 128, 116, 100), (1, 512, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 1024, 58, 50), (1, 512, 58, 50), (1, 512, 29, 25), (1, 2048, 29, 25), (1, 256, 232, 200), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 64, 672, 352), (1, 64, 336, 176), (1, 256, 336, 176), (1, 128, 336, 176), (1, 128, 168, 88), (1, 512, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 1024, 84, 44), (1, 512, 84, 44), (1, 512, 42, 22), (1, 2048, 42, 22), (1, 256, 336, 176), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 21, 11), (1, 64, 256, 672), (1, 64, 128, 336), (1, 256, 128, 336), (1, 128, 128, 336), (1, 128, 64, 168), (1, 512, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 1024, 32, 84), (1, 512, 32, 84), (1, 512, 16, 42), (1, 2048, 16, 42), (1, 256, 128, 336), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 64, 192, 672), (1, 64, 96, 336), (1, 256, 96, 336), (1, 128, 96, 336), (1, 128, 48, 168), (1, 512, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 1024, 24, 84), (1, 512, 24, 84), (1, 512, 12, 42), (1, 2048, 12, 42), (1, 256, 96, 336), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 64, 672, 256), (1, 64, 336, 128), (1, 256, 336, 128), (1, 128, 336, 128), (1, 128, 168, 64), (1, 512, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 1024, 84, 32), (1, 512, 84, 32), (1, 512, 42, 16), (1, 2048, 42, 16), (1, 256, 336, 128), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 21, 8), (1, 64, 224, 672), (1, 64, 112, 336), (1, 256, 112, 336), (1, 128, 112, 336), (1, 128, 56, 168), (1, 512, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 1024, 28, 84), (1, 512, 28, 84), (1, 512, 14, 42), (1, 2048, 14, 42), (1, 256, 112, 336), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 64, 272, 672), (1, 64, 136, 336), (1, 256, 136, 336), (1, 128, 136, 336), (1, 128, 68, 168), (1, 512, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 1024, 34, 84), (1, 512, 34, 84), (1, 512, 17, 42), (1, 2048, 17, 42), (1, 256, 136, 336), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 64, 672, 368), (1, 64, 336, 184), (1, 256, 336, 184), (1, 128, 336, 184), (1, 128, 168, 92), (1, 512, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 1024, 84, 46), (1, 512, 84, 46), (1, 512, 42, 23), (1, 2048, 42, 23), (1, 256, 336, 184), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            padding=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 64, 672, 400), (1, 64, 400, 608), (1, 64, 400, 624), (1, 64, 400, 544), (1, 64, 400, 672), (1, 64, 400, 512), (1, 64, 608, 400), (1, 64, 544, 400), (1, 64, 576, 400), (1, 64, 400, 480), (1, 64, 400, 560), (1, 64, 448, 400), (1, 64, 416, 400), (1, 64, 400, 640), (1, 64, 400, 576), (1, 64, 384, 672), (1, 64, 400, 400), (1, 64, 656, 400), (1, 64, 400, 592), (1, 64, 400, 656), (1, 64, 304, 672), (1, 64, 624, 400), (1, 64, 560, 400), (1, 64, 400, 416), (1, 64, 400, 528), (1, 64, 496, 400), (1, 64, 672, 384), (1, 64, 592, 400), (1, 64, 400, 496), (1, 64, 640, 400), (1, 64, 352, 672), (1, 64, 432, 400), (1, 64, 400, 432), (1, 64, 528, 400), (1, 64, 320, 672), (1, 64, 672, 400), (1, 64, 368, 672), (1, 64, 336, 672), (1, 64, 512, 400), (1, 64, 400, 464), (1, 64, 672, 304), (1, 64, 400, 448), (1, 64, 288, 672), (1, 64, 672, 320), (1, 64, 480, 400), (1, 64, 176, 672), (1, 64, 208, 672), (1, 64, 240, 672), (1, 64, 464, 400), (1, 64, 672, 352), (1, 64, 256, 672), (1, 64, 192, 672), (1, 64, 672, 256), (1, 64, 224, 672), (1, 64, 272, 672), (1, 64, 672, 368)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 336, 200), (2, 512, 168, 100), (2, 1024, 84, 50), (2, 2048, 42, 25), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 336, 200), (2, 512, 168, 100), (2, 1024, 84, 50), (2, 2048, 42, 25), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 256, 336, 200), (2, 512, 168, 100), (2, 1024, 84, 50), (2, 2048, 42, 25), (2, 256, 336, 200), (2, 256, 168, 100), (2, 256, 84, 50), (2, 256, 42, 25), (2, 256, 336, 200), (2, 256, 336, 200), (2, 256, 168, 100), (2, 256, 168, 100), (2, 256, 84, 50), (2, 256, 84, 50), (2, 256, 42, 25), (2, 256, 42, 25), (2, 256, 21, 13), (2, 256, 21, 13), (2, 256, 21, 13), (1, 256, 200, 304), (1, 512, 100, 152), (1, 1024, 50, 76), (1, 2048, 25, 38), (1, 256, 200, 304), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 200, 304), (1, 256, 200, 304), (1, 256, 100, 152), (1, 256, 100, 152), (1, 256, 50, 76), (1, 256, 50, 76), (1, 256, 25, 38), (1, 256, 25, 38), (1, 256, 13, 19), (1, 256, 13, 19), (1, 256, 13, 19), (1, 256, 200, 312), (1, 512, 100, 156), (1, 1024, 50, 78), (1, 2048, 25, 39), (1, 256, 200, 312), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 200, 312), (1, 256, 200, 312), (1, 256, 100, 156), (1, 256, 100, 156), (1, 256, 50, 78), (1, 256, 50, 78), (1, 256, 25, 39), (1, 256, 25, 39), (1, 256, 13, 20), (1, 256, 13, 20), (1, 256, 13, 20), (1, 256, 200, 272), (1, 512, 100, 136), (1, 1024, 50, 68), (1, 2048, 25, 34), (1, 256, 200, 272), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 200, 272), (1, 256, 200, 272), (1, 256, 100, 136), (1, 256, 100, 136), (1, 256, 50, 68), (1, 256, 50, 68), (1, 256, 25, 34), (1, 256, 25, 34), (1, 256, 13, 17), (1, 256, 13, 17), (1, 256, 13, 17), (1, 256, 200, 336), (1, 512, 100, 168), (1, 1024, 50, 84), (1, 2048, 25, 42), (1, 256, 200, 336), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 200, 336), (1, 256, 200, 336), (1, 256, 100, 168), (1, 256, 100, 168), (1, 256, 50, 84), (1, 256, 50, 84), (1, 256, 25, 42), (1, 256, 25, 42), (1, 256, 13, 21), (1, 256, 13, 21), (1, 256, 13, 21), (1, 256, 200, 256), (1, 512, 100, 128), (1, 1024, 50, 64), (1, 2048, 25, 32), (1, 256, 200, 256), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 200, 256), (1, 256, 200, 256), (1, 256, 100, 128), (1, 256, 100, 128), (1, 256, 50, 64), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 25, 32), (1, 256, 13, 16), (1, 256, 13, 16), (1, 256, 13, 16), (1, 256, 304, 200), (1, 512, 152, 100), (1, 1024, 76, 50), (1, 2048, 38, 25), (1, 256, 304, 200), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 304, 200), (1, 256, 304, 200), (1, 256, 152, 100), (1, 256, 152, 100), (1, 256, 76, 50), (1, 256, 76, 50), (1, 256, 38, 25), (1, 256, 38, 25), (1, 256, 19, 13), (1, 256, 19, 13), (1, 256, 19, 13), (1, 256, 272, 200), (1, 512, 136, 100), (1, 1024, 68, 50), (1, 2048, 34, 25), (1, 256, 272, 200), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 272, 200), (1, 256, 272, 200), (1, 256, 136, 100), (1, 256, 136, 100), (1, 256, 68, 50), (1, 256, 68, 50), (1, 256, 34, 25), (1, 256, 34, 25), (1, 256, 17, 13), (1, 256, 17, 13), (1, 256, 17, 13), (1, 256, 288, 200), (1, 512, 144, 100), (1, 1024, 72, 50), (1, 2048, 36, 25), (1, 256, 288, 200), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 288, 200), (1, 256, 288, 200), (1, 256, 144, 100), (1, 256, 144, 100), (1, 256, 72, 50), (1, 256, 72, 50), (1, 256, 36, 25), (1, 256, 36, 25), (1, 256, 18, 13), (1, 256, 18, 13), (1, 256, 18, 13), (1, 256, 200, 240), (1, 512, 100, 120), (1, 1024, 50, 60), (1, 2048, 25, 30), (1, 256, 200, 240), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 200, 240), (1, 256, 200, 240), (1, 256, 100, 120), (1, 256, 100, 120), (1, 256, 50, 60), (1, 256, 50, 60), (1, 256, 25, 30), (1, 256, 25, 30), (1, 256, 13, 15), (1, 256, 13, 15), (1, 256, 13, 15), (1, 256, 200, 280), (1, 512, 100, 140), (1, 1024, 50, 70), (1, 2048, 25, 35), (1, 256, 200, 280), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 200, 280), (1, 256, 200, 280), (1, 256, 100, 140), (1, 256, 100, 140), (1, 256, 50, 70), (1, 256, 50, 70), (1, 256, 25, 35), (1, 256, 25, 35), (1, 256, 13, 18), (1, 256, 13, 18), (1, 256, 13, 18), (1, 256, 224, 200), (1, 512, 112, 100), (1, 1024, 56, 50), (1, 2048, 28, 25), (1, 256, 224, 200), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 224, 200), (1, 256, 224, 200), (1, 256, 112, 100), (1, 256, 112, 100), (1, 256, 56, 50), (1, 256, 56, 50), (1, 256, 28, 25), (1, 256, 28, 25), (1, 256, 14, 13), (1, 256, 14, 13), (1, 256, 14, 13), (1, 256, 208, 200), (1, 512, 104, 100), (1, 1024, 52, 50), (1, 2048, 26, 25), (1, 256, 208, 200), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 208, 200), (1, 256, 208, 200), (1, 256, 104, 100), (1, 256, 104, 100), (1, 256, 52, 50), (1, 256, 52, 50), (1, 256, 26, 25), (1, 256, 26, 25), (1, 256, 13, 13), (1, 256, 13, 13), (1, 256, 13, 13), (1, 256, 200, 320), (1, 512, 100, 160), (1, 1024, 50, 80), (1, 2048, 25, 40), (1, 256, 200, 320), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 200, 320), (1, 256, 200, 320), (1, 256, 100, 160), (1, 256, 100, 160), (1, 256, 50, 80), (1, 256, 50, 80), (1, 256, 25, 40), (1, 256, 25, 40), (1, 256, 200, 288), (1, 512, 100, 144), (1, 1024, 50, 72), (1, 2048, 25, 36), (1, 256, 200, 288), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 200, 288), (1, 256, 200, 288), (1, 256, 100, 144), (1, 256, 100, 144), (1, 256, 50, 72), (1, 256, 50, 72), (1, 256, 25, 36), (1, 256, 25, 36), (1, 256, 192, 336), (1, 512, 96, 168), (1, 1024, 48, 84), (1, 2048, 24, 42), (1, 256, 192, 336), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 192, 336), (1, 256, 192, 336), (1, 256, 96, 168), (1, 256, 96, 168), (1, 256, 48, 84), (1, 256, 48, 84), (1, 256, 24, 42), (1, 256, 24, 42), (1, 256, 12, 21), (1, 256, 12, 21), (1, 256, 12, 21), (1, 256, 200, 200), (1, 512, 100, 100), (1, 1024, 50, 50), (1, 2048, 25, 25), (1, 256, 200, 200), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 200, 200), (1, 256, 200, 200), (1, 256, 100, 100), (1, 256, 100, 100), (1, 256, 50, 50), (1, 256, 50, 50), (1, 256, 25, 25), (1, 256, 25, 25), (1, 256, 328, 200), (1, 512, 164, 100), (1, 1024, 82, 50), (1, 2048, 41, 25), (1, 256, 328, 200), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 328, 200), (1, 256, 328, 200), (1, 256, 164, 100), (1, 256, 164, 100), (1, 256, 82, 50), (1, 256, 82, 50), (1, 256, 41, 25), (1, 256, 41, 25), (1, 256, 21, 13), (1, 256, 21, 13), (1, 256, 21, 13), (1, 256, 200, 296), (1, 512, 100, 148), (1, 1024, 50, 74), (1, 2048, 25, 37), (1, 256, 200, 296), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 200, 296), (1, 256, 200, 296), (1, 256, 100, 148), (1, 256, 100, 148), (1, 256, 50, 74), (1, 256, 50, 74), (1, 256, 25, 37), (1, 256, 25, 37), (1, 256, 200, 328), (1, 512, 100, 164), (1, 1024, 50, 82), (1, 2048, 25, 41), (1, 256, 200, 328), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 200, 328), (1, 256, 200, 328), (1, 256, 100, 164), (1, 256, 100, 164), (1, 256, 50, 82), (1, 256, 50, 82), (1, 256, 25, 41), (1, 256, 25, 41), (1, 256, 152, 336), (1, 512, 76, 168), (1, 1024, 38, 84), (1, 2048, 19, 42), (1, 256, 152, 336), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 152, 336), (1, 256, 152, 336), (1, 256, 76, 168), (1, 256, 76, 168), (1, 256, 38, 84), (1, 256, 38, 84), (1, 256, 19, 42), (1, 256, 19, 42), (1, 256, 10, 21), (1, 256, 10, 21), (1, 256, 10, 21), (1, 256, 312, 200), (1, 512, 156, 100), (1, 1024, 78, 50), (1, 2048, 39, 25), (1, 256, 312, 200), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 312, 200), (1, 256, 312, 200), (1, 256, 156, 100), (1, 256, 156, 100), (1, 256, 78, 50), (1, 256, 78, 50), (1, 256, 39, 25), (1, 256, 39, 25), (1, 256, 20, 13), (1, 256, 20, 13), (1, 256, 20, 13), (1, 256, 280, 200), (1, 512, 140, 100), (1, 1024, 70, 50), (1, 2048, 35, 25), (1, 256, 280, 200), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 280, 200), (1, 256, 280, 200), (1, 256, 140, 100), (1, 256, 140, 100), (1, 256, 70, 50), (1, 256, 70, 50), (1, 256, 35, 25), (1, 256, 35, 25), (1, 256, 200, 208), (1, 512, 100, 104), (1, 1024, 50, 52), (1, 2048, 25, 26), (1, 256, 200, 208), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 200, 208), (1, 256, 200, 208), (1, 256, 100, 104), (1, 256, 100, 104), (1, 256, 50, 52), (1, 256, 50, 52), (1, 256, 25, 26), (1, 256, 25, 26), (1, 256, 200, 264), (1, 512, 100, 132), (1, 1024, 50, 66), (1, 2048, 25, 33), (1, 256, 200, 264), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 200, 264), (1, 256, 200, 264), (1, 256, 100, 132), (1, 256, 100, 132), (1, 256, 50, 66), (1, 256, 50, 66), (1, 256, 25, 33), (1, 256, 25, 33), (1, 256, 248, 200), (1, 512, 124, 100), (1, 1024, 62, 50), (1, 2048, 31, 25), (1, 256, 248, 200), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 248, 200), (1, 256, 248, 200), (1, 256, 124, 100), (1, 256, 124, 100), (1, 256, 62, 50), (1, 256, 62, 50), (1, 256, 31, 25), (1, 256, 31, 25), (1, 256, 16, 13), (1, 256, 16, 13), (1, 256, 16, 13), (1, 256, 336, 192), (1, 512, 168, 96), (1, 1024, 84, 48), (1, 2048, 42, 24), (1, 256, 336, 192), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 336, 192), (1, 256, 336, 192), (1, 256, 168, 96), (1, 256, 168, 96), (1, 256, 84, 48), (1, 256, 84, 48), (1, 256, 42, 24), (1, 256, 42, 24), (1, 256, 21, 12), (1, 256, 21, 12), (1, 256, 21, 12), (1, 256, 296, 200), (1, 512, 148, 100), (1, 1024, 74, 50), (1, 2048, 37, 25), (1, 256, 296, 200), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 296, 200), (1, 256, 296, 200), (1, 256, 148, 100), (1, 256, 148, 100), (1, 256, 74, 50), (1, 256, 74, 50), (1, 256, 37, 25), (1, 256, 37, 25), (1, 256, 200, 248), (1, 512, 100, 124), (1, 1024, 50, 62), (1, 2048, 25, 31), (1, 256, 200, 248), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 200, 248), (1, 256, 200, 248), (1, 256, 100, 124), (1, 256, 100, 124), (1, 256, 50, 62), (1, 256, 50, 62), (1, 256, 25, 31), (1, 256, 25, 31), (1, 256, 320, 200), (1, 512, 160, 100), (1, 1024, 80, 50), (1, 2048, 40, 25), (1, 256, 320, 200), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 320, 200), (1, 256, 320, 200), (1, 256, 160, 100), (1, 256, 160, 100), (1, 256, 80, 50), (1, 256, 80, 50), (1, 256, 40, 25), (1, 256, 40, 25), (1, 256, 176, 336), (1, 512, 88, 168), (1, 1024, 44, 84), (1, 2048, 22, 42), (1, 256, 176, 336), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 176, 336), (1, 256, 176, 336), (1, 256, 88, 168), (1, 256, 88, 168), (1, 256, 44, 84), (1, 256, 44, 84), (1, 256, 22, 42), (1, 256, 22, 42), (1, 256, 11, 21), (1, 256, 11, 21), (1, 256, 11, 21), (1, 256, 216, 200), (1, 512, 108, 100), (1, 1024, 54, 50), (1, 2048, 27, 25), (1, 256, 216, 200), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 216, 200), (1, 256, 216, 200), (1, 256, 108, 100), (1, 256, 108, 100), (1, 256, 54, 50), (1, 256, 54, 50), (1, 256, 27, 25), (1, 256, 27, 25), (1, 256, 200, 216), (1, 512, 100, 108), (1, 1024, 50, 54), (1, 2048, 25, 27), (1, 256, 200, 216), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 200, 216), (1, 256, 200, 216), (1, 256, 100, 108), (1, 256, 100, 108), (1, 256, 50, 54), (1, 256, 50, 54), (1, 256, 25, 27), (1, 256, 25, 27), (1, 256, 13, 14), (1, 256, 13, 14), (1, 256, 13, 14), (1, 256, 264, 200), (1, 512, 132, 100), (1, 1024, 66, 50), (1, 2048, 33, 25), (1, 256, 264, 200), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 264, 200), (1, 256, 264, 200), (1, 256, 132, 100), (1, 256, 132, 100), (1, 256, 66, 50), (1, 256, 66, 50), (1, 256, 33, 25), (1, 256, 33, 25), (1, 256, 160, 336), (1, 512, 80, 168), (1, 1024, 40, 84), (1, 2048, 20, 42), (1, 256, 160, 336), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 160, 336), (1, 256, 160, 336), (1, 256, 80, 168), (1, 256, 80, 168), (1, 256, 40, 84), (1, 256, 40, 84), (1, 256, 20, 42), (1, 256, 20, 42), (1, 256, 336, 200), (1, 512, 168, 100), (1, 1024, 84, 50), (1, 2048, 42, 25), (1, 256, 336, 200), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 336, 200), (1, 256, 336, 200), (1, 256, 168, 100), (1, 256, 168, 100), (1, 256, 84, 50), (1, 256, 84, 50), (1, 256, 42, 25), (1, 256, 42, 25), (1, 256, 184, 336), (1, 512, 92, 168), (1, 1024, 46, 84), (1, 2048, 23, 42), (1, 256, 184, 336), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 184, 336), (1, 256, 184, 336), (1, 256, 92, 168), (1, 256, 92, 168), (1, 256, 46, 84), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 23, 42), (1, 256, 168, 336), (1, 512, 84, 168), (1, 1024, 42, 84), (1, 2048, 21, 42), (1, 256, 168, 336), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 168, 336), (1, 256, 168, 336), (1, 256, 84, 168), (1, 256, 84, 168), (1, 256, 42, 84), (1, 256, 42, 84), (1, 256, 21, 42), (1, 256, 21, 42), (1, 256, 256, 200), (1, 512, 128, 100), (1, 1024, 64, 50), (1, 2048, 32, 25), (1, 256, 256, 200), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 256, 200), (1, 256, 256, 200), (1, 256, 128, 100), (1, 256, 128, 100), (1, 256, 64, 50), (1, 256, 64, 50), (1, 256, 32, 25), (1, 256, 32, 25), (1, 256, 200, 232), (1, 512, 100, 116), (1, 1024, 50, 58), (1, 2048, 25, 29), (1, 256, 200, 232), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 200, 232), (1, 256, 200, 232), (1, 256, 100, 116), (1, 256, 100, 116), (1, 256, 50, 58), (1, 256, 50, 58), (1, 256, 25, 29), (1, 256, 25, 29), (1, 256, 336, 152), (1, 512, 168, 76), (1, 1024, 84, 38), (1, 2048, 42, 19), (1, 256, 336, 152), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 336, 152), (1, 256, 336, 152), (1, 256, 168, 76), (1, 256, 168, 76), (1, 256, 84, 38), (1, 256, 84, 38), (1, 256, 42, 19), (1, 256, 42, 19), (1, 256, 21, 10), (1, 256, 21, 10), (1, 256, 21, 10), (1, 256, 200, 224), (1, 512, 100, 112), (1, 1024, 50, 56), (1, 2048, 25, 28), (1, 256, 200, 224), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 200, 224), (1, 256, 200, 224), (1, 256, 100, 112), (1, 256, 100, 112), (1, 256, 50, 56), (1, 256, 50, 56), (1, 256, 25, 28), (1, 256, 25, 28), (1, 256, 144, 336), (1, 512, 72, 168), (1, 1024, 36, 84), (1, 2048, 18, 42), (1, 256, 144, 336), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 144, 336), (1, 256, 144, 336), (1, 256, 72, 168), (1, 256, 72, 168), (1, 256, 36, 84), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 18, 42), (1, 256, 9, 21), (1, 256, 9, 21), (1, 256, 9, 21), (1, 256, 336, 160), (1, 512, 168, 80), (1, 1024, 84, 40), (1, 2048, 42, 20), (1, 256, 336, 160), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 336, 160), (1, 256, 336, 160), (1, 256, 168, 80), (1, 256, 168, 80), (1, 256, 84, 40), (1, 256, 84, 40), (1, 256, 42, 20), (1, 256, 42, 20), (1, 256, 240, 200), (1, 512, 120, 100), (1, 1024, 60, 50), (1, 2048, 30, 25), (1, 256, 240, 200), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 240, 200), (1, 256, 240, 200), (1, 256, 120, 100), (1, 256, 120, 100), (1, 256, 60, 50), (1, 256, 60, 50), (1, 256, 30, 25), (1, 256, 30, 25), (1, 256, 15, 13), (1, 256, 15, 13), (1, 256, 15, 13), (1, 256, 88, 336), (1, 512, 44, 168), (1, 1024, 22, 84), (1, 2048, 11, 42), (1, 256, 88, 336), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 88, 336), (1, 256, 88, 336), (1, 256, 44, 168), (1, 256, 44, 168), (1, 256, 22, 84), (1, 256, 22, 84), (1, 256, 11, 42), (1, 256, 11, 42), (1, 256, 6, 21), (1, 256, 6, 21), (1, 256, 6, 21), (1, 256, 104, 336), (1, 512, 52, 168), (1, 1024, 26, 84), (1, 2048, 13, 42), (1, 256, 104, 336), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 104, 336), (1, 256, 104, 336), (1, 256, 52, 168), (1, 256, 52, 168), (1, 256, 26, 84), (1, 256, 26, 84), (1, 256, 13, 42), (1, 256, 13, 42), (1, 256, 7, 21), (1, 256, 7, 21), (1, 256, 7, 21), (1, 256, 120, 336), (1, 512, 60, 168), (1, 1024, 30, 84), (1, 2048, 15, 42), (1, 256, 120, 336), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 120, 336), (1, 256, 120, 336), (1, 256, 60, 168), (1, 256, 60, 168), (1, 256, 30, 84), (1, 256, 30, 84), (1, 256, 15, 42), (1, 256, 15, 42), (1, 256, 8, 21), (1, 256, 8, 21), (1, 256, 8, 21), (1, 256, 232, 200), (1, 512, 116, 100), (1, 1024, 58, 50), (1, 2048, 29, 25), (1, 256, 232, 200), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 232, 200), (1, 256, 232, 200), (1, 256, 116, 100), (1, 256, 116, 100), (1, 256, 58, 50), (1, 256, 58, 50), (1, 256, 29, 25), (1, 256, 29, 25), (1, 256, 336, 176), (1, 512, 168, 88), (1, 1024, 84, 44), (1, 2048, 42, 22), (1, 256, 336, 176), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 336, 176), (1, 256, 336, 176), (1, 256, 168, 88), (1, 256, 168, 88), (1, 256, 84, 44), (1, 256, 84, 44), (1, 256, 42, 22), (1, 256, 42, 22), (1, 256, 21, 11), (1, 256, 21, 11), (1, 256, 21, 11), (1, 256, 128, 336), (1, 512, 64, 168), (1, 1024, 32, 84), (1, 2048, 16, 42), (1, 256, 128, 336), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 128, 336), (1, 256, 128, 336), (1, 256, 64, 168), (1, 256, 64, 168), (1, 256, 32, 84), (1, 256, 32, 84), (1, 256, 16, 42), (1, 256, 16, 42), (1, 256, 96, 336), (1, 512, 48, 168), (1, 1024, 24, 84), (1, 2048, 12, 42), (1, 256, 96, 336), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 96, 336), (1, 256, 96, 336), (1, 256, 48, 168), (1, 256, 48, 168), (1, 256, 24, 84), (1, 256, 24, 84), (1, 256, 12, 42), (1, 256, 12, 42), (1, 256, 336, 128), (1, 512, 168, 64), (1, 1024, 84, 32), (1, 2048, 42, 16), (1, 256, 336, 128), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 336, 128), (1, 256, 336, 128), (1, 256, 168, 64), (1, 256, 168, 64), (1, 256, 84, 32), (1, 256, 84, 32), (1, 256, 42, 16), (1, 256, 42, 16), (1, 256, 21, 8), (1, 256, 21, 8), (1, 256, 21, 8), (1, 256, 112, 336), (1, 512, 56, 168), (1, 1024, 28, 84), (1, 2048, 14, 42), (1, 256, 112, 336), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 112, 336), (1, 256, 112, 336), (1, 256, 56, 168), (1, 256, 56, 168), (1, 256, 28, 84), (1, 256, 28, 84), (1, 256, 14, 42), (1, 256, 14, 42), (1, 256, 136, 336), (1, 512, 68, 168), (1, 1024, 34, 84), (1, 2048, 17, 42), (1, 256, 136, 336), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 136, 336), (1, 256, 136, 336), (1, 256, 68, 168), (1, 256, 68, 168), (1, 256, 34, 84), (1, 256, 34, 84), (1, 256, 17, 42), (1, 256, 17, 42), (1, 256, 336, 184), (1, 512, 168, 92), (1, 1024, 84, 46), (1, 2048, 42, 23), (1, 256, 336, 184), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 42, 23), (1, 256, 336, 184), (1, 256, 336, 184), (1, 256, 168, 92), (1, 256, 168, 92), (1, 256, 84, 46), (1, 256, 84, 46), (1, 256, 42, 23), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (256, 1024, 1, 1), (256, 2048, 1, 1), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1), (3, 256, 1, 1), (12, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (256,), (3,), (12,), (3,), (12,), (3,), (12,), (3,), (12,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            size=[(84, 50), (168, 100), (336, 200), (50, 76), (100, 152), (200, 304), (50, 78), (100, 156), (200, 312), (50, 68), (100, 136), (200, 272), (50, 84), (100, 168), (200, 336), (50, 64), (100, 128), (200, 256), (76, 50), (152, 100), (304, 200), (68, 50), (136, 100), (272, 200), (72, 50), (144, 100), (288, 200), (50, 60), (100, 120), (200, 240), (50, 70), (100, 140), (200, 280), (56, 50), (112, 100), (224, 200), (52, 50), (104, 100), (208, 200), (50, 80), (100, 160), (200, 320), (50, 72), (100, 144), (200, 288), (48, 84), (96, 168), (192, 336), (50, 50), (100, 100), (200, 200), (82, 50), (164, 100), (328, 200), (50, 74), (100, 148), (200, 296), (50, 82), (100, 164), (200, 328), (38, 84), (76, 168), (152, 336), (78, 50), (156, 100), (312, 200), (70, 50), (140, 100), (280, 200), (50, 52), (100, 104), (200, 208), (50, 66), (100, 132), (200, 264), (62, 50), (124, 100), (248, 200), (84, 48), (168, 96), (336, 192), (74, 50), (148, 100), (296, 200), (50, 62), (100, 124), (200, 248), (80, 50), (160, 100), (320, 200), (44, 84), (88, 168), (176, 336), (54, 50), (108, 100), (216, 200), (50, 54), (100, 108), (200, 216), (66, 50), (132, 100), (264, 200), (40, 84), (80, 168), (160, 336), (84, 50), (168, 100), (336, 200), (46, 84), (92, 168), (184, 336), (42, 84), (84, 168), (168, 336), (64, 50), (128, 100), (256, 200), (50, 58), (100, 116), (200, 232), (84, 38), (168, 76), (336, 152), (50, 56), (100, 112), (200, 224), (36, 84), (72, 168), (144, 336), (84, 40), (168, 80), (336, 160), (60, 50), (120, 100), (240, 200), (22, 84), (44, 168), (88, 336), (26, 84), (52, 168), (104, 336), (30, 84), (60, 168), (120, 336), (58, 50), (116, 100), (232, 200), (84, 44), (168, 88), (336, 176), (32, 84), (64, 168), (128, 336), (24, 84), (48, 168), (96, 336), (84, 32), (168, 64), (336, 128), (28, 84), (56, 168), (112, 336), (34, 84), (68, 168), (136, 336), (84, 46), (168, 92), (336, 184)],
            mode=['nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 42, 25), (2, 256, 84, 50), (2, 256, 168, 100), (1, 256, 25, 38), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 25, 39), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 25, 34), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 25, 42), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 25, 32), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 38, 25), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 34, 25), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 36, 25), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 25, 30), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 25, 35), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 28, 25), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 26, 25), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 25, 40), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 25, 36), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 24, 42), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 25, 25), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 41, 25), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 25, 37), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 25, 41), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 19, 42), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 39, 25), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 35, 25), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 25, 26), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 25, 33), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 31, 25), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 42, 24), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 37, 25), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 25, 31), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 40, 25), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 22, 42), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 27, 25), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 25, 27), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 33, 25), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 20, 42), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 42, 25), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 23, 42), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 21, 42), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 32, 25), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 25, 29), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 42, 19), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 25, 28), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 18, 42), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 42, 20), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 30, 25), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 11, 42), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 13, 42), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 15, 42), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 29, 25), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 42, 22), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 16, 42), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 12, 42), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 42, 16), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 14, 42), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 17, 42), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 42, 23), (1, 256, 84, 46), (1, 256, 168, 92)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 256, 84, 50), (2, 256, 168, 100), (2, 256, 336, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2, 1), (16,), (14, 1), (69,), (8819, 4), (8819, 2), (), (8622, 4), (8819, 4), (2, 1), (14, 1), (4,), (14,), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 200, 304), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4741, 4), (4741, 2), (4741, 4), (1000, 256, 7, 7), (80000, 4), (80000, 2), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 200, 312), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4780, 4), (4780, 2), (4780, 4), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 200, 272), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4663, 4), (4663, 2), (4663, 4), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 200, 336), (4819, 4), (4819, 2), (4819, 4), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 200, 256), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4624, 4), (4624, 2), (4624, 4), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 304, 200), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 272, 200), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 288, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4702, 4), (4702, 2), (4702, 4), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 200, 240), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4585, 4), (4585, 2), (4585, 4), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 200, 280), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 224, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4546, 4), (4546, 2), (4546, 4), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 208, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4507, 4), (4507, 2), (4507, 4), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 200, 320), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 200, 288), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 192, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4756, 4), (4756, 2), (4756, 4), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 200, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 328, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (78, 4), (3, 4), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 200, 296), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 4), (2, 4), (4, 4), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 200, 328), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 152, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4630, 4), (4630, 2), (4630, 4), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 312, 200), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 280, 200), (10, 4), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 200, 208), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 200, 264), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 248, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 336, 192), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 296, 200), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 200, 248), (7, 4), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 320, 200), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 176, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4693, 4), (4693, 2), (4693, 4), (40, 4), (13, 4), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 216, 200), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (22, 4), (4778, 4), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 200, 216), (5, 4), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 264, 200), (4656, 4), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 160, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 336, 200), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 184, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 168, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 256, 200), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 200, 232), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (36, 4), (34, 4), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 336, 152), (27, 4), (6, 4), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 200, 224), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 144, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4567, 4), (4567, 2), (4567, 4), (30, 4), (11, 4), (28, 4), (35, 4), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 336, 160), (4662, 4), (31, 4), (21, 4), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 240, 200), (18, 4), (4651, 4), (4740, 4), (8, 4), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 88, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4378, 4), (4378, 2), (4378, 4), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 104, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4441, 4), (4441, 2), (4441, 4), (14, 4), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 120, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4504, 4), (4504, 2), (4504, 4), (127, 4), (17, 4), (4779, 4), (69, 4), (15, 4), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 232, 200), (4732, 4), (12, 4), (41, 4), (55, 4), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 336, 176), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 128, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (9, 4), (24, 4), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 96, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (16, 4), (19, 4), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 336, 128), (26, 4), (23, 4), (32, 4), (44, 4), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 112, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4733, 4), (4610, 4), (25, 4), (57, 4), (38, 4), (76, 4), (93, 4), (4659, 4), (20, 4), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 136, 336), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1, 3, 4), (39, 4), (1, 256, 84, 46), (1, 256, 168, 92), (1, 256, 336, 184)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 256, 84, 50), (2, 256, 168, 100), (2, 256, 336, 200), (67200, 1, 4), (16800, 1, 4), (4200, 1, 4), (1050, 1, 4), (273, 1, 4), (1, 242991), (16,), (1, 268569), (69,), (1, 4), (8819, 2), (), (8622, 1), (8819, 1), (1, 1000), (1, 1000), (4,), (14,), (1, 256, 50, 76), (1, 256, 100, 152), (1, 256, 200, 304), (60800, 1, 4), (15200, 1, 4), (3800, 1, 4), (950, 1, 4), (247, 1, 4), (1, 4), (4741, 2), (4741, 1), (), (1, 4), (80000, 2), (1, 256, 50, 78), (1, 256, 100, 156), (1, 256, 200, 312), (62400, 1, 4), (15600, 1, 4), (3900, 1, 4), (975, 1, 4), (260, 1, 4), (1, 4), (4780, 2), (4780, 1), (1, 256, 50, 68), (1, 256, 100, 136), (1, 256, 200, 272), (54400, 1, 4), (13600, 1, 4), (3400, 1, 4), (850, 1, 4), (221, 1, 4), (1, 4), (4663, 2), (4663, 1), (1, 256, 50, 84), (1, 256, 100, 168), (1, 256, 200, 336), (1, 4), (4819, 2), (4819, 1), (1, 256, 50, 64), (1, 256, 100, 128), (1, 256, 200, 256), (51200, 1, 4), (12800, 1, 4), (3200, 1, 4), (800, 1, 4), (208, 1, 4), (1, 4), (4624, 2), (4624, 1), (1, 256, 76, 50), (1, 256, 152, 100), (1, 256, 304, 200), (1, 256, 68, 50), (1, 256, 136, 100), (1, 256, 272, 200), (1, 256, 72, 50), (1, 256, 144, 100), (1, 256, 288, 200), (57600, 1, 4), (14400, 1, 4), (3600, 1, 4), (900, 1, 4), (234, 1, 4), (1, 4), (4702, 2), (4702, 1), (1, 256, 50, 60), (1, 256, 100, 120), (1, 256, 200, 240), (48000, 1, 4), (12000, 1, 4), (3000, 1, 4), (750, 1, 4), (195, 1, 4), (1, 4), (4585, 2), (4585, 1), (1, 256, 50, 70), (1, 256, 100, 140), (1, 256, 200, 280), (56000, 1, 4), (14000, 1, 4), (3500, 1, 4), (875, 1, 4), (1, 256, 56, 50), (1, 256, 112, 100), (1, 256, 224, 200), (44800, 1, 4), (11200, 1, 4), (2800, 1, 4), (700, 1, 4), (182, 1, 4), (1, 4), (4546, 2), (4546, 1), (1, 256, 52, 50), (1, 256, 104, 100), (1, 256, 208, 200), (41600, 1, 4), (10400, 1, 4), (2600, 1, 4), (650, 1, 4), (169, 1, 4), (1, 4), (4507, 2), (4507, 1), (1, 256, 50, 80), (1, 256, 100, 160), (1, 256, 200, 320), (64000, 1, 4), (16000, 1, 4), (4000, 1, 4), (1000, 1, 4), (1, 256, 50, 72), (1, 256, 100, 144), (1, 256, 200, 288), (1, 256, 48, 84), (1, 256, 96, 168), (1, 256, 192, 336), (64512, 1, 4), (16128, 1, 4), (4032, 1, 4), (1008, 1, 4), (252, 1, 4), (1, 4), (4756, 2), (4756, 1), (1, 256, 50, 50), (1, 256, 100, 100), (1, 256, 200, 200), (40000, 1, 4), (10000, 1, 4), (2500, 1, 4), (625, 1, 4), (1, 256, 82, 50), (1, 256, 164, 100), (1, 256, 328, 200), (65600, 1, 4), (16400, 1, 4), (4100, 1, 4), (1025, 1, 4), (78, 1), (3, 1), (1, 256, 50, 74), (1, 256, 100, 148), (1, 256, 200, 296), (59200, 1, 4), (14800, 1, 4), (3700, 1, 4), (925, 1, 4), (1, 1), (2, 1), (4, 1), (1, 256, 50, 82), (1, 256, 100, 164), (1, 256, 200, 328), (1, 256, 38, 84), (1, 256, 76, 168), (1, 256, 152, 336), (51072, 1, 4), (12768, 1, 4), (3192, 1, 4), (798, 1, 4), (210, 1, 4), (1, 4), (4630, 2), (4630, 1), (1, 256, 78, 50), (1, 256, 156, 100), (1, 256, 312, 200), (1, 256, 70, 50), (1, 256, 140, 100), (1, 256, 280, 200), (10, 1), (1, 256, 50, 52), (1, 256, 100, 104), (1, 256, 200, 208), (1, 256, 50, 66), (1, 256, 100, 132), (1, 256, 200, 264), (52800, 1, 4), (13200, 1, 4), (3300, 1, 4), (825, 1, 4), (1, 256, 62, 50), (1, 256, 124, 100), (1, 256, 248, 200), (49600, 1, 4), (12400, 1, 4), (3100, 1, 4), (775, 1, 4), (1, 256, 84, 48), (1, 256, 168, 96), (1, 256, 336, 192), (1, 256, 74, 50), (1, 256, 148, 100), (1, 256, 296, 200), (1, 256, 50, 62), (1, 256, 100, 124), (1, 256, 200, 248), (7, 1), (1, 256, 80, 50), (1, 256, 160, 100), (1, 256, 320, 200), (1, 256, 44, 84), (1, 256, 88, 168), (1, 256, 176, 336), (59136, 1, 4), (14784, 1, 4), (3696, 1, 4), (924, 1, 4), (231, 1, 4), (1, 4), (4693, 2), (4693, 1), (40, 1), (13, 1), (1, 256, 54, 50), (1, 256, 108, 100), (1, 256, 216, 200), (43200, 1, 4), (10800, 1, 4), (2700, 1, 4), (675, 1, 4), (22, 1), (4778, 1), (1, 256, 50, 54), (1, 256, 100, 108), (1, 256, 200, 216), (5, 1), (1, 256, 66, 50), (1, 256, 132, 100), (1, 256, 264, 200), (4656, 1), (1, 256, 40, 84), (1, 256, 80, 168), (1, 256, 160, 336), (53760, 1, 4), (13440, 1, 4), (3360, 1, 4), (840, 1, 4), (1, 256, 84, 50), (1, 256, 168, 100), (1, 256, 336, 200), (1, 256, 46, 84), (1, 256, 92, 168), (1, 256, 184, 336), (61824, 1, 4), (15456, 1, 4), (3864, 1, 4), (966, 1, 4), (1, 256, 42, 84), (1, 256, 84, 168), (1, 256, 168, 336), (56448, 1, 4), (14112, 1, 4), (3528, 1, 4), (882, 1, 4), (1, 256, 64, 50), (1, 256, 128, 100), (1, 256, 256, 200), (1, 256, 50, 58), (1, 256, 100, 116), (1, 256, 200, 232), (46400, 1, 4), (11600, 1, 4), (2900, 1, 4), (725, 1, 4), (36, 1), (34, 1), (1, 256, 84, 38), (1, 256, 168, 76), (1, 256, 336, 152), (27, 1), (6, 1), (1, 256, 50, 56), (1, 256, 100, 112), (1, 256, 200, 224), (1, 256, 36, 84), (1, 256, 72, 168), (1, 256, 144, 336), (48384, 1, 4), (12096, 1, 4), (3024, 1, 4), (756, 1, 4), (189, 1, 4), (1, 4), (4567, 2), (4567, 1), (30, 1), (11, 1), (28, 1), (35, 1), (1, 256, 84, 40), (1, 256, 168, 80), (1, 256, 336, 160), (4662, 1), (31, 1), (21, 1), (1, 256, 60, 50), (1, 256, 120, 100), (1, 256, 240, 200), (18, 1), (4651, 1), (4740, 1), (8, 1), (1, 256, 22, 84), (1, 256, 44, 168), (1, 256, 88, 336), (29568, 1, 4), (7392, 1, 4), (1848, 1, 4), (462, 1, 4), (126, 1, 4), (1, 4), (4378, 2), (4378, 1), (1, 256, 26, 84), (1, 256, 52, 168), (1, 256, 104, 336), (34944, 1, 4), (8736, 1, 4), (2184, 1, 4), (546, 1, 4), (147, 1, 4), (1, 4), (4441, 2), (4441, 1), (14, 1), (1, 256, 30, 84), (1, 256, 60, 168), (1, 256, 120, 336), (40320, 1, 4), (10080, 1, 4), (2520, 1, 4), (630, 1, 4), (168, 1, 4), (1, 4), (4504, 2), (4504, 1), (127, 1), (17, 1), (4779, 1), (69, 1), (15, 1), (1, 256, 58, 50), (1, 256, 116, 100), (1, 256, 232, 200), (4732, 1), (12, 1), (41, 1), (55, 1), (1, 256, 84, 44), (1, 256, 168, 88), (1, 256, 336, 176), (1, 256, 32, 84), (1, 256, 64, 168), (1, 256, 128, 336), (43008, 1, 4), (10752, 1, 4), (2688, 1, 4), (672, 1, 4), (9, 1), (24, 1), (1, 256, 24, 84), (1, 256, 48, 168), (1, 256, 96, 336), (32256, 1, 4), (8064, 1, 4), (2016, 1, 4), (504, 1, 4), (16, 1), (19, 1), (1, 256, 84, 32), (1, 256, 168, 64), (1, 256, 336, 128), (26, 1), (23, 1), (32, 1), (44, 1), (1, 256, 28, 84), (1, 256, 56, 168), (1, 256, 112, 336), (37632, 1, 4), (9408, 1, 4), (2352, 1, 4), (588, 1, 4), (4733, 1), (4610, 1), (25, 1), (57, 1), (38, 1), (76, 1), (93, 1), (4659, 1), (20, 1), (1, 256, 34, 84), (1, 256, 68, 168), (1, 256, 136, 336), (45696, 1, 4), (11424, 1, 4), (2856, 1, 4), (714, 1, 4), (39, 1), (1, 256, 84, 46), (1, 256, 168, 92), (1, 256, 336, 184)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_1': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            stride=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(2, 256, 42, 25), (1, 256, 25, 38), (1, 256, 25, 39), (1, 256, 25, 34), (1, 256, 25, 42), (1, 256, 25, 32), (1, 256, 38, 25), (1, 256, 34, 25), (1, 256, 36, 25), (1, 256, 25, 30), (1, 256, 25, 35), (1, 256, 28, 25), (1, 256, 26, 25), (1, 256, 25, 40), (1, 256, 25, 36), (1, 256, 24, 42), (1, 256, 25, 25), (1, 256, 41, 25), (1, 256, 25, 37), (1, 256, 25, 41), (1, 256, 19, 42), (1, 256, 39, 25), (1, 256, 35, 25), (1, 256, 25, 26), (1, 256, 25, 33), (1, 256, 31, 25), (1, 256, 42, 24), (1, 256, 37, 25), (1, 256, 25, 31), (1, 256, 40, 25), (1, 256, 22, 42), (1, 256, 27, 25), (1, 256, 25, 27), (1, 256, 33, 25), (1, 256, 20, 42), (1, 256, 42, 25), (1, 256, 23, 42), (1, 256, 21, 42), (1, 256, 32, 25), (1, 256, 25, 29), (1, 256, 42, 19), (1, 256, 25, 28), (1, 256, 18, 42), (1, 256, 42, 20), (1, 256, 30, 25), (1, 256, 11, 42), (1, 256, 13, 42), (1, 256, 15, 42), (1, 256, 29, 25), (1, 256, 42, 22), (1, 256, 16, 42), (1, 256, 12, 42), (1, 256, 42, 16), (1, 256, 14, 42), (1, 256, 17, 42), (1, 256, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            end=[200, 336, 100, 168, 50, 84, 25, 42, 13, 21, 304, 152, 76, 38, 19, 312, 156, 78, 39, 20, 272, 136, 68, 34, 17, 256, 128, 64, 32, 16, 288, 144, 72, 36, 18, 240, 120, 60, 30, 15, 280, 140, 70, 35, 224, 112, 56, 28, 14, 208, 104, 52, 26, 320, 160, 80, 40, 192, 96, 48, 24, 12, 328, 164, 82, 41, 296, 148, 74, 37, 10, 264, 132, 66, 33, 248, 124, 62, 31, 176, 88, 44, 22, 11, 216, 108, 54, 27, 184, 92, 46, 23, 232, 116, 58, 29, 9, 6, 7, 8],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 0.5, 0.5, 0.5, 0.5, 0.5, 4, 8, 16, 32, 64, 0.5, 0.0, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 64, 0.5, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32, 4, 8, 16, 32],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(200,), (336,), (100,), (168,), (50,), (84,), (25,), (42,), (13,), (21,), (16,), (69,), (8819, 2), (4,), (14,), (304,), (152,), (76,), (38,), (19,), (4741, 2), (), (80000, 2), (312,), (156,), (78,), (39,), (20,), (4780, 2), (272,), (136,), (68,), (34,), (17,), (4663, 2), (4819, 2), (256,), (128,), (64,), (32,), (16,), (4624, 2), (288,), (144,), (72,), (36,), (18,), (4702, 2), (240,), (120,), (60,), (30,), (15,), (4585, 2), (280,), (140,), (70,), (35,), (224,), (112,), (56,), (28,), (14,), (4546, 2), (208,), (104,), (52,), (26,), (4507, 2), (320,), (160,), (80,), (40,), (192,), (96,), (48,), (24,), (12,), (4756, 2), (328,), (164,), (82,), (41,), (296,), (148,), (74,), (37,), (152,), (76,), (38,), (19,), (10,), (4630, 2), (264,), (132,), (66,), (33,), (248,), (124,), (62,), (31,), (176,), (88,), (44,), (22,), (11,), (4693, 2), (216,), (108,), (54,), (27,), (160,), (80,), (40,), (20,), (184,), (92,), (46,), (23,), (168,), (84,), (42,), (21,), (232,), (116,), (58,), (29,), (144,), (72,), (36,), (18,), (9,), (4567, 2), (88,), (44,), (22,), (11,), (6,), (4378, 2), (104,), (52,), (26,), (13,), (7,), (4441, 2), (120,), (60,), (30,), (15,), (8,), (4504, 2), (128,), (64,), (32,), (16,), (96,), (48,), (24,), (12,), (112,), (56,), (28,), (14,), (136,), (68,), (34,), (17,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((67200,), (67200,), (67200,), (67200,)), ((16800,), (16800,), (16800,), (16800,)), ((4200,), (4200,), (4200,), (4200,)), ((1050,), (1050,), (1050,), (1050,)), ((273,), (273,), (273,), (273,)), ((16,), (16,), (16,), (16,)), ((69,), (69,), (69,), (69,)), ((4,), (4,), (4,), (4,)), ((14,), (14,), (14,), (14,)), ((60800,), (60800,), (60800,), (60800,)), ((15200,), (15200,), (15200,), (15200,)), ((3800,), (3800,), (3800,), (3800,)), ((950,), (950,), (950,), (950,)), ((247,), (247,), (247,), (247,)), ((62400,), (62400,), (62400,), (62400,)), ((15600,), (15600,), (15600,), (15600,)), ((3900,), (3900,), (3900,), (3900,)), ((975,), (975,), (975,), (975,)), ((260,), (260,), (260,), (260,)), ((54400,), (54400,), (54400,), (54400,)), ((13600,), (13600,), (13600,), (13600,)), ((3400,), (3400,), (3400,), (3400,)), ((850,), (850,), (850,), (850,)), ((221,), (221,), (221,), (221,)), ((51200,), (51200,), (51200,), (51200,)), ((12800,), (12800,), (12800,), (12800,)), ((3200,), (3200,), (3200,), (3200,)), ((800,), (800,), (800,), (800,)), ((208,), (208,), (208,), (208,)), ((57600,), (57600,), (57600,), (57600,)), ((14400,), (14400,), (14400,), (14400,)), ((3600,), (3600,), (3600,), (3600,)), ((900,), (900,), (900,), (900,)), ((234,), (234,), (234,), (234,)), ((48000,), (48000,), (48000,), (48000,)), ((12000,), (12000,), (12000,), (12000,)), ((3000,), (3000,), (3000,), (3000,)), ((750,), (750,), (750,), (750,)), ((195,), (195,), (195,), (195,)), ((56000,), (56000,), (56000,), (56000,)), ((14000,), (14000,), (14000,), (14000,)), ((3500,), (3500,), (3500,), (3500,)), ((875,), (875,), (875,), (875,)), ((44800,), (44800,), (44800,), (44800,)), ((11200,), (11200,), (11200,), (11200,)), ((2800,), (2800,), (2800,), (2800,)), ((700,), (700,), (700,), (700,)), ((182,), (182,), (182,), (182,)), ((41600,), (41600,), (41600,), (41600,)), ((10400,), (10400,), (10400,), (10400,)), ((2600,), (2600,), (2600,), (2600,)), ((650,), (650,), (650,), (650,)), ((169,), (169,), (169,), (169,)), ((64000,), (64000,), (64000,), (64000,)), ((16000,), (16000,), (16000,), (16000,)), ((4000,), (4000,), (4000,), (4000,)), ((1000,), (1000,), (1000,), (1000,)), ((64512,), (64512,), (64512,), (64512,)), ((16128,), (16128,), (16128,), (16128,)), ((4032,), (4032,), (4032,), (4032,)), ((1008,), (1008,), (1008,), (1008,)), ((252,), (252,), (252,), (252,)), ((40000,), (40000,), (40000,), (40000,)), ((10000,), (10000,), (10000,), (10000,)), ((2500,), (2500,), (2500,), (2500,)), ((625,), (625,), (625,), (625,)), ((65600,), (65600,), (65600,), (65600,)), ((16400,), (16400,), (16400,), (16400,)), ((4100,), (4100,), (4100,), (4100,)), ((1025,), (1025,), (1025,), (1025,)), ((59200,), (59200,), (59200,), (59200,)), ((14800,), (14800,), (14800,), (14800,)), ((3700,), (3700,), (3700,), (3700,)), ((925,), (925,), (925,), (925,)), ((51072,), (51072,), (51072,), (51072,)), ((12768,), (12768,), (12768,), (12768,)), ((3192,), (3192,), (3192,), (3192,)), ((798,), (798,), (798,), (798,)), ((210,), (210,), (210,), (210,)), ((52800,), (52800,), (52800,), (52800,)), ((13200,), (13200,), (13200,), (13200,)), ((3300,), (3300,), (3300,), (3300,)), ((825,), (825,), (825,), (825,)), ((49600,), (49600,), (49600,), (49600,)), ((12400,), (12400,), (12400,), (12400,)), ((3100,), (3100,), (3100,), (3100,)), ((775,), (775,), (775,), (775,)), ((59136,), (59136,), (59136,), (59136,)), ((14784,), (14784,), (14784,), (14784,)), ((3696,), (3696,), (3696,), (3696,)), ((924,), (924,), (924,), (924,)), ((231,), (231,), (231,), (231,)), ((43200,), (43200,), (43200,), (43200,)), ((10800,), (10800,), (10800,), (10800,)), ((2700,), (2700,), (2700,), (2700,)), ((675,), (675,), (675,), (675,)), ((53760,), (53760,), (53760,), (53760,)), ((13440,), (13440,), (13440,), (13440,)), ((3360,), (3360,), (3360,), (3360,)), ((840,), (840,), (840,), (840,)), ((61824,), (61824,), (61824,), (61824,)), ((15456,), (15456,), (15456,), (15456,)), ((3864,), (3864,), (3864,), (3864,)), ((966,), (966,), (966,), (966,)), ((56448,), (56448,), (56448,), (56448,)), ((14112,), (14112,), (14112,), (14112,)), ((3528,), (3528,), (3528,), (3528,)), ((882,), (882,), (882,), (882,)), ((46400,), (46400,), (46400,), (46400,)), ((11600,), (11600,), (11600,), (11600,)), ((2900,), (2900,), (2900,), (2900,)), ((725,), (725,), (725,), (725,)), ((48384,), (48384,), (48384,), (48384,)), ((12096,), (12096,), (12096,), (12096,)), ((3024,), (3024,), (3024,), (3024,)), ((756,), (756,), (756,), (756,)), ((189,), (189,), (189,), (189,)), ((29568,), (29568,), (29568,), (29568,)), ((7392,), (7392,), (7392,), (7392,)), ((1848,), (1848,), (1848,), (1848,)), ((462,), (462,), (462,), (462,)), ((126,), (126,), (126,), (126,)), ((34944,), (34944,), (34944,), (34944,)), ((8736,), (8736,), (8736,), (8736,)), ((2184,), (2184,), (2184,), (2184,)), ((546,), (546,), (546,), (546,)), ((147,), (147,), (147,), (147,)), ((40320,), (40320,), (40320,), (40320,)), ((10080,), (10080,), (10080,), (10080,)), ((2520,), (2520,), (2520,), (2520,)), ((630,), (630,), (630,), (630,)), ((168,), (168,), (168,), (168,)), ((43008,), (43008,), (43008,), (43008,)), ((10752,), (10752,), (10752,), (10752,)), ((2688,), (2688,), (2688,), (2688,)), ((672,), (672,), (672,), (672,)), ((32256,), (32256,), (32256,), (32256,)), ((8064,), (8064,), (8064,), (8064,)), ((2016,), (2016,), (2016,), (2016,)), ((504,), (504,), (504,), (504,)), ((37632,), (37632,), (37632,), (37632,)), ((9408,), (9408,), (9408,), (9408,)), ((2352,), (2352,), (2352,), (2352,)), ((588,), (588,), (588,), (588,)), ((45696,), (45696,), (45696,), (45696,)), ((11424,), (11424,), (11424,), (11424,)), ((2856,), (2856,), (2856,), (2856,)), ((714,), (714,), (714,), (714,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(67200,), (16800,), (4200,), (1050,), (273,), (242991,), (268569,), (403200,), (100800,), (25200,), (6300,), (1638,), (8819,), (1000,), (1024,), (4741,), (4780,), (4663,), (4819,), (4624,), (4702,), (4585,), (4546,), (4507,), (4756,), (4630,), (4693,), (4567,), (4378,), (4441,), (4504,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(67200,), (16800,), (4200,), (1050,), (273,), (242991,), (268569,), (403200,), (100800,), (25200,), (6300,), (1638,), (8819,), (1000,), (1024,), (4741,), (4780,), (4663,), (4819,), (4624,), (4702,), (4585,), (4546,), (4507,), (4756,), (4630,), (4693,), (4567,), (4378,), (4441,), (4504,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(67200, 3), (16800, 3), (4200, 3), (1050, 3), (273, 3), (403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(67200, 1), (16800, 1), (4200, 1), (1050, 1), (273, 1), (403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((201600, 4), (50400, 4), (12600, 4), (3150, 4), (819, 4)), ((2000,), (2000,), (2000,), (2000,), (819,)), ((2000, 4), (2000, 4), (2000, 4), (2000, 4), (819, 4)), ((1000,), (1000,), (1000,), (1000,), (741,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (741, 4)), ((1000,), (1000,), (1000,), (1000,), (780,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (780, 4)), ((1000,), (1000,), (1000,), (1000,), (663,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (663, 4)), ((1000,), (1000,), (1000,), (1000,), (819,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (819, 4)), ((1000,), (1000,), (1000,), (1000,), (624,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (624, 4)), ((1000,), (1000,), (1000,), (1000,), (702,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (702, 4)), ((1000,), (1000,), (1000,), (1000,), (585,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (585, 4)), ((1000,), (1000,), (1000,), (1000,), (546,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (546, 4)), ((1000,), (1000,), (1000,), (1000,), (507,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (507, 4)), ((1000,), (1000,), (1000,), (1000,), (756,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (756, 4)), ((1000,), (1000,), (1000,), (1000,), (630,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (630, 4)), ((1000,), (1000,), (1000,), (1000,), (693,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (693, 4)), ((1000,), (1000,), (1000,), (1000,), (567,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (567, 4)), ((1000,), (1000,), (1000,), (1000,), (378,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (378, 4)), ((1000,), (1000,), (1000,), (1000,), (441,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (441, 4)), ((1000,), (1000,), (1000,), (1000,), (504,)), ((1000, 4), (1000, 4), (1000, 4), (1000, 4), (504, 4))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((201600,), (50400,), (12600,), (3150,), (819,))],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'any': dict(
        name=["any"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(268569,), (1024,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (242991,), (2, 242991, 2), (2, 242991), (16,), (14,), (268569,), (14, 268569, 2), (14, 268569), (69,), (403200, 4), (100800, 4), (25200, 4), (6300, 4), (1638, 4), (8819, 2), (8819,), (1000,), (2, 1000, 2), (2, 1000), (14, 1000, 2), (14, 1000), (1024,), (4,), (18, 4), (4741, 2), (4741,), (80000, 2), (4780, 2), (4780,), (4663, 2), (4663,), (4819, 2), (4819,), (4624, 2), (4624,), (4702, 2), (4702,), (4585, 2), (4585,), (4546, 2), (4546,), (4507, 2), (4507,), (4756, 2), (4756,), (4630, 2), (4630,), (4693, 2), (4693,), (4567, 2), (4567,), (4378, 2), (4378,), (4441, 2), (4441,), (4504, 2), (4504,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (242991,), (2, 242991, 2), (2, 242991), (16,), (14,), (268569,), (14, 268569, 2), (14, 268569), (69,), (403200, 4), (100800, 4), (25200, 4), (6300, 4), (1638, 4), (8819, 2), (8819,), (1000,), (2, 1000, 2), (2, 1000), (14, 1000, 2), (14, 1000), (1024,), (4,), (18, 4), (4741, 2), (4741,), (80000, 2), (4780, 2), (4780,), (4663, 2), (4663,), (4819, 2), (4819,), (4624, 2), (4624,), (4702, 2), (4702,), (4585, 2), (4585,), (4546, 2), (4546,), (4507, 2), (4507,), (4756, 2), (4756,), (4630, 2), (4630,), (4693, 2), (4693,), (4567, 2), (4567,), (4378, 2), (4378,), (4441, 2), (4441,), (4504, 2), (4504,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2,), (242991,), (2, 242991), (14,), (268569,), (14, 268569), (403200, 1), (403200, 4), (100800, 1), (100800, 4), (25200, 1), (25200, 4), (6300, 1), (6300, 4), (1638, 1), (1638, 4), (8819, 4), (8819, 2), (8622,), (8819,), (1000,), (2, 1000), (14, 1000), (1024,), (18, 4), (4741, 4), (4741, 2), (4741,), (80000, 4), (80000, 2), (4780, 4), (4780, 2), (4780,), (4663, 4), (4663, 2), (4663,), (4819, 4), (4819, 2), (4819,), (4624, 4), (4624, 2), (4624,), (4702, 4), (4702, 2), (4702,), (4585, 4), (4585, 2), (4585,), (4546, 4), (4546, 2), (4546,), (4507, 4), (4507, 2), (4507,), (4756, 4), (4756, 2), (4756,), (78,), (3,), (1,), (2,), (4,), (4630, 4), (4630, 2), (4630,), (10,), (7,), (4693, 4), (4693, 2), (4693,), (40,), (13,), (22,), (4778,), (5,), (4656,), (36,), (34,), (27,), (6,), (4567, 4), (4567, 2), (4567,), (30,), (11,), (28,), (35,), (4662,), (31,), (21,), (18,), (4651,), (4740,), (8,), (4378, 4), (4378, 2), (4378,), (4441, 4), (4441, 2), (4441,), (14,), (4504, 4), (4504, 2), (4504,), (127,), (17,), (4779,), (69,), (15,), (4732,), (12,), (41,), (55,), (9,), (24,), (16,), (19,), (26,), (23,), (32,), (44,), (4733,), (4610,), (25,), (57,), (38,), (76,), (93,), (4659,), (20,), (39,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2,), (242991,), (2, 242991), (14,), (268569,), (14, 268569), (403200, 1), (403200, 4), (100800, 1), (100800, 4), (25200, 1), (25200, 4), (6300, 1), (6300, 4), (1638, 1), (1638, 4), (1, 4), (8819, 2), (), (), (1000,), (2, 1000), (14, 1000), (1024,), (18, 4), (1, 4), (4741, 2), (), (1, 4), (80000, 2), (1, 4), (4780, 2), (), (1, 4), (4663, 2), (), (1, 4), (4819, 2), (), (1, 4), (4624, 2), (), (1, 4), (4702, 2), (), (1, 4), (4585, 2), (), (1, 4), (4546, 2), (), (1, 4), (4507, 2), (), (1, 4), (4756, 2), (), (), (), (), (), (), (1, 4), (4630, 2), (), (), (), (1, 4), (4693, 2), (), (), (), (), (), (), (), (), (), (), (), (1, 4), (4567, 2), (), (), (), (), (), (), (), (), (), (), (), (), (1, 4), (4378, 2), (), (1, 4), (4441, 2), (), (), (1, 4), (4504, 2), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (2, 242991), (14, 1, 2), (14, 268569), (2, 1, 2), (2, 1000), (14, 1, 2), (14, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 242991, 2), (1,), (1, 268569, 2), (1,), (1, 1000, 2), (1,), (1, 1000, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'minimum': dict(
        name=["minimum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 1, 2), (14, 1, 2), (2, 1, 2), (14, 1, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 242991, 2), (1, 268569, 2), (1, 1000, 2), (1, 1000, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 0, 0, 0],
            max=[None, None, None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 242991, 2), (14, 268569, 2), (2, 1000, 2), (14, 1000, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 242991), (16,), (14, 268569), (69,), (2, 1000), (14, 1000), (4,), (14,), (1000, 80, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(2, 242991), (16,), (14, 268569), (69,), (2, 1000), (14, 1000), (4,), (14,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0, 1, 0, 1, 0, 1, 0, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 242991), (2, 242991), (14, 268569), (14, 268569), (2, 1000), (2, 1000), (14, 1000), (14, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0.7, 0.3, 0, 0.7, 0, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (242991,), (), (268569,), (268569,), (1000,), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'lt': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.3, 0.3, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (268569,), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(0,), (8,), (2,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (268569,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (268569,), (1000,), (1002,), (1014,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (268569,), (403200,), (100800,), (25200,), (6300,), (1638,), (1000,), (1002,), (1014,), (1024,), (80000,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'unique': dict(
        name=["unique"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16,), (240,), (69,), (187,), (4,), (508,), (14,), (498,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'unique_1': dict(
        name=["unique"],
        interface=["torch"],
        para=dict(
            sorted=[True, True, True, True, True, True, True, True],
            return_inverse=[False, False, False, False, False, False, False, False],
            return_counts=[False, False, False, False, False, False, False, False],
            dim=[None, None, None, None, None, None, None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16,), (240,), (69,), (187,), (4,), (508,), (14,), (498,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 1, 2, 3, 5, 0, 1, 2, 3],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(242991,), (268569,), (1002,), (1014,), (1024,), (1024,), (1024,), (1024,), (), (1000,), (1000,), (1000,), (1000,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'randperm_1': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[242633, 266932, 998, 1000],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16,), (69,), (2,), (4,), (14,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16,), (69,), (4,), (14,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 4), (69, 4), (4, 4), (14, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 4), (1, 4), (1, 4), (1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 4), (69, 4), (4, 4), (14, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 4), (1, 4), (1, 4), (1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((268569,), (268569,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'stack_2': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((268569,), (268569,)), ((268569, 4), (268569, 4))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(2, 3, 336, 200), (2, 12, 336, 200), (2, 3, 168, 100), (2, 12, 168, 100), (2, 3, 84, 50), (2, 12, 84, 50), (2, 3, 42, 25), (2, 12, 42, 25), (2, 3, 21, 13), (2, 12, 21, 13)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge_1': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200,), (100800,), (25200,), (6300,), (1638,), (1024,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'ne': dict(
        name=["ne"],
        interface=["torch.Tensor"],
        para=dict(
            other=[-100, -100, -100, -100, -100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200,), (100800,), (25200,), (6300,), (1638,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'lt_1': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1, 80],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200,), (100800,), (25200,), (6300,), (1638,), (1024,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'binary_cross_entropy_with_logits': dict(
        name=["binary_cross_entropy_with_logits"],
        para=dict(
            reduction=['none', 'none', 'none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(403200, 1), (100800, 1), (25200, 1), (6300, 1), (1638, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200, 1), (403200, 4), (100800, 1), (100800, 4), (25200, 1), (25200, 4), (6300, 1), (6300, 4), (1638, 1), (1638, 4), (1024,), (18, 4), (1, 256, 25, 38), (1, 256, 25, 34), (1, 256, 34, 25), (1, 256, 26, 25), (1, 256, 25, 39), (1, 256, 40, 25), (1, 256, 33, 25), (1, 256, 25, 25), (1, 256, 46, 84), (1, 256, 23, 42), (1, 256, 25, 33), (1, 256, 25, 31), (1, 256, 37, 25), (1, 256, 25, 42), (1, 256, 25, 37), (1, 256, 68, 50), (1, 256, 38, 25), (1, 256, 24, 42), (1, 256, 25, 40), (1, 256, 50, 68), (1, 256, 25, 41), (1, 256, 50, 76), (1, 256, 36, 84), (1, 256, 18, 42), (1, 256, 25, 27), (1, 256, 25, 35), (1, 256, 50, 66), (1, 256, 15, 42), (1, 256, 25, 36), (1, 256, 35, 25), (1, 256, 39, 25), (1, 256, 50, 64), (1, 256, 25, 32), (1, 256, 22, 42), (1, 256, 20, 42), (1, 256, 16, 42), (1, 256, 66, 50), (1, 256, 50, 74), (1, 256, 11, 42), (1, 256, 31, 25), (1, 256, 50, 80), (1, 256, 25, 29), (1, 256, 42, 84), (1, 256, 48, 84), (1, 256, 78, 50), (1, 256, 42, 25), (1, 256, 21, 42), (1, 256, 76, 50), (1, 256, 42, 24), (1, 256, 13, 42), (1, 256, 50, 62), (1, 256, 27, 25), (1, 256, 25, 26), (1, 256, 32, 25)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[512.0000001192093, 56, 1024.0000001192093, 56],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1024,), (), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'abs': dict(
        name=["abs"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(403200, 4), (100800, 4), (25200, 4), (6300, 4), (1638, 4), (18, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'permute_1': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 336, 200), (12, 336, 200), (3, 168, 100), (12, 168, 100), (3, 84, 50), (12, 84, 50), (3, 42, 25), (12, 42, 25), (3, 21, 13), (12, 21, 13), (3, 200, 304), (12, 200, 304), (3, 100, 152), (12, 100, 152), (3, 50, 76), (12, 50, 76), (3, 25, 38), (12, 25, 38), (3, 13, 19), (12, 13, 19), (3, 200, 312), (12, 200, 312), (3, 100, 156), (12, 100, 156), (3, 50, 78), (12, 50, 78), (3, 25, 39), (12, 25, 39), (3, 13, 20), (12, 13, 20), (3, 200, 272), (12, 200, 272), (3, 100, 136), (12, 100, 136), (3, 50, 68), (12, 50, 68), (3, 25, 34), (12, 25, 34), (3, 13, 17), (12, 13, 17), (3, 200, 336), (12, 200, 336), (3, 100, 168), (12, 100, 168), (3, 50, 84), (12, 50, 84), (3, 25, 42), (12, 25, 42), (3, 13, 21), (12, 13, 21), (3, 200, 256), (12, 200, 256), (3, 100, 128), (12, 100, 128), (3, 50, 64), (12, 50, 64), (3, 25, 32), (12, 25, 32), (3, 13, 16), (12, 13, 16), (3, 304, 200), (12, 304, 200), (3, 152, 100), (12, 152, 100), (3, 76, 50), (12, 76, 50), (3, 38, 25), (12, 38, 25), (3, 19, 13), (12, 19, 13), (3, 272, 200), (12, 272, 200), (3, 136, 100), (12, 136, 100), (3, 68, 50), (12, 68, 50), (3, 34, 25), (12, 34, 25), (3, 17, 13), (12, 17, 13), (3, 288, 200), (12, 288, 200), (3, 144, 100), (12, 144, 100), (3, 72, 50), (12, 72, 50), (3, 36, 25), (12, 36, 25), (3, 18, 13), (12, 18, 13), (3, 200, 240), (12, 200, 240), (3, 100, 120), (12, 100, 120), (3, 50, 60), (12, 50, 60), (3, 25, 30), (12, 25, 30), (3, 13, 15), (12, 13, 15), (3, 200, 280), (12, 200, 280), (3, 100, 140), (12, 100, 140), (3, 50, 70), (12, 50, 70), (3, 25, 35), (12, 25, 35), (3, 13, 18), (12, 13, 18), (3, 224, 200), (12, 224, 200), (3, 112, 100), (12, 112, 100), (3, 56, 50), (12, 56, 50), (3, 28, 25), (12, 28, 25), (3, 14, 13), (12, 14, 13), (3, 208, 200), (12, 208, 200), (3, 104, 100), (12, 104, 100), (3, 52, 50), (12, 52, 50), (3, 26, 25), (12, 26, 25), (3, 13, 13), (12, 13, 13), (3, 200, 320), (12, 200, 320), (3, 100, 160), (12, 100, 160), (3, 50, 80), (12, 50, 80), (3, 25, 40), (12, 25, 40), (3, 200, 288), (12, 200, 288), (3, 100, 144), (12, 100, 144), (3, 50, 72), (12, 50, 72), (3, 25, 36), (12, 25, 36), (3, 192, 336), (12, 192, 336), (3, 96, 168), (12, 96, 168), (3, 48, 84), (12, 48, 84), (3, 24, 42), (12, 24, 42), (3, 12, 21), (12, 12, 21), (3, 200, 200), (12, 200, 200), (3, 100, 100), (12, 100, 100), (3, 50, 50), (12, 50, 50), (3, 25, 25), (12, 25, 25), (3, 328, 200), (12, 328, 200), (3, 164, 100), (12, 164, 100), (3, 82, 50), (12, 82, 50), (3, 41, 25), (12, 41, 25), (3, 200, 296), (12, 200, 296), (3, 100, 148), (12, 100, 148), (3, 50, 74), (12, 50, 74), (3, 25, 37), (12, 25, 37), (3, 200, 328), (12, 200, 328), (3, 100, 164), (12, 100, 164), (3, 50, 82), (12, 50, 82), (3, 25, 41), (12, 25, 41), (3, 152, 336), (12, 152, 336), (3, 76, 168), (12, 76, 168), (3, 38, 84), (12, 38, 84), (3, 19, 42), (12, 19, 42), (3, 10, 21), (12, 10, 21), (3, 312, 200), (12, 312, 200), (3, 156, 100), (12, 156, 100), (3, 78, 50), (12, 78, 50), (3, 39, 25), (12, 39, 25), (3, 20, 13), (12, 20, 13), (3, 280, 200), (12, 280, 200), (3, 140, 100), (12, 140, 100), (3, 70, 50), (12, 70, 50), (3, 35, 25), (12, 35, 25), (3, 200, 208), (12, 200, 208), (3, 100, 104), (12, 100, 104), (3, 50, 52), (12, 50, 52), (3, 25, 26), (12, 25, 26), (3, 200, 264), (12, 200, 264), (3, 100, 132), (12, 100, 132), (3, 50, 66), (12, 50, 66), (3, 25, 33), (12, 25, 33), (3, 248, 200), (12, 248, 200), (3, 124, 100), (12, 124, 100), (3, 62, 50), (12, 62, 50), (3, 31, 25), (12, 31, 25), (3, 16, 13), (12, 16, 13), (3, 336, 192), (12, 336, 192), (3, 168, 96), (12, 168, 96), (3, 84, 48), (12, 84, 48), (3, 42, 24), (12, 42, 24), (3, 21, 12), (12, 21, 12), (3, 296, 200), (12, 296, 200), (3, 148, 100), (12, 148, 100), (3, 74, 50), (12, 74, 50), (3, 37, 25), (12, 37, 25), (3, 200, 248), (12, 200, 248), (3, 100, 124), (12, 100, 124), (3, 50, 62), (12, 50, 62), (3, 25, 31), (12, 25, 31), (3, 320, 200), (12, 320, 200), (3, 160, 100), (12, 160, 100), (3, 80, 50), (12, 80, 50), (3, 40, 25), (12, 40, 25), (3, 176, 336), (12, 176, 336), (3, 88, 168), (12, 88, 168), (3, 44, 84), (12, 44, 84), (3, 22, 42), (12, 22, 42), (3, 11, 21), (12, 11, 21), (3, 216, 200), (12, 216, 200), (3, 108, 100), (12, 108, 100), (3, 54, 50), (12, 54, 50), (3, 27, 25), (12, 27, 25), (3, 200, 216), (12, 200, 216), (3, 100, 108), (12, 100, 108), (3, 50, 54), (12, 50, 54), (3, 25, 27), (12, 25, 27), (3, 13, 14), (12, 13, 14), (3, 264, 200), (12, 264, 200), (3, 132, 100), (12, 132, 100), (3, 66, 50), (12, 66, 50), (3, 33, 25), (12, 33, 25), (3, 160, 336), (12, 160, 336), (3, 80, 168), (12, 80, 168), (3, 40, 84), (12, 40, 84), (3, 20, 42), (12, 20, 42), (3, 184, 336), (12, 184, 336), (3, 92, 168), (12, 92, 168), (3, 46, 84), (12, 46, 84), (3, 23, 42), (12, 23, 42), (3, 168, 336), (12, 168, 336), (3, 84, 168), (12, 84, 168), (3, 42, 84), (12, 42, 84), (3, 21, 42), (12, 21, 42), (3, 256, 200), (12, 256, 200), (3, 128, 100), (12, 128, 100), (3, 64, 50), (12, 64, 50), (3, 32, 25), (12, 32, 25), (3, 200, 232), (12, 200, 232), (3, 100, 116), (12, 100, 116), (3, 50, 58), (12, 50, 58), (3, 25, 29), (12, 25, 29), (3, 336, 152), (12, 336, 152), (3, 168, 76), (12, 168, 76), (3, 84, 38), (12, 84, 38), (3, 42, 19), (12, 42, 19), (3, 21, 10), (12, 21, 10), (3, 200, 224), (12, 200, 224), (3, 100, 112), (12, 100, 112), (3, 50, 56), (12, 50, 56), (3, 25, 28), (12, 25, 28), (3, 144, 336), (12, 144, 336), (3, 72, 168), (12, 72, 168), (3, 36, 84), (12, 36, 84), (3, 18, 42), (12, 18, 42), (3, 9, 21), (12, 9, 21), (3, 336, 160), (12, 336, 160), (3, 168, 80), (12, 168, 80), (3, 84, 40), (12, 84, 40), (3, 42, 20), (12, 42, 20), (3, 240, 200), (12, 240, 200), (3, 120, 100), (12, 120, 100), (3, 60, 50), (12, 60, 50), (3, 30, 25), (12, 30, 25), (3, 15, 13), (12, 15, 13), (3, 88, 336), (12, 88, 336), (3, 44, 168), (12, 44, 168), (3, 22, 84), (12, 22, 84), (3, 11, 42), (12, 11, 42), (3, 6, 21), (12, 6, 21), (3, 104, 336), (12, 104, 336), (3, 52, 168), (12, 52, 168), (3, 26, 84), (12, 26, 84), (3, 13, 42), (12, 13, 42), (3, 7, 21), (12, 7, 21), (3, 120, 336), (12, 120, 336), (3, 60, 168), (12, 60, 168), (3, 30, 84), (12, 30, 84), (3, 15, 42), (12, 15, 42), (3, 8, 21), (12, 8, 21), (3, 232, 200), (12, 232, 200), (3, 116, 100), (12, 116, 100), (3, 58, 50), (12, 58, 50), (3, 29, 25), (12, 29, 25), (3, 336, 176), (12, 336, 176), (3, 168, 88), (12, 168, 88), (3, 84, 44), (12, 84, 44), (3, 42, 22), (12, 42, 22), (3, 21, 11), (12, 21, 11), (3, 128, 336), (12, 128, 336), (3, 64, 168), (12, 64, 168), (3, 32, 84), (12, 32, 84), (3, 16, 42), (12, 16, 42), (3, 96, 336), (12, 96, 336), (3, 48, 168), (12, 48, 168), (3, 24, 84), (12, 24, 84), (3, 12, 42), (12, 12, 42), (3, 336, 128), (12, 336, 128), (3, 168, 64), (12, 168, 64), (3, 84, 32), (12, 84, 32), (3, 42, 16), (12, 42, 16), (3, 21, 8), (12, 21, 8), (3, 112, 336), (12, 112, 336), (3, 56, 168), (12, 56, 168), (3, 28, 84), (12, 28, 84), (3, 14, 42), (12, 14, 42), (3, 136, 336), (12, 136, 336), (3, 68, 168), (12, 68, 168), (3, 34, 84), (12, 34, 84), (3, 17, 42), (12, 17, 42), (3, 336, 184), (12, 336, 184), (3, 168, 92), (12, 168, 92), (3, 84, 46), (12, 84, 46), (3, 42, 23), (12, 42, 23)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(201600,), (50400,), (12600,), (3150,), (819,), (182400,), (45600,), (11400,), (2850,), (741,), (187200,), (46800,), (11700,), (2925,), (780,), (163200,), (40800,), (10200,), (2550,), (663,), (153600,), (38400,), (9600,), (2400,), (624,), (172800,), (43200,), (10800,), (2700,), (702,), (144000,), (36000,), (9000,), (2250,), (585,), (168000,), (42000,), (10500,), (2625,), (134400,), (33600,), (8400,), (2100,), (546,), (124800,), (31200,), (7800,), (1950,), (507,), (192000,), (48000,), (12000,), (3000,), (193536,), (48384,), (12096,), (3024,), (756,), (120000,), (30000,), (7500,), (1875,), (196800,), (49200,), (12300,), (3075,), (177600,), (44400,), (11100,), (2775,), (153216,), (38304,), (9576,), (2394,), (630,), (158400,), (39600,), (9900,), (2475,), (148800,), (37200,), (9300,), (2325,), (177408,), (44352,), (11088,), (2772,), (693,), (129600,), (32400,), (8100,), (2025,), (161280,), (40320,), (10080,), (2520,), (185472,), (46368,), (11592,), (2898,), (169344,), (42336,), (10584,), (2646,), (139200,), (34800,), (8700,), (2175,), (145152,), (36288,), (9072,), (2268,), (567,), (88704,), (22176,), (5544,), (1386,), (378,), (104832,), (26208,), (6552,), (1638,), (441,), (120960,), (30240,), (7560,), (1890,), (504,), (129024,), (32256,), (8064,), (2016,), (96768,), (24192,), (6048,), (1512,), (112896,), (28224,), (7056,), (1764,), (137088,), (34272,), (8568,), (2142,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sort': dict(
        name=["sort"],
        interface=["torch.Tensor"],
        para=dict(
            descending=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(201600,), (50400,), (12600,), (3150,), (182400,), (45600,), (11400,), (2850,), (187200,), (46800,), (11700,), (2925,), (163200,), (40800,), (10200,), (2550,), (153600,), (38400,), (9600,), (2400,), (172800,), (43200,), (10800,), (2700,), (144000,), (36000,), (9000,), (2250,), (168000,), (42000,), (10500,), (2625,), (134400,), (33600,), (8400,), (2100,), (124800,), (31200,), (7800,), (1950,), (192000,), (48000,), (12000,), (3000,), (193536,), (48384,), (12096,), (3024,), (120000,), (30000,), (7500,), (1875,), (196800,), (49200,), (12300,), (3075,), (177600,), (44400,), (11100,), (2775,), (153216,), (38304,), (9576,), (2394,), (158400,), (39600,), (9900,), (2475,), (148800,), (37200,), (9300,), (2325,), (177408,), (44352,), (11088,), (2772,), (129600,), (32400,), (8100,), (2025,), (161280,), (40320,), (10080,), (2520,), (185472,), (46368,), (11592,), (2898,), (169344,), (42336,), (10584,), (2646,), (139200,), (34800,), (8700,), (2175,), (145152,), (36288,), (9072,), (2268,), (88704,), (22176,), (5544,), (1386,), (104832,), (26208,), (6552,), (1638,), (120960,), (30240,), (7560,), (1890,), (129024,), (32256,), (8064,), (2016,), (96768,), (24192,), (6048,), (1512,), (112896,), (28224,), (7056,), (1764,), (137088,), (34272,), (8568,), (2142,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp_1': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[-4.135166556742356, 0, -4.135166556742356, 0, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356, -4.135166556742356],
            max=[4.135166556742356, 3, 4.135166556742356, 3, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356, 4.135166556742356],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8819, 2), (1024,), (4741, 2), (1000,), (80000, 2), (4780, 2), (4663, 2), (4819, 2), (4624, 2), (4702, 2), (4585, 2), (4546, 2), (4507, 2), (4756, 2), (4630, 2), (4693, 2), (4567, 2), (4378, 2), (4441, 2), (4504, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8819, 2), (4741, 2), (80000, 2), (4780, 2), (4663, 2), (4819, 2), (4624, 2), (4702, 2), (4585, 2), (4546, 2), (4507, 2), (4756, 2), (4630, 2), (4693, 2), (4567, 2), (4378, 2), (4441, 2), (4504, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[-1, 1, 1, 0, 0, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((8819, 2), (8819, 2)), ((3551, 4), (3551, 1)), ((3489, 4), (3489, 1)), ((2, 4), (1000, 4)), ((14, 4), (1000, 4)), ((512, 1), (512, 4)), ((4741, 2), (4741, 2)), ((1950, 4), (1950, 1)), ((1000, 1), (1000, 4)), ((80000, 2), (80000, 2)), ((4780, 2), (4780, 2)), ((1856, 4), (1856, 1)), ((1965, 4), (1965, 1)), ((4663, 2), (4663, 2)), ((1892, 4), (1892, 1)), ((4819, 2), (4819, 2)), ((2048, 4), (2048, 1)), ((4624, 2), (4624, 2)), ((1889, 4), (1889, 1)), ((1919, 4), (1919, 1)), ((1963, 4), (1963, 1)), ((4702, 2), (4702, 2)), ((1865, 4), (1865, 1)), ((1946, 4), (1946, 1)), ((1882, 4), (1882, 1)), ((4585, 2), (4585, 2)), ((1982, 4), (1982, 1)), ((1922, 4), (1922, 1)), ((1902, 4), (1902, 1)), ((1900, 4), (1900, 1)), ((1843, 4), (1843, 1)), ((1872, 4), (1872, 1)), ((1871, 4), (1871, 1)), ((1829, 4), (1829, 1)), ((1888, 4), (1888, 1)), ((1953, 4), (1953, 1)), ((1941, 4), (1941, 1)), ((1868, 4), (1868, 1)), ((4546, 2), (4546, 2)), ((1870, 4), (1870, 1)), ((1934, 4), (1934, 1)), ((4507, 2), (4507, 2)), ((1755, 4), (1755, 1)), ((1980, 4), (1980, 1)), ((1796, 4), (1796, 1)), ((1905, 4), (1905, 1)), ((1887, 4), (1887, 1)), ((1924, 4), (1924, 1)), ((1779, 4), (1779, 1)), ((1918, 4), (1918, 1)), ((2007, 4), (2007, 1)), ((1908, 4), (1908, 1)), ((1813, 4), (1813, 1)), ((1845, 4), (1845, 1)), ((1896, 4), (1896, 1)), ((1926, 4), (1926, 1)), ((1923, 4), (1923, 1)), ((1830, 4), (1830, 1)), ((1831, 4), (1831, 1)), ((4756, 2), (4756, 2)), ((1913, 4), (1913, 1)), ((1839, 4), (1839, 1)), ((1914, 4), (1914, 1)), ((1970, 4), (1970, 1)), ((2016, 4), (2016, 1)), ((1920, 4), (1920, 1)), ((22, 4), (22, 1)), ((1915, 4), (1915, 1)), ((1960, 4), (1960, 1)), ((1904, 4), (1904, 1)), ((1, 4), (1, 1)), ((1817, 4), (1817, 1)), ((2020, 4), (2020, 1)), ((1903, 4), (1903, 1)), ((1952, 4), (1952, 1)), ((1966, 4), (1966, 1)), ((2014, 4), (2014, 1)), ((1937, 4), (1937, 1)), ((1997, 4), (1997, 1)), ((1898, 4), (1898, 1)), ((1983, 4), (1983, 1)), ((1954, 4), (1954, 1)), ((1958, 4), (1958, 1)), ((1972, 4), (1972, 1)), ((1891, 4), (1891, 1)), ((1885, 4), (1885, 1)), ((1962, 4), (1962, 1)), ((1827, 4), (1827, 1)), ((2041, 4), (2041, 1)), ((2, 4), (2, 1)), ((1879, 4), (1879, 1)), ((2011, 4), (2011, 1)), ((1824, 4), (1824, 1)), ((1940, 4), (1940, 1)), ((1916, 4), (1916, 1)), ((1884, 4), (1884, 1)), ((1977, 4), (1977, 1)), ((1875, 4), (1875, 1)), ((1957, 4), (1957, 1)), ((1890, 4), (1890, 1)), ((3, 4), (3, 1)), ((1947, 4), (1947, 1)), ((2082, 4), (2082, 1)), ((4630, 2), (4630, 2)), ((1836, 4), (1836, 1)), ((1841, 4), (1841, 1)), ((1969, 4), (1969, 1)), ((1806, 4), (1806, 1)), ((2017, 4), (2017, 1)), ((1932, 4), (1932, 1)), ((1936, 4), (1936, 1)), ((1854, 4), (1854, 1)), ((1973, 4), (1973, 1)), ((1863, 4), (1863, 1)), ((1861, 4), (1861, 1)), ((1929, 4), (1929, 1)), ((1797, 4), (1797, 1)), ((1907, 4), (1907, 1)), ((1938, 4), (1938, 1)), ((1864, 4), (1864, 1)), ((2054, 4), (2054, 1)), ((1993, 4), (1993, 1)), ((2037, 4), (2037, 1)), ((2024, 4), (2024, 1)), ((1857, 4), (1857, 1)), ((1910, 4), (1910, 1)), ((7, 4), (7, 1)), ((1853, 4), (1853, 1)), ((1808, 4), (1808, 1)), ((1999, 4), (1999, 1)), ((1925, 4), (1925, 1)), ((1765, 4), (1765, 1)), ((1878, 4), (1878, 1)), ((1942, 4), (1942, 1)), ((2022, 4), (2022, 1)), ((1801, 4), (1801, 1)), ((2012, 4), (2012, 1)), ((1984, 4), (1984, 1)), ((1995, 4), (1995, 1)), ((1764, 4), (1764, 1)), ((1851, 4), (1851, 1)), ((1978, 4), (1978, 1)), ((1859, 4), (1859, 1)), ((1809, 4), (1809, 1)), ((1753, 4), (1753, 1)), ((1992, 4), (1992, 1)), ((1886, 4), (1886, 1)), ((1901, 4), (1901, 1)), ((1985, 4), (1985, 1)), ((1768, 4), (1768, 1)), ((1931, 4), (1931, 1)), ((1866, 4), (1866, 1)), ((1944, 4), (1944, 1)), ((1793, 4), (1793, 1)), ((1933, 4), (1933, 1)), ((1852, 4), (1852, 1)), ((1883, 4), (1883, 1)), ((1967, 4), (1967, 1)), ((2004, 4), (2004, 1)), ((1943, 4), (1943, 1)), ((1955, 4), (1955, 1)), ((1987, 4), (1987, 1)), ((1800, 4), (1800, 1)), ((2090, 4), (2090, 1)), ((1935, 4), (1935, 1)), ((2023, 4), (2023, 1)), ((1876, 4), (1876, 1)), ((1874, 4), (1874, 1)), ((2059, 4), (2059, 1)), ((2045, 4), (2045, 1)), ((2002, 4), (2002, 1)), ((2053, 4), (2053, 1)), ((1959, 4), (1959, 1)), ((2015, 4), (2015, 1)), ((2043, 4), (2043, 1)), ((1873, 4), (1873, 1)), ((1790, 4), (1790, 1)), ((1825, 4), (1825, 1)), ((2001, 4), (2001, 1)), ((1899, 4), (1899, 1)), ((1807, 4), (1807, 1)), ((1850, 4), (1850, 1)), ((1998, 4), (1998, 1)), ((1911, 4), (1911, 1)), ((1939, 4), (1939, 1)), ((2010, 4), (2010, 1)), ((1812, 4), (1812, 1)), ((1956, 4), (1956, 1)), ((1741, 4), (1741, 1)), ((1740, 4), (1740, 1)), ((1771, 4), (1771, 1)), ((1773, 4), (1773, 1)), ((1895, 4), (1895, 1)), ((1945, 4), (1945, 1)), ((1756, 4), (1756, 1)), ((1893, 4), (1893, 1)), ((1847, 4), (1847, 1)), ((1986, 4), (1986, 1)), ((1897, 4), (1897, 1)), ((4, 4), (4, 1)), ((1961, 4), (1961, 1)), ((1930, 4), (1930, 1)), ((2040, 4), (2040, 1)), ((4693, 2), (4693, 2)), ((1867, 4), (1867, 1)), ((15, 4), (15, 1)), ((1823, 4), (1823, 1)), ((2003, 4), (2003, 1)), ((1921, 4), (1921, 1)), ((2018, 4), (2018, 1)), ((1814, 4), (1814, 1)), ((5, 4), (5, 1)), ((1928, 4), (1928, 1)), ((10, 4), (10, 1)), ((1858, 4), (1858, 1)), ((1917, 4), (1917, 1)), ((1720, 4), (1720, 1)), ((2030, 4), (2030, 1)), ((1787, 4), (1787, 1)), ((1927, 4), (1927, 1)), ((1833, 4), (1833, 1)), ((2074, 4), (2074, 1)), ((1869, 4), (1869, 1)), ((2000, 4), (2000, 1)), ((1971, 4), (1971, 1)), ((1738, 4), (1738, 1)), ((1848, 4), (1848, 1)), ((1803, 4), (1803, 1)), ((1912, 4), (1912, 1)), ((1788, 4), (1788, 1)), ((2009, 4), (2009, 1)), ((1860, 4), (1860, 1)), ((1821, 4), (1821, 1)), ((1832, 4), (1832, 1)), ((1786, 4), (1786, 1)), ((2046, 4), (2046, 1)), ((2005, 4), (2005, 1)), ((2042, 4), (2042, 1)), ((2084, 4), (2084, 1)), ((1840, 4), (1840, 1)), ((1948, 4), (1948, 1)), ((1988, 4), (1988, 1)), ((1798, 4), (1798, 1)), ((1802, 4), (1802, 1)), ((2025, 4), (2025, 1)), ((2013, 4), (2013, 1)), ((1909, 4), (1909, 1)), ((2050, 4), (2050, 1)), ((1855, 4), (1855, 1)), ((1976, 4), (1976, 1)), ((1838, 4), (1838, 1)), ((1816, 4), (1816, 1)), ((1791, 4), (1791, 1)), ((1979, 4), (1979, 1)), ((1968, 4), (1968, 1)), ((14, 4), (14, 1)), ((12, 4), (12, 1)), ((1862, 4), (1862, 1)), ((1789, 4), (1789, 1)), ((1763, 4), (1763, 1)), ((1991, 4), (1991, 1)), ((2063, 4), (2063, 1)), ((1906, 4), (1906, 1)), ((1842, 4), (1842, 1)), ((1989, 4), (1989, 1)), ((1762, 4), (1762, 1)), ((1794, 4), (1794, 1)), ((1810, 4), (1810, 1)), ((2056, 4), (2056, 1)), ((1690, 4), (1690, 1)), ((1776, 4), (1776, 1)), ((1849, 4), (1849, 1)), ((1819, 4), (1819, 1)), ((1975, 4), (1975, 1)), ((1974, 4), (1974, 1)), ((1877, 4), (1877, 1)), ((1894, 4), (1894, 1)), ((2156, 4), (2156, 1)), ((2103, 4), (2103, 1)), ((4567, 2), (4567, 2)), ((2153, 4), (2153, 1)), ((2035, 4), (2035, 1)), ((1881, 4), (1881, 1)), ((1981, 4), (1981, 1)), ((13, 4), (13, 1)), ((1844, 4), (1844, 1)), ((1951, 4), (1951, 1)), ((1949, 4), (1949, 1)), ((2006, 4), (2006, 1)), ((1716, 4), (1716, 1)), ((1782, 4), (1782, 1)), ((2008, 4), (2008, 1)), ((1783, 4), (1783, 1)), ((1834, 4), (1834, 1)), ((1749, 4), (1749, 1)), ((1727, 4), (1727, 1)), ((1835, 4), (1835, 1)), ((1696, 4), (1696, 1)), ((1964, 4), (1964, 1)), ((1804, 4), (1804, 1)), ((2076, 4), (2076, 1)), ((1799, 4), (1799, 1)), ((2033, 4), (2033, 1)), ((1766, 4), (1766, 1)), ((1822, 4), (1822, 1)), ((1826, 4), (1826, 1)), ((1880, 4), (1880, 1)), ((1772, 4), (1772, 1)), ((1769, 4), (1769, 1)), ((1732, 4), (1732, 1)), ((1722, 4), (1722, 1)), ((1767, 4), (1767, 1)), ((1780, 4), (1780, 1)), ((1781, 4), (1781, 1)), ((2019, 4), (2019, 1)), ((1759, 4), (1759, 1)), ((1792, 4), (1792, 1)), ((1818, 4), (1818, 1)), ((1805, 4), (1805, 1)), ((1846, 4), (1846, 1)), ((11, 4), (11, 1)), ((1685, 4), (1685, 1)), ((2104, 4), (2104, 1)), ((2049, 4), (2049, 1)), ((2031, 4), (2031, 1)), ((1746, 4), (1746, 1)), ((1745, 4), (1745, 1)), ((2055, 4), (2055, 1)), ((2083, 4), (2083, 1)), ((1723, 4), (1723, 1)), ((1712, 4), (1712, 1)), ((1837, 4), (1837, 1)), ((2091, 4), (2091, 1)), ((2094, 4), (2094, 1)), ((4378, 2), (4378, 2)), ((1650, 4), (1650, 1)), ((1815, 4), (1815, 1)), ((1990, 4), (1990, 1)), ((2093, 4), (2093, 1)), ((1661, 4), (1661, 1)), ((2028, 4), (2028, 1)), ((2039, 4), (2039, 1)), ((8, 4), (8, 1)), ((1733, 4), (1733, 1)), ((1689, 4), (1689, 1)), ((4441, 2), (4441, 2)), ((1694, 4), (1694, 1)), ((2073, 4), (2073, 1)), ((1994, 4), (1994, 1)), ((2032, 4), (2032, 1)), ((1785, 4), (1785, 1)), ((2077, 4), (2077, 1)), ((1715, 4), (1715, 1)), ((1828, 4), (1828, 1)), ((4504, 2), (4504, 2)), ((1695, 4), (1695, 1)), ((57, 4), (57, 1)), ((2119, 4), (2119, 1)), ((1774, 4), (1774, 1)), ((2034, 4), (2034, 1)), ((2036, 4), (2036, 1)), ((1811, 4), (1811, 1)), ((1820, 4), (1820, 1)), ((1739, 4), (1739, 1)), ((2044, 4), (2044, 1)), ((2087, 4), (2087, 1)), ((24, 4), (24, 1)), ((2021, 4), (2021, 1)), ((6, 4), (6, 1)), ((1725, 4), (1725, 1)), ((1750, 4), (1750, 1)), ((2064, 4), (2064, 1)), ((2026, 4), (2026, 1)), ((2027, 4), (2027, 1)), ((17, 4), (17, 1)), ((1775, 4), (1775, 1)), ((1751, 4), (1751, 1)), ((1744, 4), (1744, 1)), ((1761, 4), (1761, 1)), ((1735, 4), (1735, 1)), ((1795, 4), (1795, 1)), ((2057, 4), (2057, 1)), ((1676, 4), (1676, 1)), ((2029, 4), (2029, 1)), ((1742, 4), (1742, 1)), ((1619, 4), (1619, 1)), ((2098, 4), (2098, 1)), ((21, 4), (21, 1)), ((1996, 4), (1996, 1)), ((1731, 4), (1731, 1)), ((1748, 4), (1748, 1)), ((1737, 4), (1737, 1)), ((1649, 4), (1649, 1)), ((1604, 4), (1604, 1)), ((9, 4), (9, 1)), ((2081, 4), (2081, 1)), ((2047, 4), (2047, 1)), ((16, 4), (16, 1)), ((1684, 4), (1684, 1)), ((2051, 4), (2051, 1)), ((2062, 4), (2062, 1)), ((1757, 4), (1757, 1)), ((1754, 4), (1754, 1)), ((1747, 4), (1747, 1)), ((1784, 4), (1784, 1)), ((1711, 4), (1711, 1)), ((1770, 4), (1770, 1)), ((1729, 4), (1729, 1)), ((2038, 4), (2038, 1)), ((1728, 4), (1728, 1)), ((2060, 4), (2060, 1)), ((1710, 4), (1710, 1)), ((1721, 4), (1721, 1)), ((2126, 4), (2126, 1)), ((1760, 4), (1760, 1)), ((2052, 4), (2052, 1)), ((1752, 4), (1752, 1)), ((2069, 4), (2069, 1)), ((1693, 4), (1693, 1)), ((1699, 4), (1699, 1)), ((19, 4), (19, 1)), ((2122, 4), (2122, 1)), ((1675, 4), (1675, 1)), ((1777, 4), (1777, 1)), ((2086, 4), (2086, 1)), ((2143, 4), (2143, 1)), ((1655, 4), (1655, 1)), ((1682, 4), (1682, 1)), ((20, 4), (20, 1)), ((1667, 4), (1667, 1)), ((1639, 4), (1639, 1)), ((2080, 4), (2080, 1)), ((2158, 4), (2158, 1)), ((30, 4), (30, 1)), ((1758, 4), (1758, 1)), ((35, 4), (35, 1)), ((1672, 4), (1672, 1)), ((2138, 4), (2138, 1)), ((2070, 4), (2070, 1)), ((28, 4), (28, 1)), ((2092, 4), (2092, 1)), ((1659, 4), (1659, 1)), ((2108, 4), (2108, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'clamp_2': dict(
        name=["clamp"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            max=[800, 1208, 1313, 1199, 800, 1199, 800, 1224, 800, 1224, 1196, 1196, 1067, 800, 1067, 1320, 800, 1320, 1002, 800, 1002, 1202, 1202, 800, 1140, 1140, 946, 800, 946, 1024, 1024, 1108, 1108, 1205, 1205, 800, 868, 868, 800, 808, 808, 1280, 1280, 1185, 1185, 1333, 773, 1333, 773, 881, 881, 1333, 750, 750, 1283, 1283, 1208, 1208, 1128, 1128, 1164, 1164, 1129, 1129, 1198, 1198, 764, 764, 1193, 1193, 1201, 1201, 1166, 1166, 1064, 1064, 1299, 1299, 1333, 604, 604, 1278, 1278, 1203, 1203, 1313, 1313, 1071, 1071, 1231, 1231, 1156, 1156, 1120, 1120, 1194, 1194, 1065, 1065, 1060, 1060, 809, 809, 1051, 1051, 1069, 1069, 762, 762, 1000, 1000, 1135, 1135, 1267, 1267, 1240, 1240, 943, 943, 979, 979, 1080, 1080, 752, 752, 1174, 1174, 1290, 1290, 1242, 1242, 741, 741, 1293, 1293, 1210, 1210, 970, 970, 996, 996, 1270, 1270, 1303, 1303, 1333, 689, 689, 1072, 1072, 856, 856, 1252, 1252, 1094, 1094, 1246, 1246, 839, 839, 969, 969, 1026, 1026, 748, 748, 1076, 1076, 1145, 1145, 1118, 1118, 610, 610, 798, 798, 1075, 1075, 859, 859, 1062, 1062, 716, 716, 1087, 1087, 1058, 1058, 656, 656, 1225, 1225, 801, 801, 1250, 1250, 1081, 1081, 749, 749, 1180, 1180, 1277, 1277, 797, 797, 1039, 1039, 1143, 1143, 923, 923, 909, 909, 1089, 1089, 990, 990, 869, 869, 598, 598, 1216, 1216, 1109, 1109, 1306, 1306, 1190, 1190, 1169, 1169, 892, 892, 905, 905, 662, 662, 1133, 1133, 1049, 1049, 1177, 1177, 1333, 548, 548, 1325, 1325, 955, 955, 1036, 1036, 698, 698, 667, 667, 931, 931, 1255, 1255, 985, 985, 966, 966, 1032, 1032, 1161, 1161, 658, 658, 1286, 1286, 746, 746, 1261, 1261, 1222, 1222, 883, 883, 877, 877, 862, 862, 1115, 1115, 1243, 1243, 714, 714, 978, 978, 1188, 1188, 983, 983, 1200, 1200, 863, 863, 1073, 1073, 1053, 1053, 1223, 1223, 1008, 1008, 1006, 1006, 1151, 1151, 885, 885, 633, 633, 932, 932, 803, 803, 1050, 1050, 1117, 1117, 1103, 1103, 550, 550, 1182, 1182, 938, 938, 1014, 1014, 1124, 1124, 787, 787, 1274, 1274, 1249, 1249, 1228, 1228, 1130, 1130, 964, 964, 824, 824, 1237, 1237, 1041, 1041, 771, 771, 1172, 1172, 1148, 1148, 1029, 1029, 1016, 1016, 1090, 1090, 1158, 1158, 976, 976, 1092, 1092, 733, 733, 818, 818, 1096, 1096, 1106, 1106, 702, 702, 855, 855, 1138, 1138, 1061, 1061, 1220, 1220, 1070, 1070, 650, 650, 1258, 1258, 1191, 1191, 789, 789, 679, 679, 846, 846, 1187, 1187, 961, 961, 1333, 352, 352, 1045, 1045, 900, 900, 794, 794, 1078, 1078, 842, 842, 981, 981, 916, 916, 1101, 1101, 1333, 394, 394, 841, 841, 690, 690, 617, 617, 1163, 1163, 1333, 451, 451, 727, 727, 627, 627, 899, 899, 602, 602, 1309, 1309, 1213, 1213, 1105, 1105, 813, 813, 948, 948, 766, 766, 758, 758, 1219, 1219, 1113, 1113, 977, 977, 1125, 1125, 1042, 1042, 1294, 1294, 1020, 1020, 1044, 1044, 971, 971, 777, 777, 874, 874, 852, 852, 1251, 1251, 631, 631, 691, 691, 913, 913, 1154, 1154, 786, 786, 1330, 1330, 950, 950, 1082, 1082, 1043, 1043, 1056, 1056, 1047, 1047, 848, 848, 637, 637, 929, 929, 820, 820, 1153, 1153, 935, 935, 1227, 1227, 685, 685, 342, 342, 880, 880, 754, 754, 952, 952, 810, 810, 1114, 1114, 696, 696, 918, 918, 623, 623, 605, 605, 496, 496, 1034, 1034, 654, 654, 901, 901, 1323, 1323, 894, 894, 331, 331, 1022, 1022, 664, 664, 871, 871, 988, 988, 1003, 1003, 1028, 1028, 1099, 1099, 775, 775, 1296, 1296, 731, 731, 644, 644, 933, 933, 1282, 1282, 585, 585, 879, 879, 804, 804, 1183, 1183, 784, 784, 806, 806, 377, 377, 1316, 1316, 1206, 1206, 1234, 1234, 926, 926, 1012, 1012, 737, 737, 998, 998, 660, 660, 1010, 1010, 756, 756, 994, 994, 924, 924, 853, 853, 512, 512, 873, 873, 796, 796, 823, 823, 980, 980, 802, 802, 597, 597, 1066, 1066, 1085, 1085, 987, 987, 1015, 1015, 1212, 1212, 1005, 1005, 652, 652, 769, 769, 887, 887, 886, 886, 897, 897, 968, 968, 941, 941, 404, 404, 739, 739, 1018, 1018, 362, 362, 506, 506, 446, 446, 875, 875, 1055, 1055, 849, 849, 612, 612, 1295, 1295, 725, 725, 624, 624, 962, 962, 477, 477, 1111, 1111, 704, 704, 972, 972, 934, 934, 1173, 1173, 717, 717, 821, 821, 816, 816, 1093, 1093, 648, 648, 673, 673, 555, 555, 908, 908, 444, 444, 921, 921, 992, 992, 1302, 1302, 1004, 1004, 889, 889, 1238, 1238, 1254, 1254, 936, 936, 872, 872, 606, 606, 1127, 1127, 845, 845, 527, 527, 1146, 1146, 736, 736, 781, 781],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8819, 2), (8819, 2), (8819, 2), (4741, 2), (4741, 2), (80000, 2), (80000, 2), (4780, 2), (4780, 2), (80000, 2), (4741, 2), (80000, 2), (4663, 2), (4663, 2), (80000, 2), (4819, 2), (4819, 2), (80000, 2), (4624, 2), (4624, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (4702, 2), (80000, 2), (4585, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4741, 2), (80000, 2), (4546, 2), (4546, 2), (80000, 2), (4507, 2), (4507, 2), (80000, 2), (4780, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (4819, 2), (80000, 2), (80000, 2), (4546, 2), (80000, 2), (4756, 2), (4756, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4741, 2), (80000, 2), (4756, 2), (80000, 2), (4741, 2), (80000, 2), (4741, 2), (80000, 2), (4741, 2), (80000, 2), (4663, 2), (80000, 2), (4819, 2), (80000, 2), (4630, 2), (4630, 2), (80000, 2), (4780, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (80000, 2), (4663, 2), (80000, 2), (4780, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4741, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4507, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4756, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4780, 2), (80000, 2), (4780, 2), (80000, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4663, 2), (80000, 2), (4756, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (80000, 2), (4780, 2), (80000, 2), (4756, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4624, 2), (80000, 2), (4624, 2), (80000, 2), (4780, 2), (80000, 2), (4819, 2), (80000, 2), (4693, 2), (4693, 2), (80000, 2), (4663, 2), (80000, 2), (4546, 2), (80000, 2), (4780, 2), (80000, 2), (4702, 2), (80000, 2), (4780, 2), (80000, 2), (4546, 2), (80000, 2), (4624, 2), (80000, 2), (4663, 2), (80000, 2), (4756, 2), (80000, 2), (4663, 2), (80000, 2), (4702, 2), (80000, 2), (4702, 2), (80000, 2), (4630, 2), (80000, 2), (4819, 2), (80000, 2), (4663, 2), (80000, 2), (4546, 2), (80000, 2), (4663, 2), (80000, 2), (4756, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4693, 2), (80000, 2), (4780, 2), (80000, 2), (4507, 2), (80000, 2), (4780, 2), (80000, 2), (4663, 2), (80000, 2), (4756, 2), (80000, 2), (4741, 2), (80000, 2), (4780, 2), (80000, 2), (4819, 2), (80000, 2), (4663, 2), (80000, 2), (4702, 2), (80000, 2), (4585, 2), (80000, 2), (4585, 2), (80000, 2), (4702, 2), (80000, 2), (4624, 2), (80000, 2), (4546, 2), (80000, 2), (4630, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4741, 2), (80000, 2), (4546, 2), (80000, 2), (4585, 2), (80000, 2), (4693, 2), (80000, 2), (4702, 2), (80000, 2), (4663, 2), (80000, 2), (4741, 2), (80000, 2), (4567, 2), (4567, 2), (80000, 2), (4819, 2), (80000, 2), (4585, 2), (80000, 2), (4663, 2), (80000, 2), (4693, 2), (80000, 2), (4693, 2), (80000, 2), (4585, 2), (80000, 2), (4780, 2), (80000, 2), (4624, 2), (80000, 2), (4624, 2), (80000, 2), (4663, 2), (80000, 2), (4741, 2), (80000, 2), (4693, 2), (80000, 2), (4819, 2), (80000, 2), (4756, 2), (80000, 2), (4780, 2), (80000, 2), (4780, 2), (80000, 2), (4546, 2), (80000, 2), (4546, 2), (80000, 2), (4546, 2), (80000, 2), (4702, 2), (80000, 2), (4780, 2), (80000, 2), (4756, 2), (80000, 2), (4624, 2), (80000, 2), (4741, 2), (80000, 2), (4624, 2), (80000, 2), (4741, 2), (80000, 2), (4546, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4780, 2), (80000, 2), (4624, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4546, 2), (80000, 2), (4630, 2), (80000, 2), (4585, 2), (80000, 2), (4507, 2), (80000, 2), (4663, 2), (80000, 2), (4702, 2), (80000, 2), (4702, 2), (80000, 2), (4567, 2), (80000, 2), (4741, 2), (80000, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4819, 2), (80000, 2), (4780, 2), (80000, 2), (4780, 2), (80000, 2), (4780, 2), (80000, 2), (4702, 2), (80000, 2), (4624, 2), (80000, 2), (4507, 2), (80000, 2), (4780, 2), (80000, 2), (4663, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4663, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4741, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4756, 2), (80000, 2), (4507, 2), (80000, 2), (4702, 2), (80000, 2), (4702, 2), (80000, 2), (4693, 2), (80000, 2), (4546, 2), (80000, 2), (4702, 2), (80000, 2), (4663, 2), (80000, 2), (4780, 2), (80000, 2), (4663, 2), (80000, 2), (4693, 2), (80000, 2), (4780, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (80000, 2), (4693, 2), (80000, 2), (4546, 2), (80000, 2), (4741, 2), (80000, 2), (4624, 2), (80000, 2), (4378, 2), (4378, 2), (80000, 2), (4663, 2), (80000, 2), (4585, 2), (80000, 2), (4819, 2), (80000, 2), (4663, 2), (80000, 2), (4546, 2), (80000, 2), (4624, 2), (80000, 2), (4585, 2), (80000, 2), (4702, 2), (80000, 2), (4441, 2), (4441, 2), (80000, 2), (4546, 2), (80000, 2), (4693, 2), (80000, 2), (4630, 2), (80000, 2), (4741, 2), (80000, 2), (4504, 2), (4504, 2), (80000, 2), (4756, 2), (80000, 2), (4630, 2), (80000, 2), (4585, 2), (80000, 2), (4630, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4702, 2), (80000, 2), (4507, 2), (80000, 2), (4585, 2), (80000, 2), (4756, 2), (80000, 2), (4756, 2), (80000, 2), (4780, 2), (80000, 2), (4702, 2), (80000, 2), (4624, 2), (80000, 2), (4702, 2), (80000, 2), (4663, 2), (80000, 2), (4819, 2), (80000, 2), (4624, 2), (80000, 2), (4663, 2), (80000, 2), (4624, 2), (80000, 2), (4819, 2), (80000, 2), (4546, 2), (80000, 2), (4546, 2), (80000, 2), (4780, 2), (80000, 2), (4630, 2), (80000, 2), (4693, 2), (80000, 2), (4585, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (80000, 2), (4819, 2), (80000, 2), (4585, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4546, 2), (80000, 2), (4630, 2), (80000, 2), (4585, 2), (80000, 2), (4507, 2), (80000, 2), (4741, 2), (80000, 2), (4585, 2), (80000, 2), (4780, 2), (80000, 2), (4693, 2), (80000, 2), (4378, 2), (80000, 2), (4546, 2), (80000, 2), (4756, 2), (80000, 2), (4585, 2), (80000, 2), (4507, 2), (80000, 2), (4702, 2), (80000, 2), (4693, 2), (80000, 2), (4585, 2), (80000, 2), (4630, 2), (80000, 2), (4630, 2), (80000, 2), (4504, 2), (80000, 2), (4663, 2), (80000, 2), (4693, 2), (80000, 2), (4585, 2), (80000, 2), (4819, 2), (80000, 2), (4546, 2), (80000, 2), (4378, 2), (80000, 2), (4624, 2), (80000, 2), (4693, 2), (80000, 2), (4546, 2), (80000, 2), (4624, 2), (80000, 2), (4624, 2), (80000, 2), (4663, 2), (80000, 2), (4702, 2), (80000, 2), (4819, 2), (80000, 2), (4819, 2), (80000, 2), (4756, 2), (80000, 2), (4693, 2), (80000, 2), (4585, 2), (80000, 2), (4819, 2), (80000, 2), (4630, 2), (80000, 2), (4546, 2), (80000, 2), (4507, 2), (80000, 2), (4741, 2), (80000, 2), (4819, 2), (80000, 2), (4507, 2), (80000, 2), (4378, 2), (80000, 2), (4819, 2), (80000, 2), (4741, 2), (80000, 2), (4780, 2), (80000, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4756, 2), (80000, 2), (4624, 2), (80000, 2), (4693, 2), (80000, 2), (4624, 2), (80000, 2), (4756, 2), (80000, 2), (4624, 2), (80000, 2), (4585, 2), (80000, 2), (4546, 2), (80000, 2), (4504, 2), (80000, 2), (4546, 2), (80000, 2), (4819, 2), (80000, 2), (4507, 2), (80000, 2), (4624, 2), (80000, 2), (4507, 2), (80000, 2), (4630, 2), (80000, 2), (4663, 2), (80000, 2), (4663, 2), (80000, 2), (4624, 2), (80000, 2), (4624, 2), (80000, 2), (4741, 2), (80000, 2), (4624, 2), (80000, 2), (4693, 2), (80000, 2), (4819, 2), (80000, 2), (4546, 2), (80000, 2), (4546, 2), (80000, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4585, 2), (80000, 2), (4441, 2), (80000, 2), (4756, 2), (80000, 2), (4624, 2), (80000, 2), (4378, 2), (80000, 2), (4504, 2), (80000, 2), (4441, 2), (80000, 2), (4546, 2), (80000, 2), (4663, 2), (80000, 2), (4546, 2), (80000, 2), (4630, 2), (80000, 2), (4819, 2), (80000, 2), (4756, 2), (80000, 2), (4630, 2), (80000, 2), (4624, 2), (80000, 2), (4504, 2), (80000, 2), (4702, 2), (80000, 2), (4693, 2), (80000, 2), (4624, 2), (80000, 2), (4585, 2), (80000, 2), (4741, 2), (80000, 2), (4756, 2), (80000, 2), (4507, 2), (80000, 2), (4507, 2), (80000, 2), (4702, 2), (80000, 2), (4693, 2), (80000, 2), (4693, 2), (80000, 2), (4567, 2), (80000, 2), (4585, 2), (80000, 2), (4441, 2), (80000, 2), (4585, 2), (80000, 2), (4624, 2), (80000, 2), (4819, 2), (80000, 2), (4624, 2), (80000, 2), (4546, 2), (80000, 2), (4780, 2), (80000, 2), (4780, 2), (80000, 2), (4585, 2), (80000, 2), (4546, 2), (80000, 2), (4630, 2), (80000, 2), (4702, 2), (80000, 2), (4546, 2), (80000, 2), (4567, 2), (80000, 2), (4702, 2), (80000, 2), (4756, 2), (80000, 2), (4819, 2), (80000, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((2000,), (2000,), (2000,), (2000,), (819,)), ((1000,), (1000,), (1000,), (1000,), (741,)), ((1000,), (1000,), (1000,), (1000,), (780,)), ((1000,), (1000,), (1000,), (1000,), (663,)), ((1000,), (1000,), (1000,), (1000,), (819,)), ((1000,), (1000,), (1000,), (1000,), (624,)), ((1000,), (1000,), (1000,), (1000,), (702,)), ((1000,), (1000,), (1000,), (1000,), (585,)), ((1000,), (1000,), (1000,), (1000,), (546,)), ((1000,), (1000,), (1000,), (1000,), (507,)), ((1000,), (1000,), (1000,), (1000,), (756,)), ((1000,), (1000,), (1000,), (1000,), (630,)), ((1000,), (1000,), (1000,), (1000,), (693,)), ((1000,), (1000,), (1000,), (1000,), (567,)), ((1000,), (1000,), (1000,), (1000,), (378,)), ((1000,), (1000,), (1000,), (1000,), (441,)), ((1000,), (1000,), (1000,), (1000,), (504,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8819,), (1024,), (4741,), (80000,), (4780,), (4663,), (4819,), (4624,), (4702,), (4585,), (4546,), (4507,), (4756,), (4630,), (4693,), (4567,), (4378,), (4441,), (4504,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'all': dict(
        name=["all"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8819,), (4741,), (4780,), (4663,), (4819,), (4624,), (4702,), (4585,), (4546,), (4507,), (4756,), (4630,), (4693,), (4567,), (4378,), (4441,), (4504,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'max_1': dict(
        name=["max"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8622, 4), (8819, 4), (4741, 4), (4780, 4), (4663, 4), (4819, 4), (4624, 4), (4702, 4), (4585, 4), (4546, 4), (4507, 4), (4756, 4), (78, 4), (3, 4), (1, 4), (2, 4), (4, 4), (4630, 4), (10, 4), (7, 4), (4693, 4), (40, 4), (13, 4), (22, 4), (4778, 4), (5, 4), (4656, 4), (36, 4), (34, 4), (27, 4), (6, 4), (4567, 4), (30, 4), (11, 4), (28, 4), (35, 4), (4662, 4), (31, 4), (21, 4), (18, 4), (4651, 4), (4740, 4), (8, 4), (4378, 4), (4441, 4), (14, 4), (4504, 4), (127, 4), (17, 4), (4779, 4), (69, 4), (15, 4), (4732, 4), (12, 4), (41, 4), (55, 4), (9, 4), (24, 4), (16, 4), (19, 4), (26, 4), (23, 4), (32, 4), (44, 4), (4733, 4), (4610, 4), (25, 4), (57, 4), (38, 4), (76, 4), (93, 4), (4659, 4), (20, 4), (39, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_4': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((3551, 4), (3551, 1)), ((3489, 4), (3489, 1)), ((512, 5), (512, 5)), ((512,), (512,)), ((512, 4), (512, 4)), ((1950, 4), (1950, 1)), ((0, 4), (0, 1)), ((1856, 4), (1856, 1)), ((1965, 4), (1965, 1)), ((1892, 4), (1892, 1)), ((2048, 4), (2048, 1)), ((1889, 4), (1889, 1)), ((1919, 4), (1919, 1)), ((1963, 4), (1963, 1)), ((1865, 4), (1865, 1)), ((1946, 4), (1946, 1)), ((1882, 4), (1882, 1)), ((1982, 4), (1982, 1)), ((1922, 4), (1922, 1)), ((1902, 4), (1902, 1)), ((1900, 4), (1900, 1)), ((1843, 4), (1843, 1)), ((1872, 4), (1872, 1)), ((1871, 4), (1871, 1)), ((1829, 4), (1829, 1)), ((1888, 4), (1888, 1)), ((1953, 4), (1953, 1)), ((1941, 4), (1941, 1)), ((1868, 4), (1868, 1)), ((1870, 4), (1870, 1)), ((1934, 4), (1934, 1)), ((1755, 4), (1755, 1)), ((1980, 4), (1980, 1)), ((1796, 4), (1796, 1)), ((1905, 4), (1905, 1)), ((1887, 4), (1887, 1)), ((1924, 4), (1924, 1)), ((1779, 4), (1779, 1)), ((1918, 4), (1918, 1)), ((2007, 4), (2007, 1)), ((1908, 4), (1908, 1)), ((1813, 4), (1813, 1)), ((1845, 4), (1845, 1)), ((1896, 4), (1896, 1)), ((1926, 4), (1926, 1)), ((1923, 4), (1923, 1)), ((1830, 4), (1830, 1)), ((1831, 4), (1831, 1)), ((1913, 4), (1913, 1)), ((1839, 4), (1839, 1)), ((1914, 4), (1914, 1)), ((1970, 4), (1970, 1)), ((2016, 4), (2016, 1)), ((1920, 4), (1920, 1)), ((22, 4), (22, 1)), ((1915, 4), (1915, 1)), ((1960, 4), (1960, 1)), ((1904, 4), (1904, 1)), ((1, 4), (1, 1)), ((1817, 4), (1817, 1)), ((2020, 4), (2020, 1)), ((1903, 4), (1903, 1)), ((1952, 4), (1952, 1)), ((1966, 4), (1966, 1)), ((2014, 4), (2014, 1)), ((1937, 4), (1937, 1)), ((1997, 4), (1997, 1)), ((1898, 4), (1898, 1)), ((1983, 4), (1983, 1)), ((1954, 4), (1954, 1)), ((1958, 4), (1958, 1)), ((1972, 4), (1972, 1)), ((1891, 4), (1891, 1)), ((1885, 4), (1885, 1)), ((1962, 4), (1962, 1)), ((1827, 4), (1827, 1)), ((2041, 4), (2041, 1)), ((2, 4), (2, 1)), ((1879, 4), (1879, 1)), ((2011, 4), (2011, 1)), ((1824, 4), (1824, 1)), ((1940, 4), (1940, 1)), ((1916, 4), (1916, 1)), ((1884, 4), (1884, 1)), ((1977, 4), (1977, 1)), ((1875, 4), (1875, 1)), ((1957, 4), (1957, 1)), ((1890, 4), (1890, 1)), ((3, 4), (3, 1)), ((1947, 4), (1947, 1)), ((2082, 4), (2082, 1)), ((1836, 4), (1836, 1)), ((1841, 4), (1841, 1)), ((1969, 4), (1969, 1)), ((1806, 4), (1806, 1)), ((2017, 4), (2017, 1)), ((1932, 4), (1932, 1)), ((1936, 4), (1936, 1)), ((1854, 4), (1854, 1)), ((1973, 4), (1973, 1)), ((1863, 4), (1863, 1)), ((1861, 4), (1861, 1)), ((1929, 4), (1929, 1)), ((1797, 4), (1797, 1)), ((1907, 4), (1907, 1)), ((1938, 4), (1938, 1)), ((1864, 4), (1864, 1)), ((2054, 4), (2054, 1)), ((1993, 4), (1993, 1)), ((2037, 4), (2037, 1)), ((2024, 4), (2024, 1)), ((1857, 4), (1857, 1)), ((1910, 4), (1910, 1)), ((7, 4), (7, 1)), ((1853, 4), (1853, 1)), ((1808, 4), (1808, 1)), ((1999, 4), (1999, 1)), ((1925, 4), (1925, 1)), ((1765, 4), (1765, 1)), ((1878, 4), (1878, 1)), ((1942, 4), (1942, 1)), ((2022, 4), (2022, 1)), ((1801, 4), (1801, 1)), ((2012, 4), (2012, 1)), ((1984, 4), (1984, 1)), ((1995, 4), (1995, 1)), ((1764, 4), (1764, 1)), ((1851, 4), (1851, 1)), ((1978, 4), (1978, 1)), ((1859, 4), (1859, 1)), ((1809, 4), (1809, 1)), ((1753, 4), (1753, 1)), ((1992, 4), (1992, 1)), ((1886, 4), (1886, 1)), ((1901, 4), (1901, 1)), ((1985, 4), (1985, 1)), ((1768, 4), (1768, 1)), ((1931, 4), (1931, 1)), ((1866, 4), (1866, 1)), ((1944, 4), (1944, 1)), ((1793, 4), (1793, 1)), ((1933, 4), (1933, 1)), ((1852, 4), (1852, 1)), ((1883, 4), (1883, 1)), ((1967, 4), (1967, 1)), ((2004, 4), (2004, 1)), ((1943, 4), (1943, 1)), ((1955, 4), (1955, 1)), ((1987, 4), (1987, 1)), ((1800, 4), (1800, 1)), ((2090, 4), (2090, 1)), ((1935, 4), (1935, 1)), ((2023, 4), (2023, 1)), ((1876, 4), (1876, 1)), ((1874, 4), (1874, 1)), ((2059, 4), (2059, 1)), ((2045, 4), (2045, 1)), ((2002, 4), (2002, 1)), ((2053, 4), (2053, 1)), ((1959, 4), (1959, 1)), ((2015, 4), (2015, 1)), ((2043, 4), (2043, 1)), ((1873, 4), (1873, 1)), ((1790, 4), (1790, 1)), ((1825, 4), (1825, 1)), ((2001, 4), (2001, 1)), ((1899, 4), (1899, 1)), ((1807, 4), (1807, 1)), ((1850, 4), (1850, 1)), ((1998, 4), (1998, 1)), ((1911, 4), (1911, 1)), ((1939, 4), (1939, 1)), ((2010, 4), (2010, 1)), ((1812, 4), (1812, 1)), ((1956, 4), (1956, 1)), ((1741, 4), (1741, 1)), ((1740, 4), (1740, 1)), ((1771, 4), (1771, 1)), ((1773, 4), (1773, 1)), ((1895, 4), (1895, 1)), ((1945, 4), (1945, 1)), ((1756, 4), (1756, 1)), ((1893, 4), (1893, 1)), ((1847, 4), (1847, 1)), ((1986, 4), (1986, 1)), ((1897, 4), (1897, 1)), ((4, 4), (4, 1)), ((1961, 4), (1961, 1)), ((1930, 4), (1930, 1)), ((2040, 4), (2040, 1)), ((1867, 4), (1867, 1)), ((15, 4), (15, 1)), ((1823, 4), (1823, 1)), ((2003, 4), (2003, 1)), ((1921, 4), (1921, 1)), ((2018, 4), (2018, 1)), ((1814, 4), (1814, 1)), ((5, 4), (5, 1)), ((1928, 4), (1928, 1)), ((10, 4), (10, 1)), ((1858, 4), (1858, 1)), ((1917, 4), (1917, 1)), ((1720, 4), (1720, 1)), ((2030, 4), (2030, 1)), ((1787, 4), (1787, 1)), ((1927, 4), (1927, 1)), ((1833, 4), (1833, 1)), ((2074, 4), (2074, 1)), ((1869, 4), (1869, 1)), ((2000, 4), (2000, 1)), ((1971, 4), (1971, 1)), ((1738, 4), (1738, 1)), ((1848, 4), (1848, 1)), ((1803, 4), (1803, 1)), ((1912, 4), (1912, 1)), ((1788, 4), (1788, 1)), ((2009, 4), (2009, 1)), ((1860, 4), (1860, 1)), ((1821, 4), (1821, 1)), ((1832, 4), (1832, 1)), ((1786, 4), (1786, 1)), ((2046, 4), (2046, 1)), ((2005, 4), (2005, 1)), ((2042, 4), (2042, 1)), ((2084, 4), (2084, 1)), ((1840, 4), (1840, 1)), ((1948, 4), (1948, 1)), ((1988, 4), (1988, 1)), ((1798, 4), (1798, 1)), ((1802, 4), (1802, 1)), ((2025, 4), (2025, 1)), ((2013, 4), (2013, 1)), ((1909, 4), (1909, 1)), ((2050, 4), (2050, 1)), ((1855, 4), (1855, 1)), ((1976, 4), (1976, 1)), ((1838, 4), (1838, 1)), ((1816, 4), (1816, 1)), ((1791, 4), (1791, 1)), ((1979, 4), (1979, 1)), ((1968, 4), (1968, 1)), ((14, 4), (14, 1)), ((12, 4), (12, 1)), ((1862, 4), (1862, 1)), ((1789, 4), (1789, 1)), ((1763, 4), (1763, 1)), ((1991, 4), (1991, 1)), ((2063, 4), (2063, 1)), ((1906, 4), (1906, 1)), ((1842, 4), (1842, 1)), ((1989, 4), (1989, 1)), ((1762, 4), (1762, 1)), ((1794, 4), (1794, 1)), ((1810, 4), (1810, 1)), ((2056, 4), (2056, 1)), ((1690, 4), (1690, 1)), ((1776, 4), (1776, 1)), ((1849, 4), (1849, 1)), ((1819, 4), (1819, 1)), ((1975, 4), (1975, 1)), ((1974, 4), (1974, 1)), ((1877, 4), (1877, 1)), ((1894, 4), (1894, 1)), ((2156, 4), (2156, 1)), ((2103, 4), (2103, 1)), ((2153, 4), (2153, 1)), ((2035, 4), (2035, 1)), ((1881, 4), (1881, 1)), ((1981, 4), (1981, 1)), ((13, 4), (13, 1)), ((1844, 4), (1844, 1)), ((1951, 4), (1951, 1)), ((1949, 4), (1949, 1)), ((2006, 4), (2006, 1)), ((1716, 4), (1716, 1)), ((1782, 4), (1782, 1)), ((2008, 4), (2008, 1)), ((1783, 4), (1783, 1)), ((1834, 4), (1834, 1)), ((1749, 4), (1749, 1)), ((1727, 4), (1727, 1)), ((1835, 4), (1835, 1)), ((1696, 4), (1696, 1)), ((1964, 4), (1964, 1)), ((1804, 4), (1804, 1)), ((2076, 4), (2076, 1)), ((1799, 4), (1799, 1)), ((2033, 4), (2033, 1)), ((1766, 4), (1766, 1)), ((1822, 4), (1822, 1)), ((1826, 4), (1826, 1)), ((1880, 4), (1880, 1)), ((1772, 4), (1772, 1)), ((1769, 4), (1769, 1)), ((1732, 4), (1732, 1)), ((1722, 4), (1722, 1)), ((1767, 4), (1767, 1)), ((1780, 4), (1780, 1)), ((1781, 4), (1781, 1)), ((2019, 4), (2019, 1)), ((1759, 4), (1759, 1)), ((1792, 4), (1792, 1)), ((1818, 4), (1818, 1)), ((1805, 4), (1805, 1)), ((1846, 4), (1846, 1)), ((11, 4), (11, 1)), ((1685, 4), (1685, 1)), ((2104, 4), (2104, 1)), ((2049, 4), (2049, 1)), ((2031, 4), (2031, 1)), ((1746, 4), (1746, 1)), ((1745, 4), (1745, 1)), ((2055, 4), (2055, 1)), ((2083, 4), (2083, 1)), ((1723, 4), (1723, 1)), ((1712, 4), (1712, 1)), ((1837, 4), (1837, 1)), ((2091, 4), (2091, 1)), ((2094, 4), (2094, 1)), ((1650, 4), (1650, 1)), ((1815, 4), (1815, 1)), ((1990, 4), (1990, 1)), ((2093, 4), (2093, 1)), ((1661, 4), (1661, 1)), ((2028, 4), (2028, 1)), ((2039, 4), (2039, 1)), ((8, 4), (8, 1)), ((1733, 4), (1733, 1)), ((1689, 4), (1689, 1)), ((1694, 4), (1694, 1)), ((2073, 4), (2073, 1)), ((1994, 4), (1994, 1)), ((2032, 4), (2032, 1)), ((1785, 4), (1785, 1)), ((2077, 4), (2077, 1)), ((1715, 4), (1715, 1)), ((1828, 4), (1828, 1)), ((1695, 4), (1695, 1)), ((57, 4), (57, 1)), ((2119, 4), (2119, 1)), ((1774, 4), (1774, 1)), ((2034, 4), (2034, 1)), ((2036, 4), (2036, 1)), ((1811, 4), (1811, 1)), ((1820, 4), (1820, 1)), ((1739, 4), (1739, 1)), ((2044, 4), (2044, 1)), ((2087, 4), (2087, 1)), ((24, 4), (24, 1)), ((2021, 4), (2021, 1)), ((6, 4), (6, 1)), ((1725, 4), (1725, 1)), ((1750, 4), (1750, 1)), ((2064, 4), (2064, 1)), ((2026, 4), (2026, 1)), ((2027, 4), (2027, 1)), ((17, 4), (17, 1)), ((1775, 4), (1775, 1)), ((1751, 4), (1751, 1)), ((1744, 4), (1744, 1)), ((1761, 4), (1761, 1)), ((1735, 4), (1735, 1)), ((1795, 4), (1795, 1)), ((2057, 4), (2057, 1)), ((1676, 4), (1676, 1)), ((2029, 4), (2029, 1)), ((1742, 4), (1742, 1)), ((1619, 4), (1619, 1)), ((2098, 4), (2098, 1)), ((21, 4), (21, 1)), ((1996, 4), (1996, 1)), ((1731, 4), (1731, 1)), ((1748, 4), (1748, 1)), ((1737, 4), (1737, 1)), ((1649, 4), (1649, 1)), ((1604, 4), (1604, 1)), ((9, 4), (9, 1)), ((2081, 4), (2081, 1)), ((2047, 4), (2047, 1)), ((16, 4), (16, 1)), ((1684, 4), (1684, 1)), ((2051, 4), (2051, 1)), ((2062, 4), (2062, 1)), ((1757, 4), (1757, 1)), ((1754, 4), (1754, 1)), ((1747, 4), (1747, 1)), ((1784, 4), (1784, 1)), ((1711, 4), (1711, 1)), ((1770, 4), (1770, 1)), ((1729, 4), (1729, 1)), ((2038, 4), (2038, 1)), ((1728, 4), (1728, 1)), ((2060, 4), (2060, 1)), ((1710, 4), (1710, 1)), ((1721, 4), (1721, 1)), ((2126, 4), (2126, 1)), ((1760, 4), (1760, 1)), ((2052, 4), (2052, 1)), ((1752, 4), (1752, 1)), ((2069, 4), (2069, 1)), ((1693, 4), (1693, 1)), ((1699, 4), (1699, 1)), ((19, 4), (19, 1)), ((2122, 4), (2122, 1)), ((1675, 4), (1675, 1)), ((1777, 4), (1777, 1)), ((2086, 4), (2086, 1)), ((2143, 4), (2143, 1)), ((1655, 4), (1655, 1)), ((1682, 4), (1682, 1)), ((20, 4), (20, 1)), ((1667, 4), (1667, 1)), ((1639, 4), (1639, 1)), ((2080, 4), (2080, 1)), ((2158, 4), (2158, 1)), ((30, 4), (30, 1)), ((1758, 4), (1758, 1)), ((35, 4), (35, 1)), ((1672, 4), (1672, 1)), ((2138, 4), (2138, 1)), ((2070, 4), (2070, 1)), ((28, 4), (28, 1)), ((2092, 4), (2092, 1)), ((1659, 4), (1659, 1)), ((2108, 4), (2108, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'arange_1': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[1, 1],
            end=[3, 15],
            dtype=[Dtype.int64, Dtype.int64],
        ),
    ),

    'cat_5': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((2,), (1000,)), ((14,), (1000,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_6': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((2,), (1000,)), ((14,), (1000,)), ((4, 4), (508, 4)), ((14, 4), (498, 4))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_7': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((2,), (1000,)), ((14,), (1000,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sqrt': dict(
        name=["sqrt"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1e-06, 1e-06, 0.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,), (1000,), (1000, 256, 7, 7)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log2': dict(
        name=["log2"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'floor': dict(
        name=["floor"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'linear': dict(
        name=["linear"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1024, 12544), (1024, 1024), (1024, 1024), (1024, 1024), (1000, 12544), (1000, 1024), (1000, 1024), (1000, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(1024, 12544), (1024, 1024), (81, 1024), (320, 1024), (1024, 12544), (1024, 1024), (81, 1024), (320, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(1024,), (1024,), (81,), (320,), (1024,), (1024,), (81,), (320,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_8': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((512,), (512,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sum_1': dict(
        name=["sum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'cross_entropy': dict(
        name=["cross_entropy"],
        para=dict(
            ignore_index=[-100],
            reduction=['none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1024, 81)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(1024,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'topk': dict(
        name=["topk"],
        interface=["torch.Tensor"],
        para=dict(
            k=[1],
            dim=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024, 81)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'transpose': dict(
        name=["transpose"],
        interface=["torch.Tensor"],
        para=dict(
            dim0=[0 for i in range(1)],
            dim1=[1 for i in range(1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024, 1)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand_1': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(1, 1024)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 1024)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_2': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 1024)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1024)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sum_2': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1024,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.09765625],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(32)],
            lr=[2.000000000000002e-05 for i in range(32)],
            momentum=[0.9 for i in range(32)],
            weight_decay=[0.0001 for i in range(32)],
            dampening=[0 for i in range(32)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[-2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05, -2.000000000000002e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256,), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (256, 256, 1, 1), (256, 2048, 1, 1), (3, 256, 1, 1), (3,), (12, 256, 1, 1), (12,), (81, 1024), (81,), (320, 1024), (320,), (1024, 12544), (1024, 1024)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_2': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[5000],
        ),
    ),

    'cat_9': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1000, 5),)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'split': dict(
        name=["split"],
        interface=["torch.Tensor"],
        para=dict(
            split_size_or_sections=[(1000,), (1000,), (1000,)],
            dim=[0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1000, 5), (1000, 81), (1000, 320)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'softmax': dict(
        name=["softmax"],
        saved_args=dict(output=0),
        para=dict(
            dim=[-1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1000, 81)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_3': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[80],
            dtype=[Dtype.int64],
        ),
    ),

    'expand_2': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(1000, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

}
