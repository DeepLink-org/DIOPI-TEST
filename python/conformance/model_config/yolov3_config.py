from ..config import Genfunc
from ..dtype import Dtype

yolov3_config = {
    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[117266],
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 3, 320, 320), (8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 64, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 128, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 256, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 512, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 512, 10, 10), (8, 768, 20, 20), (8, 256, 20, 20), (8, 384, 40, 40), (1, 3, 224, 320), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 64, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 128, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 256, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 512, 7, 10), (1, 768, 14, 20), (1, 256, 14, 20), (1, 384, 28, 40), (1, 3, 256, 320), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 64, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 128, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 256, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 512, 8, 10), (1, 768, 16, 20), (1, 256, 16, 20), (1, 384, 32, 40), (1, 3, 320, 224), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 64, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 128, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 256, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 512, 10, 7), (1, 768, 20, 14), (1, 256, 20, 14), (1, 384, 40, 28), (1, 3, 320, 256), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 64, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 128, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 256, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 512, 10, 8), (1, 768, 20, 16), (1, 256, 20, 16), (1, 384, 40, 32), (1, 3, 288, 320), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 64, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 128, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 256, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 512, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 512, 9, 10), (1, 768, 18, 20), (1, 256, 18, 20), (1, 384, 36, 40), (1, 3, 320, 320), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 64, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 128, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 256, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 512, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 512, 10, 10), (1, 768, 20, 20), (1, 256, 20, 20), (1, 384, 40, 40), (1, 3, 192, 320), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 64, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 128, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 256, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 512, 6, 10), (1, 768, 12, 20), (1, 256, 12, 20), (1, 384, 24, 40), (1, 3, 160, 320), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 64, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 128, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 256, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 512, 5, 10), (1, 768, 10, 20), (1, 256, 10, 20), (1, 384, 20, 40), (1, 3, 320, 288), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 64, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 128, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 256, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 512, 10, 9), (1, 768, 20, 18), (1, 256, 20, 18), (1, 384, 40, 36), (1, 3, 320, 192), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 64, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 128, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 256, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 512, 10, 6), (1, 768, 20, 12), (1, 256, 20, 12), (1, 384, 40, 24), (1, 3, 320, 160), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 64, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 128, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 256, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 512, 10, 5), (1, 768, 20, 10), (1, 256, 20, 10), (1, 384, 40, 20), (1, 3, 96, 320), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 64, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 128, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 256, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 512, 3, 10), (1, 768, 6, 20), (1, 256, 6, 20), (1, 384, 12, 40), (1, 3, 128, 320), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 64, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 128, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 256, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 512, 4, 10), (1, 768, 8, 20), (1, 256, 8, 20), (1, 384, 16, 40), (1, 3, 320, 128), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 64, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 128, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 256, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 512, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 512, 10, 4), (1, 768, 20, 8), (1, 256, 20, 8), (1, 384, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1), (32, 3, 3, 3), (64, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (64, 128, 1, 1), (128, 64, 3, 3), (256, 128, 3, 3), (128, 256, 1, 1), (256, 128, 3, 3), (512, 256, 3, 3), (256, 512, 1, 1), (512, 256, 3, 3), (1024, 512, 3, 3), (512, 1024, 1, 1), (1024, 512, 3, 3), (256, 512, 1, 1), (256, 768, 1, 1), (128, 256, 1, 1), (128, 384, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 512, 10, 10), (8, 1024, 10, 10), (8, 256, 10, 10), (8, 256, 20, 20), (8, 512, 20, 20), (8, 128, 20, 20), (8, 128, 40, 40), (8, 256, 40, 40), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (512,), (1024,), (256,), (256,), (512,), (128,), (128,), (256,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,), (32,), (64,), (32,), (128,), (64,), (256,), (128,), (512,), (256,), (1024,), (512,), (256,), (128,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'leaky_relu': dict(
        name=["leaky_relu"],
        para=dict(
            inplace=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 32, 320, 320), (8, 64, 160, 160), (8, 32, 160, 160), (8, 128, 80, 80), (8, 64, 80, 80), (8, 256, 40, 40), (8, 128, 40, 40), (8, 512, 20, 20), (8, 256, 20, 20), (8, 1024, 10, 10), (8, 512, 10, 10), (8, 256, 10, 10), (8, 128, 20, 20), (1, 32, 224, 320), (1, 64, 112, 160), (1, 32, 112, 160), (1, 128, 56, 80), (1, 64, 56, 80), (1, 256, 28, 40), (1, 128, 28, 40), (1, 512, 14, 20), (1, 256, 14, 20), (1, 1024, 7, 10), (1, 512, 7, 10), (1, 256, 7, 10), (1, 128, 14, 20), (1, 32, 256, 320), (1, 64, 128, 160), (1, 32, 128, 160), (1, 128, 64, 80), (1, 64, 64, 80), (1, 256, 32, 40), (1, 128, 32, 40), (1, 512, 16, 20), (1, 256, 16, 20), (1, 1024, 8, 10), (1, 512, 8, 10), (1, 256, 8, 10), (1, 128, 16, 20), (1, 32, 320, 224), (1, 64, 160, 112), (1, 32, 160, 112), (1, 128, 80, 56), (1, 64, 80, 56), (1, 256, 40, 28), (1, 128, 40, 28), (1, 512, 20, 14), (1, 256, 20, 14), (1, 1024, 10, 7), (1, 512, 10, 7), (1, 256, 10, 7), (1, 128, 20, 14), (1, 32, 320, 256), (1, 64, 160, 128), (1, 32, 160, 128), (1, 128, 80, 64), (1, 64, 80, 64), (1, 256, 40, 32), (1, 128, 40, 32), (1, 512, 20, 16), (1, 256, 20, 16), (1, 1024, 10, 8), (1, 512, 10, 8), (1, 256, 10, 8), (1, 128, 20, 16), (1, 32, 288, 320), (1, 64, 144, 160), (1, 32, 144, 160), (1, 128, 72, 80), (1, 64, 72, 80), (1, 256, 36, 40), (1, 128, 36, 40), (1, 512, 18, 20), (1, 256, 18, 20), (1, 1024, 9, 10), (1, 512, 9, 10), (1, 256, 9, 10), (1, 128, 18, 20), (1, 32, 320, 320), (1, 64, 160, 160), (1, 32, 160, 160), (1, 128, 80, 80), (1, 64, 80, 80), (1, 256, 40, 40), (1, 128, 40, 40), (1, 512, 20, 20), (1, 256, 20, 20), (1, 1024, 10, 10), (1, 512, 10, 10), (1, 256, 10, 10), (1, 128, 20, 20), (1, 32, 192, 320), (1, 64, 96, 160), (1, 32, 96, 160), (1, 128, 48, 80), (1, 64, 48, 80), (1, 256, 24, 40), (1, 128, 24, 40), (1, 512, 12, 20), (1, 256, 12, 20), (1, 1024, 6, 10), (1, 512, 6, 10), (1, 256, 6, 10), (1, 128, 12, 20), (1, 32, 160, 320), (1, 64, 80, 160), (1, 32, 80, 160), (1, 128, 40, 80), (1, 64, 40, 80), (1, 256, 20, 40), (1, 128, 20, 40), (1, 512, 10, 20), (1, 256, 10, 20), (1, 1024, 5, 10), (1, 512, 5, 10), (1, 256, 5, 10), (1, 128, 10, 20), (1, 32, 320, 288), (1, 64, 160, 144), (1, 32, 160, 144), (1, 128, 80, 72), (1, 64, 80, 72), (1, 256, 40, 36), (1, 128, 40, 36), (1, 512, 20, 18), (1, 256, 20, 18), (1, 1024, 10, 9), (1, 512, 10, 9), (1, 256, 10, 9), (1, 128, 20, 18), (1, 32, 320, 192), (1, 64, 160, 96), (1, 32, 160, 96), (1, 128, 80, 48), (1, 64, 80, 48), (1, 256, 40, 24), (1, 128, 40, 24), (1, 512, 20, 12), (1, 256, 20, 12), (1, 1024, 10, 6), (1, 512, 10, 6), (1, 256, 10, 6), (1, 128, 20, 12), (1, 32, 320, 160), (1, 64, 160, 80), (1, 32, 160, 80), (1, 128, 80, 40), (1, 64, 80, 40), (1, 256, 40, 20), (1, 128, 40, 20), (1, 512, 20, 10), (1, 256, 20, 10), (1, 1024, 10, 5), (1, 512, 10, 5), (1, 256, 10, 5), (1, 128, 20, 10), (1, 32, 96, 320), (1, 64, 48, 160), (1, 32, 48, 160), (1, 128, 24, 80), (1, 64, 24, 80), (1, 256, 12, 40), (1, 128, 12, 40), (1, 512, 6, 20), (1, 256, 6, 20), (1, 1024, 3, 10), (1, 512, 3, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 32, 128, 320), (1, 64, 64, 160), (1, 32, 64, 160), (1, 128, 32, 80), (1, 64, 32, 80), (1, 256, 16, 40), (1, 128, 16, 40), (1, 512, 8, 20), (1, 256, 8, 20), (1, 1024, 4, 10), (1, 512, 4, 10), (1, 256, 4, 10), (1, 128, 8, 20), (1, 32, 320, 128), (1, 64, 160, 64), (1, 32, 160, 64), (1, 128, 80, 32), (1, 64, 80, 32), (1, 256, 40, 16), (1, 128, 40, 16), (1, 512, 20, 8), (1, 256, 20, 8), (1, 1024, 10, 4), (1, 512, 10, 4), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 1024, 10, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3,), (1,), (2,), (3, 1), (5,), (1, 1), (4,), (2, 1), (8, 300), (8, 1200), (8, 4800), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (4410, 2), (4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (5040, 2), (5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (5670, 2), (5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (6300, 2), (6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3780, 2), (3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (3150, 2), (3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (1890, 2), (1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (1, 3, 4), (1, 3, 4), (1, 3, 4), (2520, 2), (2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 1024, 10, 10), (100, 1, 4), (400, 1, 4), (1600, 1, 4), (3,), (1,), (2,), (1, 6300), (5,), (1, 6300), (4,), (1, 6300), (8, 300), (8, 1200), (8, 4800), (), (1, 64, 112, 160), (1, 128, 56, 80), (1, 256, 28, 40), (1, 512, 14, 20), (1, 1024, 7, 10), (70, 1, 4), (280, 1, 4), (1120, 1, 4), (4410, 2), (1, 4410, 2), (1, 4410), (1, 64, 128, 160), (1, 128, 64, 80), (1, 256, 32, 40), (1, 512, 16, 20), (1, 1024, 8, 10), (80, 1, 4), (320, 1, 4), (1280, 1, 4), (5040, 2), (1, 5040, 2), (1, 5040), (1, 64, 160, 112), (1, 128, 80, 56), (1, 256, 40, 28), (1, 512, 20, 14), (1, 1024, 10, 7), (1, 64, 160, 128), (1, 128, 80, 64), (1, 256, 40, 32), (1, 512, 20, 16), (1, 1024, 10, 8), (1, 64, 144, 160), (1, 128, 72, 80), (1, 256, 36, 40), (1, 512, 18, 20), (1, 1024, 9, 10), (90, 1, 4), (360, 1, 4), (1440, 1, 4), (5670, 2), (1, 5670, 2), (1, 5670), (1, 64, 160, 160), (1, 128, 80, 80), (1, 256, 40, 40), (1, 512, 20, 20), (1, 1024, 10, 10), (6300, 2), (1, 6300, 2), (1, 6300), (1, 64, 96, 160), (1, 128, 48, 80), (1, 256, 24, 40), (1, 512, 12, 20), (1, 1024, 6, 10), (60, 1, 4), (240, 1, 4), (960, 1, 4), (3780, 2), (1, 3780, 2), (1, 3780), (1, 64, 80, 160), (1, 128, 40, 80), (1, 256, 20, 40), (1, 512, 10, 20), (1, 1024, 5, 10), (50, 1, 4), (200, 1, 4), (800, 1, 4), (3150, 2), (1, 3150, 2), (1, 3150), (1, 64, 160, 144), (1, 128, 80, 72), (1, 256, 40, 36), (1, 512, 20, 18), (1, 1024, 10, 9), (1, 64, 160, 96), (1, 128, 80, 48), (1, 256, 40, 24), (1, 512, 20, 12), (1, 1024, 10, 6), (1, 64, 160, 80), (1, 128, 80, 40), (1, 256, 40, 20), (1, 512, 20, 10), (1, 1024, 10, 5), (1, 64, 48, 160), (1, 128, 24, 80), (1, 256, 12, 40), (1, 512, 6, 20), (1, 1024, 3, 10), (30, 1, 4), (120, 1, 4), (480, 1, 4), (1890, 2), (1, 1890, 2), (1, 1890), (1, 64, 64, 160), (1, 128, 32, 80), (1, 256, 16, 40), (1, 512, 8, 20), (1, 1024, 4, 10), (40, 1, 4), (160, 1, 4), (640, 1, 4), (2520, 2), (1, 2520, 2), (1, 2520), (1, 64, 160, 64), (1, 128, 80, 32), (1, 256, 40, 16), (1, 512, 20, 8), (1, 1024, 10, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (5,), (2,), (1,), (3,), (0,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            scale_factor=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 256, 10, 10), (8, 128, 20, 20), (1, 256, 7, 10), (1, 128, 14, 20), (1, 256, 8, 10), (1, 128, 16, 20), (1, 256, 10, 7), (1, 128, 20, 14), (1, 256, 10, 8), (1, 128, 20, 16), (1, 256, 9, 10), (1, 128, 18, 20), (1, 256, 10, 10), (1, 128, 20, 20), (1, 256, 6, 10), (1, 128, 12, 20), (1, 256, 5, 10), (1, 128, 10, 20), (1, 256, 10, 9), (1, 128, 20, 18), (1, 256, 10, 6), (1, 128, 20, 12), (1, 256, 10, 5), (1, 128, 20, 10), (1, 256, 3, 10), (1, 128, 6, 20), (1, 256, 4, 10), (1, 128, 8, 20), (1, 256, 10, 4), (1, 128, 20, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((8, 256, 20, 20), (8, 512, 20, 20)), ((8, 128, 40, 40), (8, 256, 40, 40)), ((1, 256, 14, 20), (1, 512, 14, 20)), ((1, 128, 28, 40), (1, 256, 28, 40)), ((0, 4), (0, 1)), ((1, 256, 16, 20), (1, 512, 16, 20)), ((1, 128, 32, 40), (1, 256, 32, 40)), ((1, 256, 20, 14), (1, 512, 20, 14)), ((1, 128, 40, 28), (1, 256, 40, 28)), ((1, 256, 20, 16), (1, 512, 20, 16)), ((1, 128, 40, 32), (1, 256, 40, 32)), ((1, 256, 18, 20), (1, 512, 18, 20)), ((1, 128, 36, 40), (1, 256, 36, 40)), ((1, 256, 20, 20), (1, 512, 20, 20)), ((1, 128, 40, 40), (1, 256, 40, 40)), ((1, 256, 12, 20), (1, 512, 12, 20)), ((1, 128, 24, 40), (1, 256, 24, 40)), ((1, 256, 10, 20), (1, 512, 10, 20)), ((1, 128, 20, 40), (1, 256, 20, 40)), ((1, 256, 20, 18), (1, 512, 20, 18)), ((1, 128, 40, 36), (1, 256, 40, 36)), ((1, 256, 20, 12), (1, 512, 20, 12)), ((1, 128, 40, 24), (1, 256, 40, 24)), ((1, 256, 20, 10), (1, 512, 20, 10)), ((1, 128, 40, 20), (1, 256, 40, 20)), ((1, 256, 6, 20), (1, 512, 6, 20)), ((1, 128, 12, 40), (1, 256, 12, 40)), ((1, 256, 8, 20), (1, 512, 8, 20)), ((1, 128, 16, 40), (1, 256, 16, 40)), ((1, 256, 20, 8), (1, 512, 20, 8)), ((1, 128, 40, 16), (1, 256, 40, 16))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(8, 1024, 10, 10), (8, 512, 20, 20), (8, 256, 40, 40), (1, 1024, 7, 10), (1, 512, 14, 20), (1, 256, 28, 40), (1, 1024, 8, 10), (1, 512, 16, 20), (1, 256, 32, 40), (1, 1024, 10, 7), (1, 512, 20, 14), (1, 256, 40, 28), (1, 1024, 10, 8), (1, 512, 20, 16), (1, 256, 40, 32), (1, 1024, 9, 10), (1, 512, 18, 20), (1, 256, 36, 40), (1, 1024, 10, 10), (1, 512, 20, 20), (1, 256, 40, 40), (1, 1024, 6, 10), (1, 512, 12, 20), (1, 256, 24, 40), (1, 1024, 5, 10), (1, 512, 10, 20), (1, 256, 20, 40), (1, 1024, 10, 9), (1, 512, 20, 18), (1, 256, 40, 36), (1, 1024, 10, 6), (1, 512, 20, 12), (1, 256, 40, 24), (1, 1024, 10, 5), (1, 512, 20, 10), (1, 256, 40, 20), (1, 1024, 3, 10), (1, 512, 6, 20), (1, 256, 12, 40), (1, 1024, 4, 10), (1, 512, 8, 20), (1, 256, 16, 40), (1, 1024, 10, 4), (1, 512, 20, 8), (1, 256, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1), (255, 1024, 1, 1), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,), (255,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            end=[10, 20, 40, 7, 14, 28, 8, 16, 32, 9, 18, 36, 6, 12, 24, 5, 3, 4],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 16, 8, 0.5, 0.5, 0.5, 0.5, 0.5, 35.0, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5, 32, 16, 8, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(10,), (20,), (40,), (3,), (1,), (2,), (5,), (4,), (), (7,), (14,), (28,), (4410, 2), (8,), (16,), (32,), (5040, 2), (9,), (18,), (36,), (5670, 2), (6300, 2), (6,), (12,), (24,), (3780, 2), (5,), (10,), (20,), (3150, 2), (3,), (6,), (12,), (1890, 2), (4,), (8,), (16,), (2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((100,), (100,), (100,), (100,)), ((400,), (400,), (400,), (400,)), ((1600,), (1600,), (1600,), (1600,)), ((5,), (5,), (5,), (5,)), ((2,), (2,), (2,), (2,)), ((1,), (1,), (1,), (1,)), ((3,), (3,), (3,), (3,)), ((4,), (4,), (4,), (4,)), ((70,), (70,), (70,), (70,)), ((280,), (280,), (280,), (280,)), ((1120,), (1120,), (1120,), (1120,)), ((1, 4410), (1, 4410), (1, 4410), (1, 4410)), ((80,), (80,), (80,), (80,)), ((320,), (320,), (320,), (320,)), ((1280,), (1280,), (1280,), (1280,)), ((1, 5040), (1, 5040), (1, 5040), (1, 5040)), ((90,), (90,), (90,), (90,)), ((360,), (360,), (360,), (360,)), ((1440,), (1440,), (1440,), (1440,)), ((1, 5670), (1, 5670), (1, 5670), (1, 5670)), ((1, 6300), (1, 6300), (1, 6300), (1, 6300)), ((60,), (60,), (60,), (60,)), ((240,), (240,), (240,), (240,)), ((960,), (960,), (960,), (960,)), ((1, 3780), (1, 3780), (1, 3780), (1, 3780)), ((50,), (50,), (50,), (50,)), ((200,), (200,), (200,), (200,)), ((800,), (800,), (800,), (800,)), ((1, 3150), (1, 3150), (1, 3150), (1, 3150)), ((30,), (30,), (30,), (30,)), ((120,), (120,), (120,), (120,)), ((480,), (480,), (480,), (480,)), ((1, 1890), (1, 1890), (1, 1890), (1, 1890)), ((40,), (40,), (40,), (40,)), ((160,), (160,), (160,), (160,)), ((640,), (640,), (640,), (640,)), ((1, 2520), (1, 2520), (1, 2520), (1, 2520))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 16, 8, 32, 16, 8, 32, 16, 8],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (3,), (3,), (1,), (1,), (1,), (2,), (2,), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'floor': dict(
        name=["floor"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (1,), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[10, 20, 40, 10, 20, 40, 10, 20, 40],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (3,), (3,), (1,), (1,), (1,), (2,), (2,), (2,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (1,), (2,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(3,), (1,), (2,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(100, 3), (400, 3), (1600, 3)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 1), (400, 1), (1600, 1)],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300, 4), (1200, 4), (4800, 4)), ((210, 4), (840, 4), (3360, 4)), ((210,), (840,), (3360,)), ((240, 4), (960, 4), (3840, 4)), ((240,), (960,), (3840,)), ((270, 4), (1080, 4), (4320, 4)), ((270,), (1080,), (4320,)), ((300,), (1200,), (4800,)), ((180, 4), (720, 4), (2880, 4)), ((180,), (720,), (2880,)), ((150, 4), (600, 4), (2400, 4)), ((150,), (600,), (2400,)), ((90, 4), (360, 4), (1440, 4)), ((90,), (360,), (1440,)), ((120, 4), (480, 4), (1920, 4)), ((120,), (480,), (1920,))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_2': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300,), (1200,), (4800,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cat_3': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((300,), (1200,), (4800,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (6300,), (3, 6300, 2), (3, 6300), (5,), (2,), (1,), (1, 6300, 2), (1, 6300), (4,), (2, 6300, 2), (2, 6300), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (1, 5670), (6300, 2), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3,), (6300,), (3, 6300, 2), (3, 6300), (5,), (2,), (1,), (1, 6300, 2), (1, 6300), (4,), (2, 6300, 2), (2, 6300), (4410, 2), (1, 4410), (5040, 2), (1, 5040), (5670, 2), (1, 5670), (6300, 2), (3780, 2), (1, 3780), (3150, 2), (1, 3150), (1890, 2), (1, 1890), (2520, 2), (1, 2520)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (6300,), (3, 6300), (1,), (1, 6300), (2,), (2, 6300), (8, 300, 1), (8, 300, 80), (8, 300), (8, 300, 1), (8, 300, 2), (8, 300, 2), (8, 1200, 1), (8, 1200, 80), (8, 1200), (8, 1200, 1), (8, 1200, 2), (8, 1200, 2), (8, 4800, 1), (8, 4800, 80), (8, 4800), (8, 4800, 1), (8, 4800, 2), (8, 4800, 2), (1, 4410, 2), (4410, 2), (76080,), (79520,), (76240,), (1, 5040, 2), (5040, 2), (91600,), (76480,), (90000,), (78640,), (86160,), (77040,), (89680,), (77680,), (89120,), (1, 5670, 2), (5670, 2), (102880,), (91200,), (86800,), (92000,), (88320,), (94320,), (78720,), (91120,), (90160,), (92400,), (78000,), (81520,), (77280,), (1, 6300, 2), (6300, 2), (111120,), (78240,), (111840,), (92480,), (79120,), (81040,), (89600,), (92640,), (77840,), (1, 3780, 2), (3780, 2), (66160,), (92560,), (78160,), (88480,), (89040,), (89760,), (75280,), (113280,), (90720,), (78400,), (68560,), (111440,), (91840,), (88240,), (78560,), (79440,), (91280,), (89920,), (79360,), (88080,), (81120,), (77360,), (88880,), (67280,), (76960,), (77600,), (88000,), (75520,), (89200,), (77440,), (91360,), (76880,), (77120,), (90640,), (90240,), (81680,), (80240,), (87280,), (76400,), (88640,), (77200,), (78880,), (78960,), (78480,), (1, 3150, 2), (3150, 2), (55200,), (90080,), (77920,), (76560,), (79280,), (80480,), (67680,), (91440,), (78320,), (90560,), (89280,), (88800,), (66480,), (88400,), (75600,), (90400,), (91040,), (79040,), (78080,), (90320,), (80880,), (89520,), (88960,), (87600,), (117920,), (79760,), (90480,), (80960,), (76640,), (76720,), (114240,), (93840,), (92320,), (91680,), (66800,), (114640,), (115840,), (89840,), (89360,), (114160,), (80080,), (79600,), (86720,), (112000,), (98000,), (79680,), (75120,), (103360,), (65840,), (87680,), (111760,), (65280,), (68480,), (65760,), (87920,), (77520,), (90880,), (88720,), (78800,), (86240,), (79200,), (109600,), (111200,), (92160,), (90800,), (115760,), (82720,), (113120,), (116480,), (103680,), (93200,), (100880,), (91920,), (87520,), (69680,), (82080,), (87360,), (110240,), (75040,), (88560,), (74640,), (86560,), (89440,), (110640,), (90960,), (92800,), (109120,), (75840,), (91760,), (75680,), (88160,), (87120,), (87840,), (114480,), (101600,), (91520,), (93040,), (110160,), (66720,), (66400,), (112560,), (94080,), (111680,), (55440,), (67760,), (111920,), (81280,), (85440,), (116880,), (68080,), (57280,), (75760,), (87760,), (75200,), (102160,), (69360,), (113600,), (86320,), (67040,), (101200,), (75920,), (82160,), (66960,), (66560,), (82400,), (80640,), (81920,), (79840,), (103600,), (100480,), (84400,), (102560,), (114560,), (55840,), (85280,), (93360,), (80800,), (76160,), (82320,), (74880,), (86960,), (77760,), (92960,), (86880,), (66880,), (99520,), (81200,), (76320,), (100160,), (56320,), (80000,), (54400,), (100960,), (68960,), (64800,), (54880,), (99840,), (75360,), (85840,), (86640,), (80160,), (76800,), (100720,), (101920,), (86480,), (112400,), (67840,), (113200,), (74560,), (116320,), (82960,), (93600,), (81760,), (65120,), (92720,), (87200,), (114720,), (74480,), (79920,), (80720,), (81840,), (107680,), (86400,), (85120,), (68160,), (56720,), (87440,), (67360,), (93120,), (81600,), (109920,), (76000,), (56240,), (81440,), (108960,), (67520,), (103920,), (102080,), (114000,), (109840,), (85360,), (74960,), (65920,), (112160,), (108400,), (54320,), (66240,), (65680,), (113760,), (85520,), (92880,), (55920,), (80400,), (98880,), (81360,), (80320,), (100000,), (117200,), (92080,), (100320,), (111520,), (110880,), (115600,), (113680,), (112320,), (65040,), (66080,), (67440,), (68400,), (98800,), (74160,), (93280,), (110480,), (118000,), (110320,), (55600,), (110000,), (92240,), (114320,), (64160,), (64640,), (109520,), (87040,), (101840,), (1, 1890, 2), (1890, 2), (33680,), (114960,), (75440,), (64880,), (111600,), (109360,), (99680,), (71360,), (112640,), (110960,), (65360,), (34400,), (115360,), (111360,), (82240,), (69120,), (80560,), (57840,), (93520,), (1, 2520, 2), (2520, 2), (43600,), (67200,), (93440,), (114400,), (102720,), (66640,), (104720,), (69200,), (110080,), (108560,), (113520,), (109760,), (85200,), (109280,), (112480,), (112720,), (110560,), (116560,), (103760,), (103040,), (95120,), (69760,), (68720,), (69280,), (115280,), (82880,), (98640,), (65520,), (110400,), (113920,), (85680,), (83040,), (86080,), (101520,), (67600,), (86000,), (100400,), (111040,), (54640,), (99360,), (106400,), (107520,), (34560,), (113840,), (96960,), (74800,), (66320,), (97120,), (64960,), (84640,), (54560,), (114080,), (66000,), (113040,), (43360,), (58560,), (34880,), (68800,), (82640,), (57920,), (94400,), (98560,), (99040,), (93920,), (85040,), (68320,), (85920,), (114800,), (68640,), (56880,), (105520,), (57120,), (101680,), (117600,), (108080,), (109440,), (65440,), (55280,), (93680,), (94240,), (109040,), (33520,), (99760,), (109680,), (99440,), (112800,), (57760,), (85600,), (65200,), (100240,), (82000,), (57440,), (82480,), (102640,), (99280,), (98160,), (45040,), (94000,), (95280,), (65600,), (108880,), (99200,), (116400,), (84160,), (69520,), (110800,), (112080,), (55680,), (64720,), (43040,), (104880,), (56080,), (111280,), (100560,), (100800,), (55360,), (100080,), (84240,), (103200,), (93760,), (97920,), (67120,), (107600,), (102240,), (110720,), (84800,), (74720,), (101440,), (108480,), (115440,), (101280,), (115520,), (53440,), (70480,), (94480,), (44080,), (97680,), (98320,), (33760,), (43520,), (44480,), (114880,), (106080,), (84080,), (55520,), (102400,), (74240,), (68880,), (102320,), (47680,), (97360,), (115200,), (85760,), (117120,), (101040,), (116240,), (56000,), (112240,), (99120,), (113360,), (115040,), (45440,), (56480,), (115920,), (64000,), (98960,), (69040,), (116160,), (99600,), (94160,), (73760,), (97440,), (68000,), (64560,), (44320,), (116800,), (71040,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3,), (6300,), (3, 6300), (1,), (1, 6300), (2,), (2, 6300), (8, 300, 80), (8, 300, 80), (8, 300), (8, 300, 2), (8, 300, 2), (8, 300, 1), (8, 1200, 80), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 1200, 2), (8, 1200, 1), (8, 4800, 80), (8, 4800, 80), (8, 4800), (8, 4800, 2), (8, 4800, 2), (8, 4800, 1), (4410, 1), (1, 4410, 2), (76080,), (79520,), (76240,), (5040, 1), (1, 5040, 2), (91600,), (76480,), (90000,), (78640,), (86160,), (77040,), (89680,), (77680,), (89120,), (5670, 1), (1, 5670, 2), (102880,), (91200,), (86800,), (92000,), (88320,), (94320,), (78720,), (91120,), (90160,), (92400,), (78000,), (81520,), (77280,), (6300, 1), (1, 6300, 2), (111120,), (78240,), (111840,), (92480,), (79120,), (81040,), (89600,), (92640,), (77840,), (3780, 1), (1, 3780, 2), (66160,), (92560,), (78160,), (88480,), (89040,), (89760,), (75280,), (113280,), (90720,), (78400,), (68560,), (111440,), (91840,), (88240,), (78560,), (79440,), (91280,), (89920,), (79360,), (88080,), (81120,), (77360,), (88880,), (67280,), (76960,), (77600,), (88000,), (75520,), (89200,), (77440,), (91360,), (76880,), (77120,), (90640,), (90240,), (81680,), (80240,), (87280,), (76400,), (88640,), (77200,), (78880,), (78960,), (78480,), (3150, 1), (1, 3150, 2), (55200,), (90080,), (77920,), (76560,), (79280,), (80480,), (67680,), (91440,), (78320,), (90560,), (89280,), (88800,), (66480,), (88400,), (75600,), (90400,), (91040,), (79040,), (78080,), (90320,), (80880,), (89520,), (88960,), (87600,), (117920,), (79760,), (90480,), (80960,), (76640,), (76720,), (114240,), (93840,), (92320,), (91680,), (66800,), (114640,), (115840,), (89840,), (89360,), (114160,), (80080,), (79600,), (86720,), (112000,), (98000,), (79680,), (75120,), (103360,), (65840,), (87680,), (111760,), (65280,), (68480,), (65760,), (87920,), (77520,), (90880,), (88720,), (78800,), (86240,), (79200,), (109600,), (111200,), (92160,), (90800,), (115760,), (82720,), (113120,), (116480,), (103680,), (93200,), (100880,), (91920,), (87520,), (69680,), (82080,), (87360,), (110240,), (75040,), (88560,), (74640,), (86560,), (89440,), (110640,), (90960,), (92800,), (109120,), (75840,), (91760,), (75680,), (88160,), (87120,), (87840,), (114480,), (101600,), (91520,), (93040,), (110160,), (66720,), (66400,), (112560,), (94080,), (111680,), (55440,), (67760,), (111920,), (81280,), (85440,), (116880,), (68080,), (57280,), (75760,), (87760,), (75200,), (102160,), (69360,), (113600,), (86320,), (67040,), (101200,), (75920,), (82160,), (66960,), (66560,), (82400,), (80640,), (81920,), (79840,), (103600,), (100480,), (84400,), (102560,), (114560,), (55840,), (85280,), (93360,), (80800,), (76160,), (82320,), (74880,), (86960,), (77760,), (92960,), (86880,), (66880,), (99520,), (81200,), (76320,), (100160,), (56320,), (80000,), (54400,), (100960,), (68960,), (64800,), (54880,), (99840,), (75360,), (85840,), (86640,), (80160,), (76800,), (100720,), (101920,), (86480,), (112400,), (67840,), (113200,), (74560,), (116320,), (82960,), (93600,), (81760,), (65120,), (92720,), (87200,), (114720,), (74480,), (79920,), (80720,), (81840,), (107680,), (86400,), (85120,), (68160,), (56720,), (87440,), (67360,), (93120,), (81600,), (109920,), (76000,), (56240,), (81440,), (108960,), (67520,), (103920,), (102080,), (114000,), (109840,), (85360,), (74960,), (65920,), (112160,), (108400,), (54320,), (66240,), (65680,), (113760,), (85520,), (92880,), (55920,), (80400,), (98880,), (81360,), (80320,), (100000,), (117200,), (92080,), (100320,), (111520,), (110880,), (115600,), (113680,), (112320,), (65040,), (66080,), (67440,), (68400,), (98800,), (74160,), (93280,), (110480,), (118000,), (110320,), (55600,), (110000,), (92240,), (114320,), (64160,), (64640,), (109520,), (87040,), (101840,), (1890, 1), (1, 1890, 2), (33680,), (114960,), (75440,), (64880,), (111600,), (109360,), (99680,), (71360,), (112640,), (110960,), (65360,), (34400,), (115360,), (111360,), (82240,), (69120,), (80560,), (57840,), (93520,), (2520, 1), (1, 2520, 2), (43600,), (67200,), (93440,), (114400,), (102720,), (66640,), (104720,), (69200,), (110080,), (108560,), (113520,), (109760,), (85200,), (109280,), (112480,), (112720,), (110560,), (116560,), (103760,), (103040,), (95120,), (69760,), (68720,), (69280,), (115280,), (82880,), (98640,), (65520,), (110400,), (113920,), (85680,), (83040,), (86080,), (101520,), (67600,), (86000,), (100400,), (111040,), (54640,), (99360,), (106400,), (107520,), (34560,), (113840,), (96960,), (74800,), (66320,), (97120,), (64960,), (84640,), (54560,), (114080,), (66000,), (113040,), (43360,), (58560,), (34880,), (68800,), (82640,), (57920,), (94400,), (98560,), (99040,), (93920,), (85040,), (68320,), (85920,), (114800,), (68640,), (56880,), (105520,), (57120,), (101680,), (117600,), (108080,), (109440,), (65440,), (55280,), (93680,), (94240,), (109040,), (33520,), (99760,), (109680,), (99440,), (112800,), (57760,), (85600,), (65200,), (100240,), (82000,), (57440,), (82480,), (102640,), (99280,), (98160,), (45040,), (94000,), (95280,), (65600,), (108880,), (99200,), (116400,), (84160,), (69520,), (110800,), (112080,), (55680,), (64720,), (43040,), (104880,), (56080,), (111280,), (100560,), (100800,), (55360,), (100080,), (84240,), (103200,), (93760,), (97920,), (67120,), (107600,), (102240,), (110720,), (84800,), (74720,), (101440,), (108480,), (115440,), (101280,), (115520,), (53440,), (70480,), (94480,), (44080,), (97680,), (98320,), (33760,), (43520,), (44480,), (114880,), (106080,), (84080,), (55520,), (102400,), (74240,), (68880,), (102320,), (47680,), (97360,), (115200,), (85760,), (117120,), (101040,), (116240,), (56000,), (112240,), (99120,), (113360,), (115040,), (45440,), (56480,), (115920,), (64000,), (98960,), (69040,), (116160,), (99600,), (94160,), (73760,), (97440,), (68000,), (64560,), (44320,), (116800,), (71040,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 1, 2), (3, 6300), (1, 1, 2), (1, 6300), (2, 1, 2), (2, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 6300, 2), (1,), (1, 6300, 2), (1,), (1, 6300, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'minimum': dict(
        name=["minimum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 1, 2), (1, 1, 2), (2, 1, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 6300, 2), (1, 6300, 2), (1, 6300, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[0, 1e-06, 1e-06, 0, 1e-06, 1e-06, 1e-06, 0],
            max=[None, 0.999999, 0.999999, None, 0.999999, 0.999999, 0.999999, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 6300, 2), (5,), (2,), (1, 6300, 2), (1,), (3,), (4,), (2, 6300, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 6300), (5,), (2,), (1, 6300), (1,), (3,), (4,), (2, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 6300), (5,), (2,), (1, 6300), (1,), (3,), (4,), (2, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[0, 1, 0, 1, 0, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 6300), (3, 6300), (1, 6300), (1, 6300), (2, 6300), (2, 6300)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2), (4410,), (5040,), (5670,), (6300,), (3780,), (3150,), (1890,), (2520,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'le': dict(
        name=["le"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'logical_and': dict(
        name=["logical_and"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
                {
                    "ins": ["other"],
                    "shape": [(6300,), (8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'bitwise_not': dict(
        name=["bitwise_not"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (), (), (76080,), (79520,), (76240,), (91600,), (76480,), (90000,), (78640,), (86160,), (77040,), (89680,), (77680,), (89120,), (102880,), (91200,), (86800,), (92000,), (88320,), (94320,), (78720,), (91120,), (90160,), (92400,), (78000,), (81520,), (77280,), (111120,), (78240,), (111840,), (92480,), (79120,), (81040,), (89600,), (92640,), (77840,), (66160,), (92560,), (78160,), (88480,), (89040,), (89760,), (75280,), (113280,), (90720,), (78400,), (68560,), (111440,), (91840,), (88240,), (78560,), (79440,), (91280,), (89920,), (79360,), (88080,), (81120,), (77360,), (88880,), (67280,), (76960,), (77600,), (88000,), (75520,), (89200,), (77440,), (91360,), (76880,), (77120,), (90640,), (90240,), (81680,), (80240,), (87280,), (76400,), (88640,), (77200,), (78880,), (78960,), (78480,), (55200,), (90080,), (77920,), (76560,), (79280,), (80480,), (67680,), (91440,), (78320,), (90560,), (89280,), (88800,), (66480,), (88400,), (75600,), (90400,), (91040,), (79040,), (78080,), (90320,), (80880,), (89520,), (88960,), (87600,), (117920,), (79760,), (90480,), (80960,), (76640,), (76720,), (114240,), (93840,), (92320,), (91680,), (66800,), (114640,), (115840,), (89840,), (89360,), (114160,), (80080,), (79600,), (86720,), (112000,), (98000,), (79680,), (75120,), (103360,), (65840,), (87680,), (111760,), (65280,), (68480,), (65760,), (87920,), (77520,), (90880,), (88720,), (78800,), (86240,), (79200,), (109600,), (111200,), (92160,), (90800,), (115760,), (82720,), (113120,), (116480,), (103680,), (93200,), (100880,), (91920,), (87520,), (69680,), (82080,), (87360,), (110240,), (75040,), (88560,), (74640,), (86560,), (89440,), (110640,), (90960,), (92800,), (109120,), (75840,), (91760,), (75680,), (88160,), (87120,), (87840,), (114480,), (101600,), (91520,), (93040,), (110160,), (66720,), (66400,), (112560,), (94080,), (111680,), (55440,), (67760,), (111920,), (81280,), (85440,), (116880,), (68080,), (57280,), (75760,), (87760,), (75200,), (102160,), (69360,), (113600,), (86320,), (67040,), (101200,), (75920,), (82160,), (66960,), (66560,), (82400,), (80640,), (81920,), (79840,), (103600,), (100480,), (84400,), (102560,), (114560,), (55840,), (85280,), (93360,), (80800,), (76160,), (82320,), (74880,), (86960,), (77760,), (92960,), (86880,), (66880,), (99520,), (81200,), (76320,), (100160,), (56320,), (80000,), (54400,), (100960,), (68960,), (64800,), (54880,), (99840,), (75360,), (85840,), (86640,), (80160,), (76800,), (100720,), (101920,), (86480,), (112400,), (67840,), (113200,), (74560,), (116320,), (82960,), (93600,), (81760,), (65120,), (92720,), (87200,), (114720,), (74480,), (79920,), (80720,), (81840,), (107680,), (86400,), (85120,), (68160,), (56720,), (87440,), (67360,), (93120,), (81600,), (109920,), (76000,), (56240,), (81440,), (108960,), (67520,), (103920,), (102080,), (114000,), (109840,), (85360,), (74960,), (65920,), (112160,), (108400,), (54320,), (66240,), (65680,), (113760,), (85520,), (92880,), (55920,), (80400,), (98880,), (81360,), (80320,), (100000,), (117200,), (92080,), (100320,), (111520,), (110880,), (115600,), (113680,), (112320,), (65040,), (66080,), (67440,), (68400,), (98800,), (74160,), (93280,), (110480,), (118000,), (110320,), (55600,), (110000,), (92240,), (114320,), (64160,), (64640,), (109520,), (87040,), (101840,), (33680,), (114960,), (75440,), (64880,), (111600,), (109360,), (99680,), (71360,), (112640,), (110960,), (65360,), (34400,), (115360,), (111360,), (82240,), (69120,), (80560,), (57840,), (93520,), (43600,), (67200,), (93440,), (114400,), (102720,), (66640,), (104720,), (69200,), (110080,), (108560,), (113520,), (109760,), (85200,), (109280,), (112480,), (112720,), (110560,), (116560,), (103760,), (103040,), (95120,), (69760,), (68720,), (69280,), (115280,), (82880,), (98640,), (65520,), (110400,), (113920,), (85680,), (83040,), (86080,), (101520,), (67600,), (86000,), (100400,), (111040,), (54640,), (99360,), (106400,), (107520,), (34560,), (113840,), (96960,), (74800,), (66320,), (97120,), (64960,), (84640,), (54560,), (114080,), (66000,), (113040,), (43360,), (58560,), (34880,), (68800,), (82640,), (57920,), (94400,), (98560,), (99040,), (93920,), (85040,), (68320,), (85920,), (114800,), (68640,), (56880,), (105520,), (57120,), (101680,), (117600,), (108080,), (109440,), (65440,), (55280,), (93680,), (94240,), (109040,), (33520,), (99760,), (109680,), (99440,), (112800,), (57760,), (85600,), (65200,), (100240,), (82000,), (57440,), (82480,), (102640,), (99280,), (98160,), (45040,), (94000,), (95280,), (65600,), (108880,), (99200,), (116400,), (84160,), (69520,), (110800,), (112080,), (55680,), (64720,), (43040,), (104880,), (56080,), (111280,), (100560,), (100800,), (55360,), (100080,), (84240,), (103200,), (93760,), (97920,), (67120,), (107600,), (102240,), (110720,), (84800,), (74720,), (101440,), (108480,), (115440,), (101280,), (115520,), (53440,), (70480,), (94480,), (44080,), (97680,), (98320,), (33760,), (43520,), (44480,), (114880,), (106080,), (84080,), (55520,), (102400,), (74240,), (68880,), (102320,), (47680,), (97360,), (115200,), (85760,), (117120,), (101040,), (116240,), (56000,), (112240,), (99120,), (113360,), (115040,), (45440,), (56480,), (115920,), (64000,), (98960,), (69040,), (116160,), (99600,), (94160,), (73760,), (97440,), (68000,), (64560,), (44320,), (116800,), (71040,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), (76080,), (79520,), (76240,), (91600,), (76480,), (90000,), (78640,), (86160,), (77040,), (89680,), (77680,), (89120,), (102880,), (91200,), (86800,), (92000,), (88320,), (94320,), (78720,), (91120,), (90160,), (92400,), (78000,), (81520,), (77280,), (111120,), (78240,), (111840,), (92480,), (79120,), (81040,), (89600,), (92640,), (77840,), (66160,), (92560,), (78160,), (88480,), (89040,), (89760,), (75280,), (113280,), (90720,), (78400,), (68560,), (111440,), (91840,), (88240,), (78560,), (79440,), (91280,), (89920,), (79360,), (88080,), (81120,), (77360,), (88880,), (67280,), (76960,), (77600,), (88000,), (75520,), (89200,), (77440,), (91360,), (76880,), (77120,), (90640,), (90240,), (81680,), (80240,), (87280,), (76400,), (88640,), (77200,), (78880,), (78960,), (78480,), (55200,), (90080,), (77920,), (76560,), (79280,), (80480,), (67680,), (91440,), (78320,), (90560,), (89280,), (88800,), (66480,), (88400,), (75600,), (90400,), (91040,), (79040,), (78080,), (90320,), (80880,), (89520,), (88960,), (87600,), (117920,), (79760,), (90480,), (80960,), (76640,), (76720,), (114240,), (93840,), (92320,), (91680,), (66800,), (114640,), (115840,), (89840,), (89360,), (114160,), (80080,), (79600,), (86720,), (112000,), (98000,), (79680,), (75120,), (103360,), (65840,), (87680,), (111760,), (65280,), (68480,), (65760,), (87920,), (77520,), (90880,), (88720,), (78800,), (86240,), (79200,), (109600,), (111200,), (92160,), (90800,), (115760,), (82720,), (113120,), (116480,), (103680,), (93200,), (100880,), (91920,), (87520,), (69680,), (82080,), (87360,), (110240,), (75040,), (88560,), (74640,), (86560,), (89440,), (110640,), (90960,), (92800,), (109120,), (75840,), (91760,), (75680,), (88160,), (87120,), (87840,), (114480,), (101600,), (91520,), (93040,), (110160,), (66720,), (66400,), (112560,), (94080,), (111680,), (55440,), (67760,), (111920,), (81280,), (85440,), (116880,), (68080,), (57280,), (75760,), (87760,), (75200,), (102160,), (69360,), (113600,), (86320,), (67040,), (101200,), (75920,), (82160,), (66960,), (66560,), (82400,), (80640,), (81920,), (79840,), (103600,), (100480,), (84400,), (102560,), (114560,), (55840,), (85280,), (93360,), (80800,), (76160,), (82320,), (74880,), (86960,), (77760,), (92960,), (86880,), (66880,), (99520,), (81200,), (76320,), (100160,), (56320,), (80000,), (54400,), (100960,), (68960,), (64800,), (54880,), (99840,), (75360,), (85840,), (86640,), (80160,), (76800,), (100720,), (101920,), (86480,), (112400,), (67840,), (113200,), (74560,), (116320,), (82960,), (93600,), (81760,), (65120,), (92720,), (87200,), (114720,), (74480,), (79920,), (80720,), (81840,), (107680,), (86400,), (85120,), (68160,), (56720,), (87440,), (67360,), (93120,), (81600,), (109920,), (76000,), (56240,), (81440,), (108960,), (67520,), (103920,), (102080,), (114000,), (109840,), (85360,), (74960,), (65920,), (112160,), (108400,), (54320,), (66240,), (65680,), (113760,), (85520,), (92880,), (55920,), (80400,), (98880,), (81360,), (80320,), (100000,), (117200,), (92080,), (100320,), (111520,), (110880,), (115600,), (113680,), (112320,), (65040,), (66080,), (67440,), (68400,), (98800,), (74160,), (93280,), (110480,), (118000,), (110320,), (55600,), (110000,), (92240,), (114320,), (64160,), (64640,), (109520,), (87040,), (101840,), (33680,), (114960,), (75440,), (64880,), (111600,), (109360,), (99680,), (71360,), (112640,), (110960,), (65360,), (34400,), (115360,), (111360,), (82240,), (69120,), (80560,), (57840,), (93520,), (43600,), (67200,), (93440,), (114400,), (102720,), (66640,), (104720,), (69200,), (110080,), (108560,), (113520,), (109760,), (85200,), (109280,), (112480,), (112720,), (110560,), (116560,), (103760,), (103040,), (95120,), (69760,), (68720,), (69280,), (115280,), (82880,), (98640,), (65520,), (110400,), (113920,), (85680,), (83040,), (86080,), (101520,), (67600,), (86000,), (100400,), (111040,), (54640,), (99360,), (106400,), (107520,), (34560,), (113840,), (96960,), (74800,), (66320,), (97120,), (64960,), (84640,), (54560,), (114080,), (66000,), (113040,), (43360,), (58560,), (34880,), (68800,), (82640,), (57920,), (94400,), (98560,), (99040,), (93920,), (85040,), (68320,), (85920,), (114800,), (68640,), (56880,), (105520,), (57120,), (101680,), (117600,), (108080,), (109440,), (65440,), (55280,), (93680,), (94240,), (109040,), (33520,), (99760,), (109680,), (99440,), (112800,), (57760,), (85600,), (65200,), (100240,), (82000,), (57440,), (82480,), (102640,), (99280,), (98160,), (45040,), (94000,), (95280,), (65600,), (108880,), (99200,), (116400,), (84160,), (69520,), (110800,), (112080,), (55680,), (64720,), (43040,), (104880,), (56080,), (111280,), (100560,), (100800,), (55360,), (100080,), (84240,), (103200,), (93760,), (97920,), (67120,), (107600,), (102240,), (110720,), (84800,), (74720,), (101440,), (108480,), (115440,), (101280,), (115520,), (53440,), (70480,), (94480,), (44080,), (97680,), (98320,), (33760,), (43520,), (44480,), (114880,), (106080,), (84080,), (55520,), (102400,), (74240,), (68880,), (102320,), (47680,), (97360,), (115200,), (85760,), (117120,), (101040,), (116240,), (56000,), (112240,), (99120,), (113360,), (115040,), (45440,), (56480,), (115920,), (64000,), (98960,), (69040,), (116160,), (99600,), (94160,), (73760,), (97440,), (68000,), (64560,), (44320,), (116800,), (71040,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'unique': dict(
        name=["unique"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (6287,), (2,), (6277,), (1,), (6292,), (3,), (4,), (6296,), (6299,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'unique_1': dict(
        name=["unique"],
        interface=["torch"],
        para=dict(
            sorted=[True, True, True, True, True, True, True, True, True, True],
            return_inverse=[False, False, False, False, False, False, False, False, False, False],
            return_counts=[False, False, False, False, False, False, False, False, False, False],
            dim=[None, None, None, None, None, None, None, None, None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (6287,), (2,), (6277,), (1,), (6292,), (3,), (4,), (6296,), (6299,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 4],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6300,), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (4,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'clamp_1': dict(
        name=["clamp"],
        interface=["torch.Tensor"],
        para=dict(
            min=[1e-06, 1e-06, 1e-06, 1e-06, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(5,), (2,), (1,), (3,), (4,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(5,), (2,), (1,), (3,), (4,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'one_hot': dict(
        name=["one_hot"],
        para=dict(
            num_classes=[80, 80, 80],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3,), (1,), (2,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85), (6300, 85))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'stack_2': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((6300,), (6300,), (6300,), (6300,), (6300,), (6300,), (6300,), (6300,))],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1), (0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 255, 10, 10), (8, 255, 20, 20), (8, 255, 40, 40), (1, 255, 7, 10), (1, 255, 14, 20), (1, 255, 28, 40), (1, 255, 8, 10), (1, 255, 16, 20), (1, 255, 32, 40), (1, 255, 10, 7), (1, 255, 20, 14), (1, 255, 40, 28), (1, 255, 10, 8), (1, 255, 20, 16), (1, 255, 40, 32), (1, 255, 9, 10), (1, 255, 18, 20), (1, 255, 36, 40), (1, 255, 10, 10), (1, 255, 20, 20), (1, 255, 40, 40), (1, 255, 6, 10), (1, 255, 12, 20), (1, 255, 24, 40), (1, 255, 5, 10), (1, 255, 10, 20), (1, 255, 20, 40), (1, 255, 10, 9), (1, 255, 20, 18), (1, 255, 40, 36), (1, 255, 10, 6), (1, 255, 20, 12), (1, 255, 40, 24), (1, 255, 10, 5), (1, 255, 20, 10), (1, 255, 40, 20), (1, 255, 3, 10), (1, 255, 6, 20), (1, 255, 12, 40), (1, 255, 4, 10), (1, 255, 8, 20), (1, 255, 16, 40), (1, 255, 10, 4), (1, 255, 20, 8), (1, 255, 40, 16)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_1': dict(
        name=["max"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300), (8, 1200), (8, 4800)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ne': dict(
        name=["ne"],
        interface=["torch.Tensor"],
        para=dict(
            other=[-100, -100, -100, -100, -100, -100, -100, -100, -100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'binary_cross_entropy_with_logits': dict(
        name=["binary_cross_entropy_with_logits"],
        para=dict(
            reduction=['none', 'none', 'none', 'none', 'none', 'none', 'none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 80), (8, 300), (8, 300, 2), (8, 1200, 80), (8, 1200), (8, 1200, 2), (8, 4800, 80), (8, 4800), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mse_loss': dict(
        name=["mse_loss"],
        para=dict(
            reduction=['none', 'none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(8, 300, 2), (8, 1200, 2), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(8, 300, 2), (8, 1200, 2), (8, 4800, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1), (222,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_3': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_4': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp_2': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(23)],
            lr=[9.999999999999998e-05 for i in range(23)],
            momentum=[0.9 for i in range(23)],
            weight_decay=[0.0005 for i in range(23)],
            dampening=[0 for i in range(23)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[-9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05, -9.999999999999998e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(32, 3, 3, 3), (32,), (64, 32, 3, 3), (64,), (32, 64, 1, 1), (128, 64, 3, 3), (128,), (64, 128, 1, 1), (256, 128, 3, 3), (256,), (128, 256, 1, 1), (512, 256, 3, 3), (512,), (256, 512, 1, 1), (1024, 512, 3, 3), (1024,), (512, 1024, 1, 1), (256, 768, 1, 1), (128, 384, 1, 1), (255, 1024, 1, 1), (255,), (255, 512, 1, 1), (255, 256, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_1': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[5000],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 210, 2), (1, 840, 2), (1, 3360, 2), (1, 240, 2), (1, 960, 2), (1, 3840, 2), (1, 270, 2), (1, 1080, 2), (1, 4320, 2), (1, 300, 2), (1, 1200, 2), (1, 4800, 2), (1, 180, 2), (1, 720, 2), (1, 2880, 2), (1, 150, 2), (1, 600, 2), (1, 2400, 2), (1, 90, 2), (1, 360, 2), (1, 1440, 2), (1, 120, 2), (1, 480, 2), (1, 1920, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'expand_1': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(210,), (840,), (3360,), (240,), (960,), (3840,), (270,), (1080,), (4320,), (300,), (1200,), (4800,), (180,), (720,), (2880,), (150,), (600,), (2400,), (90,), (360,), (1440,), (120,), (480,), (1920,)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_4': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 210, 85), (1, 840, 85), (1, 3360, 85)), ((1, 240, 85), (1, 960, 85), (1, 3840, 85)), ((1, 270, 85), (1, 1080, 85), (1, 4320, 85)), ((1, 300, 85), (1, 1200, 85), (1, 4800, 85)), ((1, 180, 85), (1, 720, 85), (1, 2880, 85)), ((1, 150, 85), (1, 600, 85), (1, 2400, 85)), ((1, 90, 85), (1, 360, 85), (1, 1440, 85)), ((1, 120, 85), (1, 480, 85), (1, 1920, 85))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sigmoid_1': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 4410), (1, 4410, 80), (1, 5040), (1, 5040, 80), (1, 5670), (1, 5670, 80), (1, 6300), (1, 6300, 80), (1, 3780), (1, 3780, 80), (1, 3150), (1, 3150, 80), (1, 1890), (1, 1890, 80), (1, 2520), (1, 2520, 80)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 2), (1, 5040, 2), (1, 5670, 2), (1, 6300, 2), (1, 3780, 2), (1, 3150, 2), (1, 1890, 2), (1, 2520, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_5': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 4410, 4), (1, 5040, 4), (1, 5670, 4), (1, 6300, 4), (1, 3780, 4), (1, 3150, 4), (1, 1890, 4), (1, 2520, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4), (1, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_5': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 4410, 80), (1, 4410, 1)), ((1, 5040, 80), (1, 5040, 1)), ((1, 5670, 80), (1, 5670, 1)), ((1, 6300, 80), (1, 6300, 1)), ((1, 3780, 80), (1, 3780, 1)), ((1, 3150, 80), (1, 3150, 1)), ((1, 1890, 80), (1, 1890, 1)), ((1, 2520, 80), (1, 2520, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'expand_2': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(951, 80, 4), (994, 80, 4), (953, 80, 4), (1145, 80, 4), (956, 80, 4), (1125, 80, 4), (983, 80, 4), (1077, 80, 4), (963, 80, 4), (1121, 80, 4), (971, 80, 4), (1114, 80, 4), (1286, 80, 4), (1140, 80, 4), (1085, 80, 4), (1150, 80, 4), (1104, 80, 4), (1179, 80, 4), (984, 80, 4), (1139, 80, 4), (1127, 80, 4), (1155, 80, 4), (975, 80, 4), (1019, 80, 4), (966, 80, 4), (1389, 80, 4), (978, 80, 4), (1398, 80, 4), (1156, 80, 4), (989, 80, 4), (1013, 80, 4), (1120, 80, 4), (1158, 80, 4), (973, 80, 4), (827, 80, 4), (1157, 80, 4), (977, 80, 4), (1106, 80, 4), (1113, 80, 4), (1122, 80, 4), (941, 80, 4), (1416, 80, 4), (1134, 80, 4), (980, 80, 4), (857, 80, 4), (1393, 80, 4), (1148, 80, 4), (1103, 80, 4), (982, 80, 4), (993, 80, 4), (1141, 80, 4), (1124, 80, 4), (992, 80, 4), (1101, 80, 4), (1014, 80, 4), (967, 80, 4), (1111, 80, 4), (841, 80, 4), (962, 80, 4), (970, 80, 4), (1100, 80, 4), (944, 80, 4), (1115, 80, 4), (968, 80, 4), (1142, 80, 4), (961, 80, 4), (964, 80, 4), (1133, 80, 4), (1128, 80, 4), (1021, 80, 4), (1003, 80, 4), (1091, 80, 4), (955, 80, 4), (1108, 80, 4), (965, 80, 4), (986, 80, 4), (987, 80, 4), (981, 80, 4), (690, 80, 4), (1126, 80, 4), (974, 80, 4), (957, 80, 4), (991, 80, 4), (1006, 80, 4), (846, 80, 4), (1143, 80, 4), (979, 80, 4), (1132, 80, 4), (1116, 80, 4), (1110, 80, 4), (831, 80, 4), (1105, 80, 4), (945, 80, 4), (1130, 80, 4), (1138, 80, 4), (988, 80, 4), (976, 80, 4), (1129, 80, 4), (1011, 80, 4), (1119, 80, 4), (1112, 80, 4), (1095, 80, 4), (1474, 80, 4), (997, 80, 4), (1131, 80, 4), (1012, 80, 4), (958, 80, 4), (959, 80, 4), (1428, 80, 4), (1173, 80, 4), (1154, 80, 4), (1146, 80, 4), (835, 80, 4), (1433, 80, 4), (1448, 80, 4), (1123, 80, 4), (1117, 80, 4), (1427, 80, 4), (1001, 80, 4), (995, 80, 4), (1084, 80, 4), (1400, 80, 4), (1225, 80, 4), (996, 80, 4), (939, 80, 4), (1292, 80, 4), (823, 80, 4), (1096, 80, 4), (1397, 80, 4), (816, 80, 4), (856, 80, 4), (822, 80, 4), (1099, 80, 4), (969, 80, 4), (1136, 80, 4), (1109, 80, 4), (985, 80, 4), (1078, 80, 4), (990, 80, 4), (1370, 80, 4), (1390, 80, 4), (1152, 80, 4), (1135, 80, 4), (1447, 80, 4), (1034, 80, 4), (1414, 80, 4), (1456, 80, 4), (1296, 80, 4), (1165, 80, 4), (1261, 80, 4), (1149, 80, 4), (1094, 80, 4), (871, 80, 4), (1026, 80, 4), (1092, 80, 4), (1378, 80, 4), (938, 80, 4), (1107, 80, 4), (933, 80, 4), (1082, 80, 4), (1118, 80, 4), (1383, 80, 4), (1137, 80, 4), (1160, 80, 4), (1364, 80, 4), (948, 80, 4), (1147, 80, 4), (946, 80, 4), (1102, 80, 4), (1089, 80, 4), (1098, 80, 4), (1431, 80, 4), (1270, 80, 4), (1144, 80, 4), (1163, 80, 4), (1377, 80, 4), (834, 80, 4), (830, 80, 4), (1407, 80, 4), (1176, 80, 4), (1396, 80, 4), (693, 80, 4), (847, 80, 4), (1399, 80, 4), (1016, 80, 4), (1068, 80, 4), (1461, 80, 4), (851, 80, 4), (716, 80, 4), (947, 80, 4), (1097, 80, 4), (940, 80, 4), (1277, 80, 4), (867, 80, 4), (1420, 80, 4), (1079, 80, 4), (838, 80, 4), (1265, 80, 4), (949, 80, 4), (1027, 80, 4), (837, 80, 4), (832, 80, 4), (1030, 80, 4), (1008, 80, 4), (1024, 80, 4), (998, 80, 4), (1295, 80, 4), (1256, 80, 4), (1055, 80, 4), (1282, 80, 4), (1432, 80, 4), (698, 80, 4), (1066, 80, 4), (1167, 80, 4), (1010, 80, 4), (952, 80, 4), (1029, 80, 4), (936, 80, 4), (1087, 80, 4), (972, 80, 4), (1162, 80, 4), (1086, 80, 4), (836, 80, 4), (1244, 80, 4), (1015, 80, 4), (954, 80, 4), (1252, 80, 4), (704, 80, 4), (1000, 80, 4), (680, 80, 4), (1262, 80, 4), (862, 80, 4), (810, 80, 4), (686, 80, 4), (1248, 80, 4), (942, 80, 4), (1073, 80, 4), (1083, 80, 4), (1002, 80, 4), (960, 80, 4), (1259, 80, 4), (1274, 80, 4), (1081, 80, 4), (1405, 80, 4), (848, 80, 4), (1415, 80, 4), (932, 80, 4), (1454, 80, 4), (1037, 80, 4), (1170, 80, 4), (1022, 80, 4), (814, 80, 4), (1159, 80, 4), (1090, 80, 4), (1434, 80, 4), (931, 80, 4), (999, 80, 4), (1009, 80, 4), (1023, 80, 4), (1346, 80, 4), (1080, 80, 4), (1064, 80, 4), (852, 80, 4), (709, 80, 4), (1093, 80, 4), (842, 80, 4), (1164, 80, 4), (1020, 80, 4), (1374, 80, 4), (950, 80, 4), (703, 80, 4), (1018, 80, 4), (1362, 80, 4), (844, 80, 4), (1299, 80, 4), (1276, 80, 4), (1425, 80, 4), (1373, 80, 4), (1067, 80, 4), (937, 80, 4), (824, 80, 4), (1402, 80, 4), (1355, 80, 4), (679, 80, 4), (828, 80, 4), (821, 80, 4), (1422, 80, 4), (1069, 80, 4), (1161, 80, 4), (699, 80, 4), (1005, 80, 4), (1236, 80, 4), (1017, 80, 4), (1004, 80, 4), (1250, 80, 4), (1465, 80, 4), (1151, 80, 4), (1254, 80, 4), (1394, 80, 4), (1386, 80, 4), (1445, 80, 4), (1421, 80, 4), (1404, 80, 4), (813, 80, 4), (826, 80, 4), (843, 80, 4), (855, 80, 4), (1235, 80, 4), (927, 80, 4), (1166, 80, 4), (1381, 80, 4), (1475, 80, 4), (1379, 80, 4), (695, 80, 4), (1375, 80, 4), (1153, 80, 4), (1429, 80, 4), (802, 80, 4), (808, 80, 4), (1369, 80, 4), (1088, 80, 4), (1273, 80, 4), (421, 80, 4), (1437, 80, 4), (943, 80, 4), (811, 80, 4), (1395, 80, 4), (1367, 80, 4), (1246, 80, 4), (892, 80, 4), (1408, 80, 4), (1387, 80, 4), (817, 80, 4), (430, 80, 4), (1442, 80, 4), (1392, 80, 4), (1028, 80, 4), (864, 80, 4), (1007, 80, 4), (723, 80, 4), (1169, 80, 4), (545, 80, 4), (840, 80, 4), (1168, 80, 4), (1430, 80, 4), (1284, 80, 4), (833, 80, 4), (1309, 80, 4), (865, 80, 4), (1376, 80, 4), (1357, 80, 4), (1419, 80, 4), (1372, 80, 4), (1065, 80, 4), (1366, 80, 4), (1406, 80, 4), (1409, 80, 4), (1382, 80, 4), (1457, 80, 4), (1297, 80, 4), (1288, 80, 4), (1189, 80, 4), (872, 80, 4), (859, 80, 4), (866, 80, 4), (1441, 80, 4), (1036, 80, 4), (1233, 80, 4), (819, 80, 4), (1380, 80, 4), (1424, 80, 4), (1071, 80, 4), (1038, 80, 4), (1076, 80, 4), (1269, 80, 4), (845, 80, 4), (1075, 80, 4), (1255, 80, 4), (1388, 80, 4), (683, 80, 4), (1242, 80, 4), (1330, 80, 4), (1344, 80, 4), (432, 80, 4), (1423, 80, 4), (1212, 80, 4), (935, 80, 4), (829, 80, 4), (1214, 80, 4), (812, 80, 4), (1058, 80, 4), (682, 80, 4), (1426, 80, 4), (825, 80, 4), (1413, 80, 4), (542, 80, 4), (732, 80, 4), (436, 80, 4), (860, 80, 4), (1033, 80, 4), (724, 80, 4), (1180, 80, 4), (1232, 80, 4), (1238, 80, 4), (1174, 80, 4), (1063, 80, 4), (854, 80, 4), (1074, 80, 4), (1435, 80, 4), (858, 80, 4), (711, 80, 4), (1319, 80, 4), (714, 80, 4), (1271, 80, 4), (1470, 80, 4), (1351, 80, 4), (1368, 80, 4), (818, 80, 4), (691, 80, 4), (1171, 80, 4), (1178, 80, 4), (1363, 80, 4), (419, 80, 4), (1247, 80, 4), (1371, 80, 4), (1243, 80, 4), (1410, 80, 4), (722, 80, 4), (1070, 80, 4), (815, 80, 4), (1253, 80, 4), (1025, 80, 4), (718, 80, 4), (1031, 80, 4), (1283, 80, 4), (1241, 80, 4), (1227, 80, 4), (563, 80, 4), (1175, 80, 4), (1191, 80, 4), (820, 80, 4), (1361, 80, 4), (1240, 80, 4), (1455, 80, 4), (1052, 80, 4), (869, 80, 4), (1385, 80, 4), (1401, 80, 4), (696, 80, 4), (809, 80, 4), (538, 80, 4), (1311, 80, 4), (701, 80, 4), (1391, 80, 4), (1257, 80, 4), (1260, 80, 4), (692, 80, 4), (1251, 80, 4), (1053, 80, 4), (1290, 80, 4), (1172, 80, 4), (1224, 80, 4), (839, 80, 4), (1345, 80, 4), (1278, 80, 4), (1384, 80, 4), (1060, 80, 4), (934, 80, 4), (1268, 80, 4), (1356, 80, 4), (1443, 80, 4), (1266, 80, 4), (1444, 80, 4), (668, 80, 4), (881, 80, 4), (1181, 80, 4), (551, 80, 4), (1221, 80, 4), (1229, 80, 4), (422, 80, 4), (544, 80, 4), (556, 80, 4), (1436, 80, 4), (1326, 80, 4), (1051, 80, 4), (694, 80, 4), (1280, 80, 4), (928, 80, 4), (861, 80, 4), (1279, 80, 4), (596, 80, 4), (1217, 80, 4), (1440, 80, 4), (1072, 80, 4), (1464, 80, 4), (1263, 80, 4), (1453, 80, 4), (700, 80, 4), (1403, 80, 4), (1239, 80, 4), (1417, 80, 4), (1438, 80, 4), (568, 80, 4), (706, 80, 4), (1449, 80, 4), (800, 80, 4), (1237, 80, 4), (863, 80, 4), (1452, 80, 4), (1245, 80, 4), (1177, 80, 4), (922, 80, 4), (1218, 80, 4), (850, 80, 4), (807, 80, 4), (554, 80, 4), (1460, 80, 4), (888, 80, 4)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(951, 1, 4), (994, 1, 4), (953, 1, 4), (1145, 1, 4), (956, 1, 4), (1125, 1, 4), (983, 1, 4), (1077, 1, 4), (963, 1, 4), (1121, 1, 4), (971, 1, 4), (1114, 1, 4), (1286, 1, 4), (1140, 1, 4), (1085, 1, 4), (1150, 1, 4), (1104, 1, 4), (1179, 1, 4), (984, 1, 4), (1139, 1, 4), (1127, 1, 4), (1155, 1, 4), (975, 1, 4), (1019, 1, 4), (966, 1, 4), (1389, 1, 4), (978, 1, 4), (1398, 1, 4), (1156, 1, 4), (989, 1, 4), (1013, 1, 4), (1120, 1, 4), (1158, 1, 4), (973, 1, 4), (827, 1, 4), (1157, 1, 4), (977, 1, 4), (1106, 1, 4), (1113, 1, 4), (1122, 1, 4), (941, 1, 4), (1416, 1, 4), (1134, 1, 4), (980, 1, 4), (857, 1, 4), (1393, 1, 4), (1148, 1, 4), (1103, 1, 4), (982, 1, 4), (993, 1, 4), (1141, 1, 4), (1124, 1, 4), (992, 1, 4), (1101, 1, 4), (1014, 1, 4), (967, 1, 4), (1111, 1, 4), (841, 1, 4), (962, 1, 4), (970, 1, 4), (1100, 1, 4), (944, 1, 4), (1115, 1, 4), (968, 1, 4), (1142, 1, 4), (961, 1, 4), (964, 1, 4), (1133, 1, 4), (1128, 1, 4), (1021, 1, 4), (1003, 1, 4), (1091, 1, 4), (955, 1, 4), (1108, 1, 4), (965, 1, 4), (986, 1, 4), (987, 1, 4), (981, 1, 4), (690, 1, 4), (1126, 1, 4), (974, 1, 4), (957, 1, 4), (991, 1, 4), (1006, 1, 4), (846, 1, 4), (1143, 1, 4), (979, 1, 4), (1132, 1, 4), (1116, 1, 4), (1110, 1, 4), (831, 1, 4), (1105, 1, 4), (945, 1, 4), (1130, 1, 4), (1138, 1, 4), (988, 1, 4), (976, 1, 4), (1129, 1, 4), (1011, 1, 4), (1119, 1, 4), (1112, 1, 4), (1095, 1, 4), (1474, 1, 4), (997, 1, 4), (1131, 1, 4), (1012, 1, 4), (958, 1, 4), (959, 1, 4), (1428, 1, 4), (1173, 1, 4), (1154, 1, 4), (1146, 1, 4), (835, 1, 4), (1433, 1, 4), (1448, 1, 4), (1123, 1, 4), (1117, 1, 4), (1427, 1, 4), (1001, 1, 4), (995, 1, 4), (1084, 1, 4), (1400, 1, 4), (1225, 1, 4), (996, 1, 4), (939, 1, 4), (1292, 1, 4), (823, 1, 4), (1096, 1, 4), (1397, 1, 4), (816, 1, 4), (856, 1, 4), (822, 1, 4), (1099, 1, 4), (969, 1, 4), (1136, 1, 4), (1109, 1, 4), (985, 1, 4), (1078, 1, 4), (990, 1, 4), (1370, 1, 4), (1390, 1, 4), (1152, 1, 4), (1135, 1, 4), (1447, 1, 4), (1034, 1, 4), (1414, 1, 4), (1456, 1, 4), (1296, 1, 4), (1165, 1, 4), (1261, 1, 4), (1149, 1, 4), (1094, 1, 4), (871, 1, 4), (1026, 1, 4), (1092, 1, 4), (1378, 1, 4), (938, 1, 4), (1107, 1, 4), (933, 1, 4), (1082, 1, 4), (1118, 1, 4), (1383, 1, 4), (1137, 1, 4), (1160, 1, 4), (1364, 1, 4), (948, 1, 4), (1147, 1, 4), (946, 1, 4), (1102, 1, 4), (1089, 1, 4), (1098, 1, 4), (1431, 1, 4), (1270, 1, 4), (1144, 1, 4), (1163, 1, 4), (1377, 1, 4), (834, 1, 4), (830, 1, 4), (1407, 1, 4), (1176, 1, 4), (1396, 1, 4), (693, 1, 4), (847, 1, 4), (1399, 1, 4), (1016, 1, 4), (1068, 1, 4), (1461, 1, 4), (851, 1, 4), (716, 1, 4), (947, 1, 4), (1097, 1, 4), (940, 1, 4), (1277, 1, 4), (867, 1, 4), (1420, 1, 4), (1079, 1, 4), (838, 1, 4), (1265, 1, 4), (949, 1, 4), (1027, 1, 4), (837, 1, 4), (832, 1, 4), (1030, 1, 4), (1008, 1, 4), (1024, 1, 4), (998, 1, 4), (1295, 1, 4), (1256, 1, 4), (1055, 1, 4), (1282, 1, 4), (1432, 1, 4), (698, 1, 4), (1066, 1, 4), (1167, 1, 4), (1010, 1, 4), (952, 1, 4), (1029, 1, 4), (936, 1, 4), (1087, 1, 4), (972, 1, 4), (1162, 1, 4), (1086, 1, 4), (836, 1, 4), (1244, 1, 4), (1015, 1, 4), (954, 1, 4), (1252, 1, 4), (704, 1, 4), (1000, 1, 4), (680, 1, 4), (1262, 1, 4), (862, 1, 4), (810, 1, 4), (686, 1, 4), (1248, 1, 4), (942, 1, 4), (1073, 1, 4), (1083, 1, 4), (1002, 1, 4), (960, 1, 4), (1259, 1, 4), (1274, 1, 4), (1081, 1, 4), (1405, 1, 4), (848, 1, 4), (1415, 1, 4), (932, 1, 4), (1454, 1, 4), (1037, 1, 4), (1170, 1, 4), (1022, 1, 4), (814, 1, 4), (1159, 1, 4), (1090, 1, 4), (1434, 1, 4), (931, 1, 4), (999, 1, 4), (1009, 1, 4), (1023, 1, 4), (1346, 1, 4), (1080, 1, 4), (1064, 1, 4), (852, 1, 4), (709, 1, 4), (1093, 1, 4), (842, 1, 4), (1164, 1, 4), (1020, 1, 4), (1374, 1, 4), (950, 1, 4), (703, 1, 4), (1018, 1, 4), (1362, 1, 4), (844, 1, 4), (1299, 1, 4), (1276, 1, 4), (1425, 1, 4), (1373, 1, 4), (1067, 1, 4), (937, 1, 4), (824, 1, 4), (1402, 1, 4), (1355, 1, 4), (679, 1, 4), (828, 1, 4), (821, 1, 4), (1422, 1, 4), (1069, 1, 4), (1161, 1, 4), (699, 1, 4), (1005, 1, 4), (1236, 1, 4), (1017, 1, 4), (1004, 1, 4), (1250, 1, 4), (1465, 1, 4), (1151, 1, 4), (1254, 1, 4), (1394, 1, 4), (1386, 1, 4), (1445, 1, 4), (1421, 1, 4), (1404, 1, 4), (813, 1, 4), (826, 1, 4), (843, 1, 4), (855, 1, 4), (1235, 1, 4), (927, 1, 4), (1166, 1, 4), (1381, 1, 4), (1475, 1, 4), (1379, 1, 4), (695, 1, 4), (1375, 1, 4), (1153, 1, 4), (1429, 1, 4), (802, 1, 4), (808, 1, 4), (1369, 1, 4), (1088, 1, 4), (1273, 1, 4), (421, 1, 4), (1437, 1, 4), (943, 1, 4), (811, 1, 4), (1395, 1, 4), (1367, 1, 4), (1246, 1, 4), (892, 1, 4), (1408, 1, 4), (1387, 1, 4), (817, 1, 4), (430, 1, 4), (1442, 1, 4), (1392, 1, 4), (1028, 1, 4), (864, 1, 4), (1007, 1, 4), (723, 1, 4), (1169, 1, 4), (545, 1, 4), (840, 1, 4), (1168, 1, 4), (1430, 1, 4), (1284, 1, 4), (833, 1, 4), (1309, 1, 4), (865, 1, 4), (1376, 1, 4), (1357, 1, 4), (1419, 1, 4), (1372, 1, 4), (1065, 1, 4), (1366, 1, 4), (1406, 1, 4), (1409, 1, 4), (1382, 1, 4), (1457, 1, 4), (1297, 1, 4), (1288, 1, 4), (1189, 1, 4), (872, 1, 4), (859, 1, 4), (866, 1, 4), (1441, 1, 4), (1036, 1, 4), (1233, 1, 4), (819, 1, 4), (1380, 1, 4), (1424, 1, 4), (1071, 1, 4), (1038, 1, 4), (1076, 1, 4), (1269, 1, 4), (845, 1, 4), (1075, 1, 4), (1255, 1, 4), (1388, 1, 4), (683, 1, 4), (1242, 1, 4), (1330, 1, 4), (1344, 1, 4), (432, 1, 4), (1423, 1, 4), (1212, 1, 4), (935, 1, 4), (829, 1, 4), (1214, 1, 4), (812, 1, 4), (1058, 1, 4), (682, 1, 4), (1426, 1, 4), (825, 1, 4), (1413, 1, 4), (542, 1, 4), (732, 1, 4), (436, 1, 4), (860, 1, 4), (1033, 1, 4), (724, 1, 4), (1180, 1, 4), (1232, 1, 4), (1238, 1, 4), (1174, 1, 4), (1063, 1, 4), (854, 1, 4), (1074, 1, 4), (1435, 1, 4), (858, 1, 4), (711, 1, 4), (1319, 1, 4), (714, 1, 4), (1271, 1, 4), (1470, 1, 4), (1351, 1, 4), (1368, 1, 4), (818, 1, 4), (691, 1, 4), (1171, 1, 4), (1178, 1, 4), (1363, 1, 4), (419, 1, 4), (1247, 1, 4), (1371, 1, 4), (1243, 1, 4), (1410, 1, 4), (722, 1, 4), (1070, 1, 4), (815, 1, 4), (1253, 1, 4), (1025, 1, 4), (718, 1, 4), (1031, 1, 4), (1283, 1, 4), (1241, 1, 4), (1227, 1, 4), (563, 1, 4), (1175, 1, 4), (1191, 1, 4), (820, 1, 4), (1361, 1, 4), (1240, 1, 4), (1455, 1, 4), (1052, 1, 4), (869, 1, 4), (1385, 1, 4), (1401, 1, 4), (696, 1, 4), (809, 1, 4), (538, 1, 4), (1311, 1, 4), (701, 1, 4), (1391, 1, 4), (1257, 1, 4), (1260, 1, 4), (692, 1, 4), (1251, 1, 4), (1053, 1, 4), (1290, 1, 4), (1172, 1, 4), (1224, 1, 4), (839, 1, 4), (1345, 1, 4), (1278, 1, 4), (1384, 1, 4), (1060, 1, 4), (934, 1, 4), (1268, 1, 4), (1356, 1, 4), (1443, 1, 4), (1266, 1, 4), (1444, 1, 4), (668, 1, 4), (881, 1, 4), (1181, 1, 4), (551, 1, 4), (1221, 1, 4), (1229, 1, 4), (422, 1, 4), (544, 1, 4), (556, 1, 4), (1436, 1, 4), (1326, 1, 4), (1051, 1, 4), (694, 1, 4), (1280, 1, 4), (928, 1, 4), (861, 1, 4), (1279, 1, 4), (596, 1, 4), (1217, 1, 4), (1440, 1, 4), (1072, 1, 4), (1464, 1, 4), (1263, 1, 4), (1453, 1, 4), (700, 1, 4), (1403, 1, 4), (1239, 1, 4), (1417, 1, 4), (1438, 1, 4), (568, 1, 4), (706, 1, 4), (1449, 1, 4), (800, 1, 4), (1237, 1, 4), (863, 1, 4), (1452, 1, 4), (1245, 1, 4), (1177, 1, 4), (922, 1, 4), (1218, 1, 4), (850, 1, 4), (807, 1, 4), (554, 1, 4), (1460, 1, 4), (888, 1, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange_2': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[80],
            dtype=[Dtype.int64],
        ),
    ),

    'expand_3': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(951, 80), (994, 80), (953, 80), (1145, 80), (956, 80), (1125, 80), (983, 80), (1077, 80), (963, 80), (1121, 80), (971, 80), (1114, 80), (1286, 80), (1140, 80), (1085, 80), (1150, 80), (1104, 80), (1179, 80), (984, 80), (1139, 80), (1127, 80), (1155, 80), (975, 80), (1019, 80), (966, 80), (1389, 80), (978, 80), (1398, 80), (1156, 80), (989, 80), (1013, 80), (1120, 80), (1158, 80), (973, 80), (827, 80), (1157, 80), (977, 80), (1106, 80), (1113, 80), (1122, 80), (941, 80), (1416, 80), (1134, 80), (980, 80), (857, 80), (1393, 80), (1148, 80), (1103, 80), (982, 80), (993, 80), (1141, 80), (1124, 80), (992, 80), (1101, 80), (1014, 80), (967, 80), (1111, 80), (841, 80), (962, 80), (970, 80), (1100, 80), (944, 80), (1115, 80), (968, 80), (1142, 80), (961, 80), (964, 80), (1133, 80), (1128, 80), (1021, 80), (1003, 80), (1091, 80), (955, 80), (1108, 80), (965, 80), (986, 80), (987, 80), (981, 80), (690, 80), (1126, 80), (974, 80), (957, 80), (991, 80), (1006, 80), (846, 80), (1143, 80), (979, 80), (1132, 80), (1116, 80), (1110, 80), (831, 80), (1105, 80), (945, 80), (1130, 80), (1138, 80), (988, 80), (976, 80), (1129, 80), (1011, 80), (1119, 80), (1112, 80), (1095, 80), (1474, 80), (997, 80), (1131, 80), (1012, 80), (958, 80), (959, 80), (1428, 80), (1173, 80), (1154, 80), (1146, 80), (835, 80), (1433, 80), (1448, 80), (1123, 80), (1117, 80), (1427, 80), (1001, 80), (995, 80), (1084, 80), (1400, 80), (1225, 80), (996, 80), (939, 80), (1292, 80), (823, 80), (1096, 80), (1397, 80), (816, 80), (856, 80), (822, 80), (1099, 80), (969, 80), (1136, 80), (1109, 80), (985, 80), (1078, 80), (990, 80), (1370, 80), (1390, 80), (1152, 80), (1135, 80), (1447, 80), (1034, 80), (1414, 80), (1456, 80), (1296, 80), (1165, 80), (1261, 80), (1149, 80), (1094, 80), (871, 80), (1026, 80), (1092, 80), (1378, 80), (938, 80), (1107, 80), (933, 80), (1082, 80), (1118, 80), (1383, 80), (1137, 80), (1160, 80), (1364, 80), (948, 80), (1147, 80), (946, 80), (1102, 80), (1089, 80), (1098, 80), (1431, 80), (1270, 80), (1144, 80), (1163, 80), (1377, 80), (834, 80), (830, 80), (1407, 80), (1176, 80), (1396, 80), (693, 80), (847, 80), (1399, 80), (1016, 80), (1068, 80), (1461, 80), (851, 80), (716, 80), (947, 80), (1097, 80), (940, 80), (1277, 80), (867, 80), (1420, 80), (1079, 80), (838, 80), (1265, 80), (949, 80), (1027, 80), (837, 80), (832, 80), (1030, 80), (1008, 80), (1024, 80), (998, 80), (1295, 80), (1256, 80), (1055, 80), (1282, 80), (1432, 80), (698, 80), (1066, 80), (1167, 80), (1010, 80), (952, 80), (1029, 80), (936, 80), (1087, 80), (972, 80), (1162, 80), (1086, 80), (836, 80), (1244, 80), (1015, 80), (954, 80), (1252, 80), (704, 80), (1000, 80), (680, 80), (1262, 80), (862, 80), (810, 80), (686, 80), (1248, 80), (942, 80), (1073, 80), (1083, 80), (1002, 80), (960, 80), (1259, 80), (1274, 80), (1081, 80), (1405, 80), (848, 80), (1415, 80), (932, 80), (1454, 80), (1037, 80), (1170, 80), (1022, 80), (814, 80), (1159, 80), (1090, 80), (1434, 80), (931, 80), (999, 80), (1009, 80), (1023, 80), (1346, 80), (1080, 80), (1064, 80), (852, 80), (709, 80), (1093, 80), (842, 80), (1164, 80), (1020, 80), (1374, 80), (950, 80), (703, 80), (1018, 80), (1362, 80), (844, 80), (1299, 80), (1276, 80), (1425, 80), (1373, 80), (1067, 80), (937, 80), (824, 80), (1402, 80), (1355, 80), (679, 80), (828, 80), (821, 80), (1422, 80), (1069, 80), (1161, 80), (699, 80), (1005, 80), (1236, 80), (1017, 80), (1004, 80), (1250, 80), (1465, 80), (1151, 80), (1254, 80), (1394, 80), (1386, 80), (1445, 80), (1421, 80), (1404, 80), (813, 80), (826, 80), (843, 80), (855, 80), (1235, 80), (927, 80), (1166, 80), (1381, 80), (1475, 80), (1379, 80), (695, 80), (1375, 80), (1153, 80), (1429, 80), (802, 80), (808, 80), (1369, 80), (1088, 80), (1273, 80), (421, 80), (1437, 80), (943, 80), (811, 80), (1395, 80), (1367, 80), (1246, 80), (892, 80), (1408, 80), (1387, 80), (817, 80), (430, 80), (1442, 80), (1392, 80), (1028, 80), (864, 80), (1007, 80), (723, 80), (1169, 80), (545, 80), (840, 80), (1168, 80), (1430, 80), (1284, 80), (833, 80), (1309, 80), (865, 80), (1376, 80), (1357, 80), (1419, 80), (1372, 80), (1065, 80), (1366, 80), (1406, 80), (1409, 80), (1382, 80), (1457, 80), (1297, 80), (1288, 80), (1189, 80), (872, 80), (859, 80), (866, 80), (1441, 80), (1036, 80), (1233, 80), (819, 80), (1380, 80), (1424, 80), (1071, 80), (1038, 80), (1076, 80), (1269, 80), (845, 80), (1075, 80), (1255, 80), (1388, 80), (683, 80), (1242, 80), (1330, 80), (1344, 80), (432, 80), (1423, 80), (1212, 80), (935, 80), (829, 80), (1214, 80), (812, 80), (1058, 80), (682, 80), (1426, 80), (825, 80), (1413, 80), (542, 80), (732, 80), (436, 80), (860, 80), (1033, 80), (724, 80), (1180, 80), (1232, 80), (1238, 80), (1174, 80), (1063, 80), (854, 80), (1074, 80), (1435, 80), (858, 80), (711, 80), (1319, 80), (714, 80), (1271, 80), (1470, 80), (1351, 80), (1368, 80), (818, 80), (691, 80), (1171, 80), (1178, 80), (1363, 80), (419, 80), (1247, 80), (1371, 80), (1243, 80), (1410, 80), (722, 80), (1070, 80), (815, 80), (1253, 80), (1025, 80), (718, 80), (1031, 80), (1283, 80), (1241, 80), (1227, 80), (563, 80), (1175, 80), (1191, 80), (820, 80), (1361, 80), (1240, 80), (1455, 80), (1052, 80), (869, 80), (1385, 80), (1401, 80), (696, 80), (809, 80), (538, 80), (1311, 80), (701, 80), (1391, 80), (1257, 80), (1260, 80), (692, 80), (1251, 80), (1053, 80), (1290, 80), (1172, 80), (1224, 80), (839, 80), (1345, 80), (1278, 80), (1384, 80), (1060, 80), (934, 80), (1268, 80), (1356, 80), (1443, 80), (1266, 80), (1444, 80), (668, 80), (881, 80), (1181, 80), (551, 80), (1221, 80), (1229, 80), (422, 80), (544, 80), (556, 80), (1436, 80), (1326, 80), (1051, 80), (694, 80), (1280, 80), (928, 80), (861, 80), (1279, 80), (596, 80), (1217, 80), (1440, 80), (1072, 80), (1464, 80), (1263, 80), (1453, 80), (700, 80), (1403, 80), (1239, 80), (1417, 80), (1438, 80), (568, 80), (706, 80), (1449, 80), (800, 80), (1237, 80), (863, 80), (1452, 80), (1245, 80), (1177, 80), (922, 80), (1218, 80), (850, 80), (807, 80), (554, 80), (1460, 80), (888, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'expand_4': dict(
        name=["expand"],
        interface=["torch.Tensor"],
        para=dict(
            size=[(951, 80), (994, 80), (953, 80), (1145, 80), (956, 80), (1125, 80), (983, 80), (1077, 80), (963, 80), (1121, 80), (971, 80), (1114, 80), (1286, 80), (1140, 80), (1085, 80), (1150, 80), (1104, 80), (1179, 80), (984, 80), (1139, 80), (1127, 80), (1155, 80), (975, 80), (1019, 80), (966, 80), (1389, 80), (978, 80), (1398, 80), (1156, 80), (989, 80), (1013, 80), (1120, 80), (1158, 80), (973, 80), (827, 80), (1157, 80), (977, 80), (1106, 80), (1113, 80), (1122, 80), (941, 80), (1416, 80), (1134, 80), (980, 80), (857, 80), (1393, 80), (1148, 80), (1103, 80), (982, 80), (993, 80), (1141, 80), (1124, 80), (992, 80), (1101, 80), (1014, 80), (967, 80), (1111, 80), (841, 80), (962, 80), (970, 80), (1100, 80), (944, 80), (1115, 80), (968, 80), (1142, 80), (961, 80), (964, 80), (1133, 80), (1128, 80), (1021, 80), (1003, 80), (1091, 80), (955, 80), (1108, 80), (965, 80), (986, 80), (987, 80), (981, 80), (690, 80), (1126, 80), (974, 80), (957, 80), (991, 80), (1006, 80), (846, 80), (1143, 80), (979, 80), (1132, 80), (1116, 80), (1110, 80), (831, 80), (1105, 80), (945, 80), (1130, 80), (1138, 80), (988, 80), (976, 80), (1129, 80), (1011, 80), (1119, 80), (1112, 80), (1095, 80), (1474, 80), (997, 80), (1131, 80), (1012, 80), (958, 80), (959, 80), (1428, 80), (1173, 80), (1154, 80), (1146, 80), (835, 80), (1433, 80), (1448, 80), (1123, 80), (1117, 80), (1427, 80), (1001, 80), (995, 80), (1084, 80), (1400, 80), (1225, 80), (996, 80), (939, 80), (1292, 80), (823, 80), (1096, 80), (1397, 80), (816, 80), (856, 80), (822, 80), (1099, 80), (969, 80), (1136, 80), (1109, 80), (985, 80), (1078, 80), (990, 80), (1370, 80), (1390, 80), (1152, 80), (1135, 80), (1447, 80), (1034, 80), (1414, 80), (1456, 80), (1296, 80), (1165, 80), (1261, 80), (1149, 80), (1094, 80), (871, 80), (1026, 80), (1092, 80), (1378, 80), (938, 80), (1107, 80), (933, 80), (1082, 80), (1118, 80), (1383, 80), (1137, 80), (1160, 80), (1364, 80), (948, 80), (1147, 80), (946, 80), (1102, 80), (1089, 80), (1098, 80), (1431, 80), (1270, 80), (1144, 80), (1163, 80), (1377, 80), (834, 80), (830, 80), (1407, 80), (1176, 80), (1396, 80), (693, 80), (847, 80), (1399, 80), (1016, 80), (1068, 80), (1461, 80), (851, 80), (716, 80), (947, 80), (1097, 80), (940, 80), (1277, 80), (867, 80), (1420, 80), (1079, 80), (838, 80), (1265, 80), (949, 80), (1027, 80), (837, 80), (832, 80), (1030, 80), (1008, 80), (1024, 80), (998, 80), (1295, 80), (1256, 80), (1055, 80), (1282, 80), (1432, 80), (698, 80), (1066, 80), (1167, 80), (1010, 80), (952, 80), (1029, 80), (936, 80), (1087, 80), (972, 80), (1162, 80), (1086, 80), (836, 80), (1244, 80), (1015, 80), (954, 80), (1252, 80), (704, 80), (1000, 80), (680, 80), (1262, 80), (862, 80), (810, 80), (686, 80), (1248, 80), (942, 80), (1073, 80), (1083, 80), (1002, 80), (960, 80), (1259, 80), (1274, 80), (1081, 80), (1405, 80), (848, 80), (1415, 80), (932, 80), (1454, 80), (1037, 80), (1170, 80), (1022, 80), (814, 80), (1159, 80), (1090, 80), (1434, 80), (931, 80), (999, 80), (1009, 80), (1023, 80), (1346, 80), (1080, 80), (1064, 80), (852, 80), (709, 80), (1093, 80), (842, 80), (1164, 80), (1020, 80), (1374, 80), (950, 80), (703, 80), (1018, 80), (1362, 80), (844, 80), (1299, 80), (1276, 80), (1425, 80), (1373, 80), (1067, 80), (937, 80), (824, 80), (1402, 80), (1355, 80), (679, 80), (828, 80), (821, 80), (1422, 80), (1069, 80), (1161, 80), (699, 80), (1005, 80), (1236, 80), (1017, 80), (1004, 80), (1250, 80), (1465, 80), (1151, 80), (1254, 80), (1394, 80), (1386, 80), (1445, 80), (1421, 80), (1404, 80), (813, 80), (826, 80), (843, 80), (855, 80), (1235, 80), (927, 80), (1166, 80), (1381, 80), (1475, 80), (1379, 80), (695, 80), (1375, 80), (1153, 80), (1429, 80), (802, 80), (808, 80), (1369, 80), (1088, 80), (1273, 80), (421, 80), (1437, 80), (943, 80), (811, 80), (1395, 80), (1367, 80), (1246, 80), (892, 80), (1408, 80), (1387, 80), (817, 80), (430, 80), (1442, 80), (1392, 80), (1028, 80), (864, 80), (1007, 80), (723, 80), (1169, 80), (545, 80), (840, 80), (1168, 80), (1430, 80), (1284, 80), (833, 80), (1309, 80), (865, 80), (1376, 80), (1357, 80), (1419, 80), (1372, 80), (1065, 80), (1366, 80), (1406, 80), (1409, 80), (1382, 80), (1457, 80), (1297, 80), (1288, 80), (1189, 80), (872, 80), (859, 80), (866, 80), (1441, 80), (1036, 80), (1233, 80), (819, 80), (1380, 80), (1424, 80), (1071, 80), (1038, 80), (1076, 80), (1269, 80), (845, 80), (1075, 80), (1255, 80), (1388, 80), (683, 80), (1242, 80), (1330, 80), (1344, 80), (432, 80), (1423, 80), (1212, 80), (935, 80), (829, 80), (1214, 80), (812, 80), (1058, 80), (682, 80), (1426, 80), (825, 80), (1413, 80), (542, 80), (732, 80), (436, 80), (860, 80), (1033, 80), (724, 80), (1180, 80), (1232, 80), (1238, 80), (1174, 80), (1063, 80), (854, 80), (1074, 80), (1435, 80), (858, 80), (711, 80), (1319, 80), (714, 80), (1271, 80), (1470, 80), (1351, 80), (1368, 80), (818, 80), (691, 80), (1171, 80), (1178, 80), (1363, 80), (419, 80), (1247, 80), (1371, 80), (1243, 80), (1410, 80), (722, 80), (1070, 80), (815, 80), (1253, 80), (1025, 80), (718, 80), (1031, 80), (1283, 80), (1241, 80), (1227, 80), (563, 80), (1175, 80), (1191, 80), (820, 80), (1361, 80), (1240, 80), (1455, 80), (1052, 80), (869, 80), (1385, 80), (1401, 80), (696, 80), (809, 80), (538, 80), (1311, 80), (701, 80), (1391, 80), (1257, 80), (1260, 80), (692, 80), (1251, 80), (1053, 80), (1290, 80), (1172, 80), (1224, 80), (839, 80), (1345, 80), (1278, 80), (1384, 80), (1060, 80), (934, 80), (1268, 80), (1356, 80), (1443, 80), (1266, 80), (1444, 80), (668, 80), (881, 80), (1181, 80), (551, 80), (1221, 80), (1229, 80), (422, 80), (544, 80), (556, 80), (1436, 80), (1326, 80), (1051, 80), (694, 80), (1280, 80), (928, 80), (861, 80), (1279, 80), (596, 80), (1217, 80), (1440, 80), (1072, 80), (1464, 80), (1263, 80), (1453, 80), (700, 80), (1403, 80), (1239, 80), (1417, 80), (1438, 80), (568, 80), (706, 80), (1449, 80), (800, 80), (1237, 80), (863, 80), (1452, 80), (1245, 80), (1177, 80), (922, 80), (1218, 80), (850, 80), (807, 80), (554, 80), (1460, 80), (888, 80)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(951, 1), (994, 1), (953, 1), (1145, 1), (956, 1), (1125, 1), (983, 1), (1077, 1), (963, 1), (1121, 1), (971, 1), (1114, 1), (1286, 1), (1140, 1), (1085, 1), (1150, 1), (1104, 1), (1179, 1), (984, 1), (1139, 1), (1127, 1), (1155, 1), (975, 1), (1019, 1), (966, 1), (1389, 1), (978, 1), (1398, 1), (1156, 1), (989, 1), (1013, 1), (1120, 1), (1158, 1), (973, 1), (827, 1), (1157, 1), (977, 1), (1106, 1), (1113, 1), (1122, 1), (941, 1), (1416, 1), (1134, 1), (980, 1), (857, 1), (1393, 1), (1148, 1), (1103, 1), (982, 1), (993, 1), (1141, 1), (1124, 1), (992, 1), (1101, 1), (1014, 1), (967, 1), (1111, 1), (841, 1), (962, 1), (970, 1), (1100, 1), (944, 1), (1115, 1), (968, 1), (1142, 1), (961, 1), (964, 1), (1133, 1), (1128, 1), (1021, 1), (1003, 1), (1091, 1), (955, 1), (1108, 1), (965, 1), (986, 1), (987, 1), (981, 1), (690, 1), (1126, 1), (974, 1), (957, 1), (991, 1), (1006, 1), (846, 1), (1143, 1), (979, 1), (1132, 1), (1116, 1), (1110, 1), (831, 1), (1105, 1), (945, 1), (1130, 1), (1138, 1), (988, 1), (976, 1), (1129, 1), (1011, 1), (1119, 1), (1112, 1), (1095, 1), (1474, 1), (997, 1), (1131, 1), (1012, 1), (958, 1), (959, 1), (1428, 1), (1173, 1), (1154, 1), (1146, 1), (835, 1), (1433, 1), (1448, 1), (1123, 1), (1117, 1), (1427, 1), (1001, 1), (995, 1), (1084, 1), (1400, 1), (1225, 1), (996, 1), (939, 1), (1292, 1), (823, 1), (1096, 1), (1397, 1), (816, 1), (856, 1), (822, 1), (1099, 1), (969, 1), (1136, 1), (1109, 1), (985, 1), (1078, 1), (990, 1), (1370, 1), (1390, 1), (1152, 1), (1135, 1), (1447, 1), (1034, 1), (1414, 1), (1456, 1), (1296, 1), (1165, 1), (1261, 1), (1149, 1), (1094, 1), (871, 1), (1026, 1), (1092, 1), (1378, 1), (938, 1), (1107, 1), (933, 1), (1082, 1), (1118, 1), (1383, 1), (1137, 1), (1160, 1), (1364, 1), (948, 1), (1147, 1), (946, 1), (1102, 1), (1089, 1), (1098, 1), (1431, 1), (1270, 1), (1144, 1), (1163, 1), (1377, 1), (834, 1), (830, 1), (1407, 1), (1176, 1), (1396, 1), (693, 1), (847, 1), (1399, 1), (1016, 1), (1068, 1), (1461, 1), (851, 1), (716, 1), (947, 1), (1097, 1), (940, 1), (1277, 1), (867, 1), (1420, 1), (1079, 1), (838, 1), (1265, 1), (949, 1), (1027, 1), (837, 1), (832, 1), (1030, 1), (1008, 1), (1024, 1), (998, 1), (1295, 1), (1256, 1), (1055, 1), (1282, 1), (1432, 1), (698, 1), (1066, 1), (1167, 1), (1010, 1), (952, 1), (1029, 1), (936, 1), (1087, 1), (972, 1), (1162, 1), (1086, 1), (836, 1), (1244, 1), (1015, 1), (954, 1), (1252, 1), (704, 1), (1000, 1), (680, 1), (1262, 1), (862, 1), (810, 1), (686, 1), (1248, 1), (942, 1), (1073, 1), (1083, 1), (1002, 1), (960, 1), (1259, 1), (1274, 1), (1081, 1), (1405, 1), (848, 1), (1415, 1), (932, 1), (1454, 1), (1037, 1), (1170, 1), (1022, 1), (814, 1), (1159, 1), (1090, 1), (1434, 1), (931, 1), (999, 1), (1009, 1), (1023, 1), (1346, 1), (1080, 1), (1064, 1), (852, 1), (709, 1), (1093, 1), (842, 1), (1164, 1), (1020, 1), (1374, 1), (950, 1), (703, 1), (1018, 1), (1362, 1), (844, 1), (1299, 1), (1276, 1), (1425, 1), (1373, 1), (1067, 1), (937, 1), (824, 1), (1402, 1), (1355, 1), (679, 1), (828, 1), (821, 1), (1422, 1), (1069, 1), (1161, 1), (699, 1), (1005, 1), (1236, 1), (1017, 1), (1004, 1), (1250, 1), (1465, 1), (1151, 1), (1254, 1), (1394, 1), (1386, 1), (1445, 1), (1421, 1), (1404, 1), (813, 1), (826, 1), (843, 1), (855, 1), (1235, 1), (927, 1), (1166, 1), (1381, 1), (1475, 1), (1379, 1), (695, 1), (1375, 1), (1153, 1), (1429, 1), (802, 1), (808, 1), (1369, 1), (1088, 1), (1273, 1), (421, 1), (1437, 1), (943, 1), (811, 1), (1395, 1), (1367, 1), (1246, 1), (892, 1), (1408, 1), (1387, 1), (817, 1), (430, 1), (1442, 1), (1392, 1), (1028, 1), (864, 1), (1007, 1), (723, 1), (1169, 1), (545, 1), (840, 1), (1168, 1), (1430, 1), (1284, 1), (833, 1), (1309, 1), (865, 1), (1376, 1), (1357, 1), (1419, 1), (1372, 1), (1065, 1), (1366, 1), (1406, 1), (1409, 1), (1382, 1), (1457, 1), (1297, 1), (1288, 1), (1189, 1), (872, 1), (859, 1), (866, 1), (1441, 1), (1036, 1), (1233, 1), (819, 1), (1380, 1), (1424, 1), (1071, 1), (1038, 1), (1076, 1), (1269, 1), (845, 1), (1075, 1), (1255, 1), (1388, 1), (683, 1), (1242, 1), (1330, 1), (1344, 1), (432, 1), (1423, 1), (1212, 1), (935, 1), (829, 1), (1214, 1), (812, 1), (1058, 1), (682, 1), (1426, 1), (825, 1), (1413, 1), (542, 1), (732, 1), (436, 1), (860, 1), (1033, 1), (724, 1), (1180, 1), (1232, 1), (1238, 1), (1174, 1), (1063, 1), (854, 1), (1074, 1), (1435, 1), (858, 1), (711, 1), (1319, 1), (714, 1), (1271, 1), (1470, 1), (1351, 1), (1368, 1), (818, 1), (691, 1), (1171, 1), (1178, 1), (1363, 1), (419, 1), (1247, 1), (1371, 1), (1243, 1), (1410, 1), (722, 1), (1070, 1), (815, 1), (1253, 1), (1025, 1), (718, 1), (1031, 1), (1283, 1), (1241, 1), (1227, 1), (563, 1), (1175, 1), (1191, 1), (820, 1), (1361, 1), (1240, 1), (1455, 1), (1052, 1), (869, 1), (1385, 1), (1401, 1), (696, 1), (809, 1), (538, 1), (1311, 1), (701, 1), (1391, 1), (1257, 1), (1260, 1), (692, 1), (1251, 1), (1053, 1), (1290, 1), (1172, 1), (1224, 1), (839, 1), (1345, 1), (1278, 1), (1384, 1), (1060, 1), (934, 1), (1268, 1), (1356, 1), (1443, 1), (1266, 1), (1444, 1), (668, 1), (881, 1), (1181, 1), (551, 1), (1221, 1), (1229, 1), (422, 1), (544, 1), (556, 1), (1436, 1), (1326, 1), (1051, 1), (694, 1), (1280, 1), (928, 1), (861, 1), (1279, 1), (596, 1), (1217, 1), (1440, 1), (1072, 1), (1464, 1), (1263, 1), (1453, 1), (700, 1), (1403, 1), (1239, 1), (1417, 1), (1438, 1), (568, 1), (706, 1), (1449, 1), (800, 1), (1237, 1), (863, 1), (1452, 1), (1245, 1), (1177, 1), (922, 1), (1218, 1), (850, 1), (807, 1), (554, 1), (1460, 1), (888, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
