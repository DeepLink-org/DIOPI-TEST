from ...config import Genfunc
from ...dtype import Dtype

dbnet_config = {
    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[1000],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 640, 640), (16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1), (16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(3, 640, 640), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 3, 640, 640), (16, 64, 160, 160), (16, 64, 160, 160), (16, 128, 80, 80), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (16, 256, 40, 40), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (16, 256, 160, 160), (16, 256, 80, 80), (16, 256, 40, 40), (16, 256, 20, 20), (8, 3, 640, 640), (8, 64, 160, 160), (8, 64, 160, 160), (8, 128, 80, 80), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 256, 40, 40), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20), (8, 256, 160, 160), (8, 256, 80, 80), (8, 256, 40, 40), (8, 256, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 128, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 128, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[True, True, True, True, True, True, True, True, True, True],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 320, 320), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (8, 64, 320, 320), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (64,), (64,), (128,), (256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (64,), (64,), (128,), (256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (64,), (64,), (128,), (256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (64,), (64,), (128,), (256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 320, 320), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (8, 64, 320, 320), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3],
            stride=[2, 2],
            padding=[1, 1],
            dilation=[1, 1],
            ceil_mode=[False, False],
            return_indices=[False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 320, 320), (8, 64, 320, 320)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (8, 64, 160, 160), (8, 128, 80, 80), (8, 256, 40, 40), (8, 512, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'interpolate': dict(
        name=["interpolate"],
        para=dict(
            size=[(40, 40), (80, 80), (160, 160), (160, 160), (160, 160), (160, 160), (160, 160), (40, 40), (80, 80), (160, 160), (160, 160), (160, 160), (160, 160), (160, 160)],
            mode=['nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 256, 20, 20), (16, 256, 40, 40), (16, 256, 80, 80), (16, 64, 160, 160), (16, 64, 80, 80), (16, 64, 40, 40), (16, 64, 20, 20), (8, 256, 20, 20), (8, 256, 40, 40), (8, 256, 80, 80), (8, 64, 160, 160), (8, 64, 80, 80), (8, 64, 40, 40), (8, 64, 20, 20)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 256, 40, 40), (16, 256, 80, 80), (16, 256, 160, 160), (), (8, 256, 40, 40), (8, 256, 80, 80), (8, 256, 160, 160)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 256, 40, 40), (16, 256, 80, 80), (16, 256, 160, 160), (), (8, 256, 40, 40), (8, 256, 80, 80), (8, 256, 160, 160)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((16, 64, 160, 160), (16, 64, 160, 160), (16, 64, 160, 160), (16, 64, 160, 160)), ((8, 64, 160, 160), (8, 64, 160, 160), (8, 64, 160, 160), (8, 64, 160, 160))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv_transpose2d': dict(
        name=["conv_transpose2d"],
        para=dict(
            stride=[(2, 2), (2, 2), (2, 2), (2, 2)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0)],
            output_padding=[(0, 0), (0, 0), (0, 0), (0, 0)],
            groups=[1, 1, 1, 1],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 160, 160), (16, 64, 320, 320), (8, 64, 160, 160), (8, 64, 320, 320)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "shape": [(64, 64, 2, 2), (64, 1, 2, 2), (64, 64, 2, 2), (64, 1, 2, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "shape": [(64,), (1,), (64,), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 640, 640), (16, 1, 640, 640), (8, 640, 640), (8, 1, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[-50, 2, 5.0, 10.0, -50],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (), (), (), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0, 0, 1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'nonzero': dict(
        name=["nonzero"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6,), (1,), (9,), (8,), (3,), (12,), (4,), (10,), (13,), (23,), (2,), (15,), (30,), (5,), (11,), (43,), (20,), (21,), (7,), (14,), (16,), (27,), (19,), (18,), (66,), (39,), (25,), (35,), (99,), (17,), (72,), (31,), (36,), (115,), (28,), (22,), (24,), (40,), (42,), (37,), (80,), (69,), (32,), (38,), (62,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'bitwise_not': dict(
        name=["bitwise_not"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(6,), (1,), (9,), (8,), (3,), (12,), (4,), (10,), (13,), (23,), (2,), (15,), (30,), (5,), (11,), (43,), (20,), (21,), (7,), (14,), (16,), (27,), (19,), (18,), (66,), (39,), (25,), (35,), (99,), (17,), (72,), (31,), (36,), (115,), (28,), (22,), (24,), (40,), (42,), (37,), (80,), (69,), (32,), (38,), (62,)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (16, 409600), (8, 640, 640), (8, 409600)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 640, 640), (16, 409600), (8, 640, 640), (8, 409600)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (74763,), (16, 409600), (84225,), (78906,), (81951,), (60162,), (96723,), (74571,), (84855,), (121767,), (128184,), (62634,), (245982,), (161418,), (70230,), (132195,), (86433,), (54300,), (114963,), (285696,), (95163,), (52590,), (171441,), (84465,), (268746,), (65826,), (63666,), (101346,), (59562,), (139755,), (100896,), (125631,), (109761,), (113835,), (132396,), (75069,), (161946,), (162228,), (54897,), (91812,), (40839,), (41715,), (152817,), (64974,), (141573,), (46476,), (214698,), (273759,), (111015,), (134601,), (140304,), (101385,), (98481,), (104613,), (59181,), (100746,), (52545,), (93885,), (181788,), (90360,), (68097,), (88212,), (92190,), (8, 640, 640), (35541,), (8, 409600)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'le': dict(
        name=["le"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'min': dict(
        name=["min"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'ge': dict(
        name=["ge"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'binary_cross_entropy_with_logits': dict(
        name=["binary_cross_entropy_with_logits"],
        para=dict(
            weight=[None, None],
            reduction=['none', 'none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'topk': dict(
        name=["topk"],
        interface=["torch"],
        para=dict(
            k=[74763, 84225, 78906, 81951, 60162, 96723, 74571, 84855, 121767, 128184, 62634, 245982, 161418, 70230, 132195, 86433, 54300, 114963, 285696, 95163, 52590, 171441, 84465, 268746, 65826, 63666, 101346, 59562, 139755, 100896, 125631, 109761, 113835, 132396, 75069, 161946, 162228, 54897, 91812, 40839, 41715, 152817, 64974, 141573, 46476, 214698, 273759, 111015, 134601, 140304, 101385, 98481, 104613, 59181, 100746, 52545, 93885, 181788, 90360, 68097, 88212, 92190, 35541],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[99684.000001, 1, 112300.000001, 105208.000001, 109268.000001, 80216.000001, 128964.000001, 99428.000001, 113140.000001, 162356.000001, 170912.000001, 83512.000001, 327976.000001, 215224.000001, 93640.000001, 176260.000001, 115244.000001, 72400.000001, 153284.000001, 380928.000001, 126884.000001, 70120.000001, 228588.000001, 112620.000001, 358328.000001, 87768.000001, 84888.000001, 135128.000001, 79416.000001, 186340.000001, 134528.000001, 167508.000001, 146348.000001, 151780.000001, 176528.000001, 100092.000001, 215928.000001, 216304.000001, 73196.000001, 122416.000001, 54452.000001, 55620.000001, 203756.000001, 86632.000001, 188764.000001, 61968.000001, 286264.000001, 365012.000001, 148020.000001, 179468.000001, 187072.000001, 135180.000001, 131308.000001, 139484.000001, 78908.000001, 134328.000001, 70060.000001, 125180.000001, 242384.000001, 120480.000001, 90796.000001, 117616.000001, 122920.000001, 47388.000001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'smooth_l1_loss': dict(
        name=["smooth_l1_loss"],
        para=dict(
            reduction=['none', 'none'],
            beta=[0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(16, 640, 640), (8, 640, 640)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(22)],
            lr=[0.007 for i in range(22)],
            momentum=[0.9 for i in range(22)],
            weight_decay=[0.0001 for i in range(22)],
            dampening=[0 for i in range(22)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            alpha=[-0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, -0.007, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,), (64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,), (64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd_1': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[[False] for i in range(22)],
            lr=[[0.007] for i in range(22)],
            momentum=[[0.9] for i in range(22)],
            weight_decay=[[0.0001] for i in range(22)],
            dampening=[[0] for i in range(22)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": ((64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)),
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

}
