cmake_minimum_required(VERSION 3.4)
project(diopi_conformance_test)

option(USE_CXX "Whether to use cxx impl, or use c impl" ON)
option(RUNTIME "Whether to compile DIOPI with runtime" ON)
option(ATTR_WEAK "Whether to use weak symbol for diopi functions" OFF)

include_directories(SYSTEM "${PROJECT_SOURCE_DIR}/diopirt/include")
include_directories(include)

SET(DIOPIRT diopirt)
if (RUNTIME)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
else()
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib/no_runtime)
endif()
if (ATTR_WEAK)
    add_definitions(-DDIOPI_ATTR_WEAK)
endif()

if (USE_CXX)
    set(CXX_LITERT_SRC csrc/litert.cpp)
    message("CXX_LITERT_SRC:" ${CXX_LITERT_SRC})
    add_definitions(-std=c++14)
    add_library(${DIOPIRT} SHARED ${CXX_LITERT_SRC})
else()
    set(C_LITERT_SRC csrc/litert.c)
    message("C_LITERT_SRC:" ${C_LITERT_SRC})
    add_library(${DIOPIRT} SHARED ${C_LITERT_SRC})
    set_target_properties(${DIOPIRT} PROPERTIES LINKER_LANGUAGE C)
endif()
set_target_properties(${DIOPIRT} PROPERTIES SUFFIX ".so")

set(DEVICEIMPL diopi_impl)

list(APPEND IMPL_CUDA "CUDA" "cuda")
list(APPEND IMPL_TORCH "TORCH" "LIBTORCH" "ATEN" "PYTORCH" "torch" "libtorch" "aten" "pytorch" "PyTorch")
list(APPEND IMPL_CAMB_TORCH "CAMB" "camb" "CAMB_PYTORCH" "camb_pytorch")

if (${IMPL_OPT} IN_LIST IMPL_CUDA)
    add_subdirectory(impl/cuda)
elseif (${IMPL_OPT} IN_LIST IMPL_TORCH)
    add_subdirectory(impl/torch)
elseif (${IMPL_OPT} IN_LIST IMPL_CAMB_TORCH)
    add_subdirectory(impl/camb_pytorch)
else()
    message(WARNING "No implementation module is compiled, cmake requires option -DIMPL_OPT=CUDA or TORCH")
endif()

